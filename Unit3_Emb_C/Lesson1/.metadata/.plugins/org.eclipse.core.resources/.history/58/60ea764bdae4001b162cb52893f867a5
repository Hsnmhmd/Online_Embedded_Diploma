/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
**/
typedef volatile unsigned int vuint32_t;
#include<stdio.h>

#define RCC_BASE		0x40021000
#define GPIOA_BASE		0x40010800
#define RCC_APB2ENR		*(vuint32_t *)(RCC_BASE + 0x18)
#define GPIOA_CRH		*(vuint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR		*(vuint32_t *)(GPIOA_BASE + 0x0C)
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

typedef union{
	vuint32_t all_fields;
	struct{
		vuint32_t reserved :13;
		vuint32_t p_13 :1;
	}Pin;
}R_ODR_t;
volatile R_ODR_t * R_ODR=(volatile R_ODR_t *)(GPIOA_BASE + 0x0C);
int main(void)
{
	GPIOA_CRH &= 0xff0fffff;
	GPIOA_CRH |= 0x00200000;
	RCC_APB2ENR |=1<<2;
     /*  Loop forever */
	for(;;){
		R_ODR->Pin.p_13 ^=1;
		for(int i=0;i<5000;i++){}

	}
}
