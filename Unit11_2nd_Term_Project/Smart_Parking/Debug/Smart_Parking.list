
Smart_Parking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080020dc  080020dc  000120dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800216c  0800216c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800216c  0800216c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800216c  0800216c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800216c  0800216c  0001216c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002170  08002170  00012170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002174  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000004  08002178  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08002178  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab9b  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a8e  00000000  00000000  0002abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001808  00000000  00000000  0002c656  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000438  00000000  00000000  0002de60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000350  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002190  00000000  00000000  0002e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006f79  00000000  00000000  00030778  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c202  00000000  00000000  000376f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000438f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cf8  00000000  00000000  00043970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080020c4 	.word	0x080020c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080020c4 	.word	0x080020c4

08000170 <Servo1_Entry_Gate_Init>:



//B8 SERVO1
void Servo1_Entry_Gate_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 1*/
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_8;
 8000176:	2308      	movs	r3, #8
 8000178:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 800017a:	2301      	movs	r3, #1
 800017c:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4619      	mov	r1, r3
 8000182:	4803      	ldr	r0, [pc, #12]	; (8000190 <Servo1_Entry_Gate_Init+0x20>)
 8000184:	f001 fe8c 	bl	8001ea0 <MCAL_GPIO_Init>
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40010c00 	.word	0x40010c00

08000194 <Servo1_Entry_Gate>:

//Direction Up or Down
void Servo1_Entry_Gate(uint8_t Direction)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b01      	cmp	r3, #1
 80001a2:	d10d      	bne.n	80001c0 <Servo1_Entry_Gate+0x2c>
	{
		//servo1 Enter gate up +90
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_8, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2108      	movs	r1, #8
 80001a8:	4810      	ldr	r0, [pc, #64]	; (80001ec <Servo1_Entry_Gate+0x58>)
 80001aa:	f001 fefa 	bl	8001fa2 <MCAL_GPIO_WritePin>
		dus(500);
 80001ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b2:	f001 ff43 	bl	800203c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_8, 0);
 80001b6:	2200      	movs	r2, #0
 80001b8:	2108      	movs	r1, #8
 80001ba:	480c      	ldr	r0, [pc, #48]	; (80001ec <Servo1_Entry_Gate+0x58>)
 80001bc:	f001 fef1 	bl	8001fa2 <MCAL_GPIO_WritePin>
	}
	if(Direction==Down)
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	2b02      	cmp	r3, #2
 80001c4:	d10d      	bne.n	80001e2 <Servo1_Entry_Gate+0x4e>
	{
		//servo1 Enter gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_8, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2108      	movs	r1, #8
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <Servo1_Entry_Gate+0x58>)
 80001cc:	f001 fee9 	bl	8001fa2 <MCAL_GPIO_WritePin>
		dus(1488);
 80001d0:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 80001d4:	f001 ff32 	bl	800203c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_8, 0);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <Servo1_Entry_Gate+0x58>)
 80001de:	f001 fee0 	bl	8001fa2 <MCAL_GPIO_WritePin>
	}


}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <Servo2_Exit_Gate_Init>:

//B9 SERVO2
void Servo2_Exit_Gate_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	/*SERVO MOTOR 2*/
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_9;
 80001f6:	2309      	movs	r3, #9
 80001f8:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80001fa:	2301      	movs	r3, #1
 80001fc:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &PinCinfg);
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	4619      	mov	r1, r3
 8000202:	4803      	ldr	r0, [pc, #12]	; (8000210 <Servo2_Exit_Gate_Init+0x20>)
 8000204:	f001 fe4c 	bl	8001ea0 <MCAL_GPIO_Init>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010c00 	.word	0x40010c00

08000214 <Servo2_Exit_Gate>:

//Direction Up or Down
void Servo2_Exit_Gate(uint8_t Direction)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	if(Direction == UP)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d10d      	bne.n	8000240 <Servo2_Exit_Gate+0x2c>
	{
		//servo2 Exit gate up +90
		GPIO_PinConfig_t PinCinfg;
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_9, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2109      	movs	r1, #9
 8000228:	4810      	ldr	r0, [pc, #64]	; (800026c <Servo2_Exit_Gate+0x58>)
 800022a:	f001 feba 	bl	8001fa2 <MCAL_GPIO_WritePin>
		dus(500);
 800022e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000232:	f001 ff03 	bl	800203c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_9, 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2109      	movs	r1, #9
 800023a:	480c      	ldr	r0, [pc, #48]	; (800026c <Servo2_Exit_Gate+0x58>)
 800023c:	f001 feb1 	bl	8001fa2 <MCAL_GPIO_WritePin>
	}

	if(Direction == Down)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b02      	cmp	r3, #2
 8000244:	d10d      	bne.n	8000262 <Servo2_Exit_Gate+0x4e>
	{
		//servo2 Exit gate down -90
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_9, 1);
 8000246:	2201      	movs	r2, #1
 8000248:	2109      	movs	r1, #9
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <Servo2_Exit_Gate+0x58>)
 800024c:	f001 fea9 	bl	8001fa2 <MCAL_GPIO_WritePin>
		dus(1488);
 8000250:	f44f 60ba 	mov.w	r0, #1488	; 0x5d0
 8000254:	f001 fef2 	bl	800203c <dus>
		MCAL_GPIO_WritePin(GPIOB, GPIO_Pin_9, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	2109      	movs	r1, #9
 800025c:	4803      	ldr	r0, [pc, #12]	; (800026c <Servo2_Exit_Gate+0x58>)
 800025e:	f001 fea0 	bl	8001fa2 <MCAL_GPIO_WritePin>
	}

}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40010c00 	.word	0x40010c00

08000270 <delay_mss>:
#include "keypad.h"

int Key_padRow[] = { R0, R1, R2, R3 }; //rows of the keypad
int Key_padCol[] = { C0, C1, C2, C3 }; //columns

void delay_mss(uint32_t time) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e00b      	b.n	8000296 <delay_mss+0x26>
		for (j = 0; j < 255; j++)
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	e002      	b.n	800028a <delay_mss+0x1a>
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	3301      	adds	r3, #1
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	2bfe      	cmp	r3, #254	; 0xfe
 800028e:	d9f9      	bls.n	8000284 <delay_mss+0x14>
	for (i = 0; i < time; i++)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	3301      	adds	r3, #1
 8000294:	60fb      	str	r3, [r7, #12]
 8000296:	68fa      	ldr	r2, [r7, #12]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	429a      	cmp	r2, r3
 800029c:	d3ef      	bcc.n	800027e <delay_mss+0xe>
			;
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <Keypad_init>:

void Keypad_init() {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	KEYPAD_PORT = 0xFF;
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_Pin_Number = R0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80002b2:	2308      	movs	r3, #8
 80002b4:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	481e      	ldr	r0, [pc, #120]	; (8000334 <Keypad_init+0x8c>)
 80002bc:	f001 fdf0 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = R1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80002c4:	2308      	movs	r3, #8
 80002c6:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	4819      	ldr	r0, [pc, #100]	; (8000334 <Keypad_init+0x8c>)
 80002ce:	f001 fde7 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = R2;
 80002d2:	2303      	movs	r3, #3
 80002d4:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80002d6:	2308      	movs	r3, #8
 80002d8:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4619      	mov	r1, r3
 80002de:	4815      	ldr	r0, [pc, #84]	; (8000334 <Keypad_init+0x8c>)
 80002e0:	f001 fdde 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = R3;
 80002e4:	2304      	movs	r3, #4
 80002e6:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 80002e8:	2308      	movs	r3, #8
 80002ea:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <Keypad_init+0x8c>)
 80002f2:	f001 fdd5 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = C0;
 80002f6:	2305      	movs	r3, #5
 80002f8:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80002fa:	2301      	movs	r3, #1
 80002fc:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	480c      	ldr	r0, [pc, #48]	; (8000334 <Keypad_init+0x8c>)
 8000304:	f001 fdcc 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = C1;
 8000308:	2306      	movs	r3, #6
 800030a:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 800030c:	2301      	movs	r3, #1
 800030e:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4619      	mov	r1, r3
 8000314:	4807      	ldr	r0, [pc, #28]	; (8000334 <Keypad_init+0x8c>)
 8000316:	f001 fdc3 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = C2;
 800031a:	2307      	movs	r3, #7
 800031c:	717b      	strb	r3, [r7, #5]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 800031e:	2301      	movs	r3, #1
 8000320:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4803      	ldr	r0, [pc, #12]	; (8000334 <Keypad_init+0x8c>)
 8000328:	f001 fdba 	bl	8001ea0 <MCAL_GPIO_Init>
	PinCfg.GPIO_Pin_Number = C3;
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
#endif
}
 800032c:	bf00      	nop
 800032e:	3708      	adds	r7, #8
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40010c00 	.word	0x40010c00

08000338 <Keypad_getkey>:

char Keypad_getkey() {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0

#ifdef KEYPAD_3_4
	MCAL_GPIO_WritePort(GPIOB, 0x0020);// Make Pin B5 High
 800033c:	2120      	movs	r1, #32
 800033e:	4879      	ldr	r0, [pc, #484]	; (8000524 <Keypad_getkey+0x1ec>)
 8000340:	f001 fe21 	bl	8001f86 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) {
 8000344:	4877      	ldr	r0, [pc, #476]	; (8000524 <Keypad_getkey+0x1ec>)
 8000346:	f001 fe12 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800034a:	4603      	mov	r3, r0
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b00      	cmp	r3, #0
 8000352:	d00a      	beq.n	800036a <Keypad_getkey+0x32>
		while((MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) );
 8000354:	bf00      	nop
 8000356:	4873      	ldr	r0, [pc, #460]	; (8000524 <Keypad_getkey+0x1ec>)
 8000358:	f001 fe09 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800035c:	4603      	mov	r3, r0
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f7      	bne.n	8000356 <Keypad_getkey+0x1e>
		return '*';
 8000366:	232a      	movs	r3, #42	; 0x2a
 8000368:	e0d9      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) {
 800036a:	486e      	ldr	r0, [pc, #440]	; (8000524 <Keypad_getkey+0x1ec>)
 800036c:	f001 fdff 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000370:	4603      	mov	r3, r0
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00a      	beq.n	8000390 <Keypad_getkey+0x58>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) );
 800037a:	bf00      	nop
 800037c:	4869      	ldr	r0, [pc, #420]	; (8000524 <Keypad_getkey+0x1ec>)
 800037e:	f001 fdf6 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000382:	4603      	mov	r3, r0
 8000384:	f003 0302 	and.w	r3, r3, #2
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f7      	bne.n	800037c <Keypad_getkey+0x44>
		return '7';}
 800038c:	2337      	movs	r3, #55	; 0x37
 800038e:	e0c6      	b.n	800051e <Keypad_getkey+0x1e6>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) {
 8000390:	4864      	ldr	r0, [pc, #400]	; (8000524 <Keypad_getkey+0x1ec>)
 8000392:	f001 fdec 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000396:	4603      	mov	r3, r0
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00a      	beq.n	80003b6 <Keypad_getkey+0x7e>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) );
 80003a0:	bf00      	nop
 80003a2:	4860      	ldr	r0, [pc, #384]	; (8000524 <Keypad_getkey+0x1ec>)
 80003a4:	f001 fde3 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80003a8:	4603      	mov	r3, r0
 80003aa:	f003 0308 	and.w	r3, r3, #8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1f7      	bne.n	80003a2 <Keypad_getkey+0x6a>
		return '4';}
 80003b2:	2334      	movs	r3, #52	; 0x34
 80003b4:	e0b3      	b.n	800051e <Keypad_getkey+0x1e6>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) {
 80003b6:	485b      	ldr	r0, [pc, #364]	; (8000524 <Keypad_getkey+0x1ec>)
 80003b8:	f001 fdd9 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80003bc:	4603      	mov	r3, r0
 80003be:	f003 0310 	and.w	r3, r3, #16
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <Keypad_getkey+0xa4>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) );
 80003c6:	bf00      	nop
 80003c8:	4856      	ldr	r0, [pc, #344]	; (8000524 <Keypad_getkey+0x1ec>)
 80003ca:	f001 fdd0 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80003ce:	4603      	mov	r3, r0
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1f7      	bne.n	80003c8 <Keypad_getkey+0x90>
		return '1';}
 80003d8:	2331      	movs	r3, #49	; 0x31
 80003da:	e0a0      	b.n	800051e <Keypad_getkey+0x1e6>


	MCAL_GPIO_WritePort(GPIOB, 0x0040); // Make Pin B6 High
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4851      	ldr	r0, [pc, #324]	; (8000524 <Keypad_getkey+0x1ec>)
 80003e0:	f001 fdd1 	bl	8001f86 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ){
 80003e4:	484f      	ldr	r0, [pc, #316]	; (8000524 <Keypad_getkey+0x1ec>)
 80003e6:	f001 fdc2 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00a      	beq.n	800040a <Keypad_getkey+0xd2>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) );
 80003f4:	bf00      	nop
 80003f6:	484b      	ldr	r0, [pc, #300]	; (8000524 <Keypad_getkey+0x1ec>)
 80003f8:	f001 fdb9 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80003fc:	4603      	mov	r3, r0
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d1f7      	bne.n	80003f6 <Keypad_getkey+0xbe>
		return '0';
 8000406:	2330      	movs	r3, #48	; 0x30
 8000408:	e089      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) {
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <Keypad_getkey+0x1ec>)
 800040c:	f001 fdaf 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000410:	4603      	mov	r3, r0
 8000412:	f003 0302 	and.w	r3, r3, #2
 8000416:	2b00      	cmp	r3, #0
 8000418:	d00a      	beq.n	8000430 <Keypad_getkey+0xf8>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) );
 800041a:	bf00      	nop
 800041c:	4841      	ldr	r0, [pc, #260]	; (8000524 <Keypad_getkey+0x1ec>)
 800041e:	f001 fda6 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000422:	4603      	mov	r3, r0
 8000424:	f003 0302 	and.w	r3, r3, #2
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1f7      	bne.n	800041c <Keypad_getkey+0xe4>
		return '8';
 800042c:	2338      	movs	r3, #56	; 0x38
 800042e:	e076      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) {
 8000430:	483c      	ldr	r0, [pc, #240]	; (8000524 <Keypad_getkey+0x1ec>)
 8000432:	f001 fd9c 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000436:	4603      	mov	r3, r0
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00a      	beq.n	8000456 <Keypad_getkey+0x11e>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) );
 8000440:	bf00      	nop
 8000442:	4838      	ldr	r0, [pc, #224]	; (8000524 <Keypad_getkey+0x1ec>)
 8000444:	f001 fd93 	bl	8001f6e <MCAL_GPIO_ReadPort>
 8000448:	4603      	mov	r3, r0
 800044a:	f003 0308 	and.w	r3, r3, #8
 800044e:	2b00      	cmp	r3, #0
 8000450:	d1f7      	bne.n	8000442 <Keypad_getkey+0x10a>
		return '5';
 8000452:	2335      	movs	r3, #53	; 0x35
 8000454:	e063      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) {
 8000456:	4833      	ldr	r0, [pc, #204]	; (8000524 <Keypad_getkey+0x1ec>)
 8000458:	f001 fd89 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800045c:	4603      	mov	r3, r0
 800045e:	f003 0310 	and.w	r3, r3, #16
 8000462:	2b00      	cmp	r3, #0
 8000464:	d00a      	beq.n	800047c <Keypad_getkey+0x144>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) );
 8000466:	bf00      	nop
 8000468:	482e      	ldr	r0, [pc, #184]	; (8000524 <Keypad_getkey+0x1ec>)
 800046a:	f001 fd80 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800046e:	4603      	mov	r3, r0
 8000470:	f003 0310 	and.w	r3, r3, #16
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1f7      	bne.n	8000468 <Keypad_getkey+0x130>
		return '2';
 8000478:	2332      	movs	r3, #50	; 0x32
 800047a:	e050      	b.n	800051e <Keypad_getkey+0x1e6>
	}

	MCAL_GPIO_WritePort(GPIOB, 0x0080); // Make Pin B7 High
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	4829      	ldr	r0, [pc, #164]	; (8000524 <Keypad_getkey+0x1ec>)
 8000480:	f001 fd81 	bl	8001f86 <MCAL_GPIO_WritePort>
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) ) {
 8000484:	4827      	ldr	r0, [pc, #156]	; (8000524 <Keypad_getkey+0x1ec>)
 8000486:	f001 fd72 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800048a:	4603      	mov	r3, r0
 800048c:	f003 0301 	and.w	r3, r3, #1
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00a      	beq.n	80004aa <Keypad_getkey+0x172>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<0) );
 8000494:	bf00      	nop
 8000496:	4823      	ldr	r0, [pc, #140]	; (8000524 <Keypad_getkey+0x1ec>)
 8000498:	f001 fd69 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800049c:	4603      	mov	r3, r0
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1f7      	bne.n	8000496 <Keypad_getkey+0x15e>
		return '#';
 80004a6:	2323      	movs	r3, #35	; 0x23
 80004a8:	e039      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) ) {
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <Keypad_getkey+0x1ec>)
 80004ac:	f001 fd5f 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80004b0:	4603      	mov	r3, r0
 80004b2:	f003 0302 	and.w	r3, r3, #2
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00a      	beq.n	80004d0 <Keypad_getkey+0x198>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<1) );
 80004ba:	bf00      	nop
 80004bc:	4819      	ldr	r0, [pc, #100]	; (8000524 <Keypad_getkey+0x1ec>)
 80004be:	f001 fd56 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80004c2:	4603      	mov	r3, r0
 80004c4:	f003 0302 	and.w	r3, r3, #2
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1f7      	bne.n	80004bc <Keypad_getkey+0x184>
		return '9';
 80004cc:	2339      	movs	r3, #57	; 0x39
 80004ce:	e026      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) ) {
 80004d0:	4814      	ldr	r0, [pc, #80]	; (8000524 <Keypad_getkey+0x1ec>)
 80004d2:	f001 fd4c 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80004d6:	4603      	mov	r3, r0
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00a      	beq.n	80004f6 <Keypad_getkey+0x1be>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<3) );
 80004e0:	bf00      	nop
 80004e2:	4810      	ldr	r0, [pc, #64]	; (8000524 <Keypad_getkey+0x1ec>)
 80004e4:	f001 fd43 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f003 0308 	and.w	r3, r3, #8
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1f7      	bne.n	80004e2 <Keypad_getkey+0x1aa>
		return '6';
 80004f2:	2336      	movs	r3, #54	; 0x36
 80004f4:	e013      	b.n	800051e <Keypad_getkey+0x1e6>
	}
	if(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) ) {
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <Keypad_getkey+0x1ec>)
 80004f8:	f001 fd39 	bl	8001f6e <MCAL_GPIO_ReadPort>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	2b00      	cmp	r3, #0
 8000504:	d00a      	beq.n	800051c <Keypad_getkey+0x1e4>
		while(  (MCAL_GPIO_ReadPort(GPIOB)) &(uint16_t)(1<<4) );
 8000506:	bf00      	nop
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <Keypad_getkey+0x1ec>)
 800050a:	f001 fd30 	bl	8001f6e <MCAL_GPIO_ReadPort>
 800050e:	4603      	mov	r3, r0
 8000510:	f003 0310 	and.w	r3, r3, #16
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f7      	bne.n	8000508 <Keypad_getkey+0x1d0>
		return '3';
 8000518:	2333      	movs	r3, #51	; 0x33
 800051a:	e000      	b.n	800051e <Keypad_getkey+0x1e6>
//			}
//		}
//	}
//
//
	return 'N';
 800051c:	234e      	movs	r3, #78	; 0x4e
		}
	}
	return 'A';
#endif

}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010c00 	.word	0x40010c00

08000528 <delay_ms>:
 */

#include "lcd.h"
uint8_t data_size=0;
LCD_Config_t LCD_CONFIG[5];
void delay_ms(uint32_t time) {
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e00b      	b.n	800054e <delay_ms+0x26>
		for (j = 0; j < 255; j++);
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	e002      	b.n	8000542 <delay_ms+0x1a>
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	3301      	adds	r3, #1
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	2bfe      	cmp	r3, #254	; 0xfe
 8000546:	d9f9      	bls.n	800053c <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	429a      	cmp	r2, r3
 8000554:	d3ef      	bcc.n	8000536 <delay_ms+0xe>
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <LCD_INIT>:

void LCD_INIT(uint8_t LCD_INDEX,LCD_Config_t* LCD) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	6039      	str	r1, [r7, #0]
 800056a:	71fb      	strb	r3, [r7, #7]
	uint8_t i=0;
 800056c:	2300      	movs	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]
	if(LCD->LCD_MODE>>4 &0x1){
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	091b      	lsrs	r3, r3, #4
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d010      	beq.n	80005a2 <LCD_INIT+0x42>
		data_size=8;
 8000580:	4b52      	ldr	r3, [pc, #328]	; (80006cc <LCD_INIT+0x16c>)
 8000582:	2208      	movs	r2, #8
 8000584:	701a      	strb	r2, [r3, #0]
		LCD_CONFIG[LCD_INDEX]=*LCD;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a51      	ldr	r2, [pc, #324]	; (80006d0 <LCD_INIT+0x170>)
 800058a:	215c      	movs	r1, #92	; 0x5c
 800058c:	fb01 f303 	mul.w	r3, r1, r3
 8000590:	441a      	add	r2, r3
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	4610      	mov	r0, r2
 8000596:	4619      	mov	r1, r3
 8000598:	235c      	movs	r3, #92	; 0x5c
 800059a:	461a      	mov	r2, r3
 800059c:	f001 fd86 	bl	80020ac <memcpy>
 80005a0:	e00f      	b.n	80005c2 <LCD_INIT+0x62>
	}else{
		data_size=4;
 80005a2:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <LCD_INIT+0x16c>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	701a      	strb	r2, [r3, #0]
		LCD_CONFIG[LCD_INDEX]=*LCD;
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4a49      	ldr	r2, [pc, #292]	; (80006d0 <LCD_INIT+0x170>)
 80005ac:	215c      	movs	r1, #92	; 0x5c
 80005ae:	fb01 f303 	mul.w	r3, r1, r3
 80005b2:	441a      	add	r2, r3
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	4610      	mov	r0, r2
 80005b8:	4619      	mov	r1, r3
 80005ba:	235c      	movs	r3, #92	; 0x5c
 80005bc:	461a      	mov	r2, r3
 80005be:	f001 fd75 	bl	80020ac <memcpy>
	}
	PinCfg.GPIO_Pin_Number = LCD->RS_LCD_PIN.GPIO_PIN;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	7a1a      	ldrb	r2, [r3, #8]
 80005c6:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <LCD_INIT+0x174>)
 80005c8:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <LCD_INIT+0x174>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]

	MCAL_GPIO_Init(LCD->RS_LCD_PIN.GPIO_Port, &PinCfg);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	493f      	ldr	r1, [pc, #252]	; (80006d4 <LCD_INIT+0x174>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fc62 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = LCD->RW_LCD_PIN.GPIO_PIN;
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	7c1a      	ldrb	r2, [r3, #16]
 80005e0:	4b3c      	ldr	r3, [pc, #240]	; (80006d4 <LCD_INIT+0x174>)
 80005e2:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <LCD_INIT+0x174>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]

	MCAL_GPIO_Init(LCD->RW_LCD_PIN.GPIO_Port, &PinCfg);
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	4939      	ldr	r1, [pc, #228]	; (80006d4 <LCD_INIT+0x174>)
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fc55 	bl	8001ea0 <MCAL_GPIO_Init>

	PinCfg.GPIO_Pin_Number = LCD->EN_LCD_PIN.GPIO_PIN;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	7e1a      	ldrb	r2, [r3, #24]
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <LCD_INIT+0x174>)
 80005fc:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <LCD_INIT+0x174>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]

	MCAL_GPIO_Init(LCD->EN_LCD_PIN.GPIO_Port, &PinCfg);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4932      	ldr	r1, [pc, #200]	; (80006d4 <LCD_INIT+0x174>)
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fc48 	bl	8001ea0 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	for(i=0;i<data_size;i++){
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e017      	b.n	8000646 <LCD_INIT+0xe6>
		PinCfg.GPIO_Pin_Number = LCD->D_LCD_PIN[i].GPIO_PIN;
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	3303      	adds	r3, #3
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	4413      	add	r3, r2
 8000620:	7a1a      	ldrb	r2, [r3, #8]
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <LCD_INIT+0x174>)
 8000624:	705a      	strb	r2, [r3, #1]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <LCD_INIT+0x174>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]

		MCAL_GPIO_Init(LCD->D_LCD_PIN[i].GPIO_Port, &PinCfg);
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	3303      	adds	r3, #3
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	4413      	add	r3, r2
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4926      	ldr	r1, [pc, #152]	; (80006d4 <LCD_INIT+0x174>)
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fc30 	bl	8001ea0 <MCAL_GPIO_Init>
	for(i=0;i<data_size;i++){
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3301      	adds	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <LCD_INIT+0x16c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3e2      	bcc.n	8000616 <LCD_INIT+0xb6>

	}


	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD->RS_LCD_PIN.GPIO_Port, LCD->RS_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6858      	ldr	r0, [r3, #4]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	7a1b      	ldrb	r3, [r3, #8]
 8000658:	2200      	movs	r2, #0
 800065a:	4619      	mov	r1, r3
 800065c:	f001 fca1 	bl	8001fa2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD->RW_LCD_PIN.GPIO_Port, LCD->RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	68d8      	ldr	r0, [r3, #12]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	7c1b      	ldrb	r3, [r3, #16]
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	f001 fc99 	bl	8001fa2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD->EN_LCD_PIN.GPIO_Port, LCD->EN_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	6958      	ldr	r0, [r3, #20]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	7e1b      	ldrb	r3, [r3, #24]
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	f001 fc91 	bl	8001fa2 <MCAL_GPIO_WritePin>
	delay_ms(15);
 8000680:	200f      	movs	r0, #15
 8000682:	f7ff ff51 	bl	8000528 <delay_ms>

	LCD_clear_screen(LCD_INDEX);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f825 	bl	80006d8 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_INDEX,LCD_RETURN_HOME);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f88e 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_INDEX,LCD->LCD_MODE);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f887 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_INDEX,LCD_ENTRY_MODE);
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2106      	movs	r1, #6
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f882 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_INDEX,LCD_BEGIN_AT_FIRST_ROW);
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f87d 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_INDEX,LCD_DISP_ON_CURSOR_BLINK);
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	210f      	movs	r1, #15
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f878 	bl	80007b4 <LCD_WRITE_COMMAND>

}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000020 	.word	0x20000020
 80006d0:	20000034 	.word	0x20000034
 80006d4:	20000200 	.word	0x20000200

080006d8 <LCD_clear_screen>:

void LCD_clear_screen(uint8_t LCD_INDEX) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	LCD_WRITE_COMMAND(LCD_INDEX,LCD_CLEAR_SCREEN);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2101      	movs	r1, #1
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f864 	bl	80007b4 <LCD_WRITE_COMMAND>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LCD_lcd_kick>:

void LCD_lcd_kick(uint8_t LCD_INDEX) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].EN_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].EN_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a16      	ldr	r2, [pc, #88]	; (800075c <LCD_lcd_kick+0x68>)
 8000702:	215c      	movs	r1, #92	; 0x5c
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4413      	add	r3, r2
 800070a:	3314      	adds	r3, #20
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <LCD_lcd_kick+0x68>)
 8000712:	215c      	movs	r1, #92	; 0x5c
 8000714:	fb01 f303 	mul.w	r3, r1, r3
 8000718:	4413      	add	r3, r2
 800071a:	3318      	adds	r3, #24
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	f001 fc3e 	bl	8001fa2 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000726:	2032      	movs	r0, #50	; 0x32
 8000728:	f7ff fefe 	bl	8000528 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].EN_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].EN_LCD_PIN.GPIO_PIN, GPIO_PIN_SET);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4a0b      	ldr	r2, [pc, #44]	; (800075c <LCD_lcd_kick+0x68>)
 8000730:	215c      	movs	r1, #92	; 0x5c
 8000732:	fb01 f303 	mul.w	r3, r1, r3
 8000736:	4413      	add	r3, r2
 8000738:	3314      	adds	r3, #20
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <LCD_lcd_kick+0x68>)
 8000740:	215c      	movs	r1, #92	; 0x5c
 8000742:	fb01 f303 	mul.w	r3, r1, r3
 8000746:	4413      	add	r3, r2
 8000748:	3318      	adds	r3, #24
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2201      	movs	r2, #1
 800074e:	4619      	mov	r1, r3
 8000750:	f001 fc27 	bl	8001fa2 <MCAL_GPIO_WritePin>
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000034 	.word	0x20000034

08000760 <LCD_GOTO_XY>:

void LCD_GOTO_XY(uint8_t LCD_INDEX,unsigned char line, unsigned char position) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	460b      	mov	r3, r1
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	717b      	strb	r3, [r7, #5]
	if (line == 1) {
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d10a      	bne.n	800078e <LCD_GOTO_XY+0x2e>
		if (position < 16 && position >= 0) {
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	2b0f      	cmp	r3, #15
 800077c:	d807      	bhi.n	800078e <LCD_GOTO_XY+0x2e>
			LCD_WRITE_COMMAND(LCD_INDEX,LCD_BEGIN_AT_FIRST_ROW + position);
 800077e:	797b      	ldrb	r3, [r7, #5]
 8000780:	3b80      	subs	r3, #128	; 0x80
 8000782:	b2da      	uxtb	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 f813 	bl	80007b4 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2b02      	cmp	r3, #2
 8000792:	d10a      	bne.n	80007aa <LCD_GOTO_XY+0x4a>
		if (position < 16 && position >= 0) {
 8000794:	797b      	ldrb	r3, [r7, #5]
 8000796:	2b0f      	cmp	r3, #15
 8000798:	d807      	bhi.n	80007aa <LCD_GOTO_XY+0x4a>
			LCD_WRITE_COMMAND(LCD_INDEX,LCD_BEGIN_AT_SECOND_ROW + position);
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	3b40      	subs	r3, #64	; 0x40
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f805 	bl	80007b4 <LCD_WRITE_COMMAND>
		}
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(uint8_t LCD_INDEX,unsigned char command) {
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	460a      	mov	r2, r1
 80007be:	71fb      	strb	r3, [r7, #7]
 80007c0:	4613      	mov	r3, r2
 80007c2:	71bb      	strb	r3, [r7, #6]
//	LCD_check_lcd_isbusy(LCD_INDEX);
	uint8_t i;
//	MCAL_GPIO_WritePort(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, command);
	if (data_size==8){
 80007c4:	4b91      	ldr	r3, [pc, #580]	; (8000a0c <LCD_WRITE_COMMAND+0x258>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d15e      	bne.n	800088a <LCD_WRITE_COMMAND+0xd6>
		for(i=0;i<data_size;i++){
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
 80007d0:	e026      	b.n	8000820 <LCD_WRITE_COMMAND+0x6c>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, command>>i & 0x1);
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	7bfa      	ldrb	r2, [r7, #15]
 80007d6:	498e      	ldr	r1, [pc, #568]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80007d8:	3203      	adds	r2, #3
 80007da:	00d2      	lsls	r2, r2, #3
 80007dc:	205c      	movs	r0, #92	; 0x5c
 80007de:	fb00 f303 	mul.w	r3, r0, r3
 80007e2:	4413      	add	r3, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	3304      	adds	r3, #4
 80007e8:	681c      	ldr	r4, [r3, #0]
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	4988      	ldr	r1, [pc, #544]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80007f0:	3203      	adds	r2, #3
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	205c      	movs	r0, #92	; 0x5c
 80007f6:	fb00 f303 	mul.w	r3, r0, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	3308      	adds	r3, #8
 8000800:	7819      	ldrb	r1, [r3, #0]
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	fa42 f303 	asr.w	r3, r2, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4620      	mov	r0, r4
 8000816:	f001 fbc4 	bl	8001fa2 <MCAL_GPIO_WritePin>
		for(i=0;i<data_size;i++){
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	3301      	adds	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	4b7a      	ldr	r3, [pc, #488]	; (8000a0c <LCD_WRITE_COMMAND+0x258>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d3d3      	bcc.n	80007d2 <LCD_WRITE_COMMAND+0x1e>
		}
		MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a78      	ldr	r2, [pc, #480]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 800082e:	215c      	movs	r1, #92	; 0x5c
 8000830:	fb01 f303 	mul.w	r3, r1, r3
 8000834:	4413      	add	r3, r2
 8000836:	330c      	adds	r3, #12
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 800083e:	215c      	movs	r1, #92	; 0x5c
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	4413      	add	r3, r2
 8000846:	3310      	adds	r3, #16
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	f001 fba8 	bl	8001fa2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a6e      	ldr	r2, [pc, #440]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000856:	215c      	movs	r1, #92	; 0x5c
 8000858:	fb01 f303 	mul.w	r3, r1, r3
 800085c:	4413      	add	r3, r2
 800085e:	3304      	adds	r3, #4
 8000860:	6818      	ldr	r0, [r3, #0]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4a6a      	ldr	r2, [pc, #424]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000866:	215c      	movs	r1, #92	; 0x5c
 8000868:	fb01 f303 	mul.w	r3, r1, r3
 800086c:	4413      	add	r3, r2
 800086e:	3308      	adds	r3, #8
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	f001 fb94 	bl	8001fa2 <MCAL_GPIO_WritePin>
		delay_ms(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff fe54 	bl	8000528 <delay_ms>
		LCD_lcd_kick(LCD_INDEX);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff36 	bl	80006f4 <LCD_lcd_kick>
			delay_ms(1);
			LCD_lcd_kick(LCD_INDEX);


	}
}
 8000888:	e0bc      	b.n	8000a04 <LCD_WRITE_COMMAND+0x250>
		for(i=0;i<data_size;i++){
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e027      	b.n	80008e0 <LCD_WRITE_COMMAND+0x12c>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, command>>(i+4)& 0x1);	}
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	495e      	ldr	r1, [pc, #376]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000896:	3203      	adds	r2, #3
 8000898:	00d2      	lsls	r2, r2, #3
 800089a:	205c      	movs	r0, #92	; 0x5c
 800089c:	fb00 f303 	mul.w	r3, r0, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	3304      	adds	r3, #4
 80008a6:	681c      	ldr	r4, [r3, #0]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	4958      	ldr	r1, [pc, #352]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80008ae:	3203      	adds	r2, #3
 80008b0:	00d2      	lsls	r2, r2, #3
 80008b2:	205c      	movs	r0, #92	; 0x5c
 80008b4:	fb00 f303 	mul.w	r3, r0, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	3308      	adds	r3, #8
 80008be:	7819      	ldrb	r1, [r3, #0]
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3304      	adds	r3, #4
 80008c6:	fa42 f303 	asr.w	r3, r2, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	4620      	mov	r0, r4
 80008d6:	f001 fb64 	bl	8001fa2 <MCAL_GPIO_WritePin>
		for(i=0;i<data_size;i++){
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	3301      	adds	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	4b4a      	ldr	r3, [pc, #296]	; (8000a0c <LCD_WRITE_COMMAND+0x258>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d3d2      	bcc.n	8000890 <LCD_WRITE_COMMAND+0xdc>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a48      	ldr	r2, [pc, #288]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80008ee:	215c      	movs	r1, #92	; 0x5c
 80008f0:	fb01 f303 	mul.w	r3, r1, r3
 80008f4:	4413      	add	r3, r2
 80008f6:	330c      	adds	r3, #12
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80008fe:	215c      	movs	r1, #92	; 0x5c
 8000900:	fb01 f303 	mul.w	r3, r1, r3
 8000904:	4413      	add	r3, r2
 8000906:	3310      	adds	r3, #16
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	f001 fb48 	bl	8001fa2 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000916:	215c      	movs	r1, #92	; 0x5c
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	4413      	add	r3, r2
 800091e:	3304      	adds	r3, #4
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	4a3a      	ldr	r2, [pc, #232]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000926:	215c      	movs	r1, #92	; 0x5c
 8000928:	fb01 f303 	mul.w	r3, r1, r3
 800092c:	4413      	add	r3, r2
 800092e:	3308      	adds	r3, #8
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	f001 fb34 	bl	8001fa2 <MCAL_GPIO_WritePin>
			delay_ms(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fdf4 	bl	8000528 <delay_ms>
			LCD_lcd_kick(LCD_INDEX);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fed6 	bl	80006f4 <LCD_lcd_kick>
			for(i=0;i<data_size;i++){
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e026      	b.n	800099c <LCD_WRITE_COMMAND+0x1e8>
				MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, command>>i & 0x1);
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	492f      	ldr	r1, [pc, #188]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 8000954:	3203      	adds	r2, #3
 8000956:	00d2      	lsls	r2, r2, #3
 8000958:	205c      	movs	r0, #92	; 0x5c
 800095a:	fb00 f303 	mul.w	r3, r0, r3
 800095e:	4413      	add	r3, r2
 8000960:	440b      	add	r3, r1
 8000962:	3304      	adds	r3, #4
 8000964:	681c      	ldr	r4, [r3, #0]
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	4929      	ldr	r1, [pc, #164]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 800096c:	3203      	adds	r2, #3
 800096e:	00d2      	lsls	r2, r2, #3
 8000970:	205c      	movs	r0, #92	; 0x5c
 8000972:	fb00 f303 	mul.w	r3, r0, r3
 8000976:	4413      	add	r3, r2
 8000978:	440b      	add	r3, r1
 800097a:	3308      	adds	r3, #8
 800097c:	7819      	ldrb	r1, [r3, #0]
 800097e:	79ba      	ldrb	r2, [r7, #6]
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	fa42 f303 	asr.w	r3, r2, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	4620      	mov	r0, r4
 8000992:	f001 fb06 	bl	8001fa2 <MCAL_GPIO_WritePin>
			for(i=0;i<data_size;i++){
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	3301      	adds	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <LCD_WRITE_COMMAND+0x258>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	7bfa      	ldrb	r2, [r7, #15]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d3d3      	bcc.n	800094e <LCD_WRITE_COMMAND+0x19a>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80009aa:	215c      	movs	r1, #92	; 0x5c
 80009ac:	fb01 f303 	mul.w	r3, r1, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	330c      	adds	r3, #12
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80009ba:	215c      	movs	r1, #92	; 0x5c
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	4413      	add	r3, r2
 80009c2:	3310      	adds	r3, #16
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	f001 faea 	bl	8001fa2 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80009d2:	215c      	movs	r1, #92	; 0x5c
 80009d4:	fb01 f303 	mul.w	r3, r1, r3
 80009d8:	4413      	add	r3, r2
 80009da:	3304      	adds	r3, #4
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <LCD_WRITE_COMMAND+0x25c>)
 80009e2:	215c      	movs	r1, #92	; 0x5c
 80009e4:	fb01 f303 	mul.w	r3, r1, r3
 80009e8:	4413      	add	r3, r2
 80009ea:	3308      	adds	r3, #8
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	f001 fad6 	bl	8001fa2 <MCAL_GPIO_WritePin>
			delay_ms(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fd96 	bl	8000528 <delay_ms>
			LCD_lcd_kick(LCD_INDEX);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe78 	bl	80006f4 <LCD_lcd_kick>
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	20000020 	.word	0x20000020
 8000a10:	20000034 	.word	0x20000034

08000a14 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(uint8_t LCD_INDEX,unsigned char character) {
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	460a      	mov	r2, r1
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
//	LCD_check_lcd_isbusy(LCD_INDEX);
	uint8_t i;
	if (data_size==8){
 8000a24:	4b91      	ldr	r3, [pc, #580]	; (8000c6c <LCD_WRITE_CHAR+0x258>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	d15e      	bne.n	8000aea <LCD_WRITE_CHAR+0xd6>
		for(i=0;i<data_size;i++){
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e026      	b.n	8000a80 <LCD_WRITE_CHAR+0x6c>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, character>>i & 0x1);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	7bfa      	ldrb	r2, [r7, #15]
 8000a36:	498e      	ldr	r1, [pc, #568]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000a38:	3203      	adds	r2, #3
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	205c      	movs	r0, #92	; 0x5c
 8000a3e:	fb00 f303 	mul.w	r3, r0, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	3304      	adds	r3, #4
 8000a48:	681c      	ldr	r4, [r3, #0]
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	7bfa      	ldrb	r2, [r7, #15]
 8000a4e:	4988      	ldr	r1, [pc, #544]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000a50:	3203      	adds	r2, #3
 8000a52:	00d2      	lsls	r2, r2, #3
 8000a54:	205c      	movs	r0, #92	; 0x5c
 8000a56:	fb00 f303 	mul.w	r3, r0, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3308      	adds	r3, #8
 8000a60:	7819      	ldrb	r1, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	fa42 f303 	asr.w	r3, r2, r3
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	461a      	mov	r2, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f001 fa94 	bl	8001fa2 <MCAL_GPIO_WritePin>
		for(i=0;i<data_size;i++){
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	4b7a      	ldr	r3, [pc, #488]	; (8000c6c <LCD_WRITE_CHAR+0x258>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	7bfa      	ldrb	r2, [r7, #15]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d3d3      	bcc.n	8000a32 <LCD_WRITE_CHAR+0x1e>
		}
		MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a78      	ldr	r2, [pc, #480]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000a8e:	215c      	movs	r1, #92	; 0x5c
 8000a90:	fb01 f303 	mul.w	r3, r1, r3
 8000a94:	4413      	add	r3, r2
 8000a96:	330c      	adds	r3, #12
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a74      	ldr	r2, [pc, #464]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000a9e:	215c      	movs	r1, #92	; 0x5c
 8000aa0:	fb01 f303 	mul.w	r3, r1, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	3310      	adds	r3, #16
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	f001 fa78 	bl	8001fa2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_SET);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	4a6e      	ldr	r2, [pc, #440]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000ab6:	215c      	movs	r1, #92	; 0x5c
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	3304      	adds	r3, #4
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a6a      	ldr	r2, [pc, #424]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000ac6:	215c      	movs	r1, #92	; 0x5c
 8000ac8:	fb01 f303 	mul.w	r3, r1, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	3308      	adds	r3, #8
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f001 fa64 	bl	8001fa2 <MCAL_GPIO_WritePin>
		delay_ms(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff fd24 	bl	8000528 <delay_ms>
		LCD_lcd_kick(LCD_INDEX);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe06 	bl	80006f4 <LCD_lcd_kick>
			LCD_lcd_kick(LCD_INDEX);


	}

}
 8000ae8:	e0bc      	b.n	8000c64 <LCD_WRITE_CHAR+0x250>
		for(i=0;i<data_size;i++){
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e027      	b.n	8000b40 <LCD_WRITE_CHAR+0x12c>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, character>>(i+4)& 0x1);	}
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7bfa      	ldrb	r2, [r7, #15]
 8000af4:	495e      	ldr	r1, [pc, #376]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000af6:	3203      	adds	r2, #3
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	205c      	movs	r0, #92	; 0x5c
 8000afc:	fb00 f303 	mul.w	r3, r0, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	3304      	adds	r3, #4
 8000b06:	681c      	ldr	r4, [r3, #0]
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	7bfa      	ldrb	r2, [r7, #15]
 8000b0c:	4958      	ldr	r1, [pc, #352]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000b0e:	3203      	adds	r2, #3
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	205c      	movs	r0, #92	; 0x5c
 8000b14:	fb00 f303 	mul.w	r3, r0, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	7819      	ldrb	r1, [r3, #0]
 8000b20:	79ba      	ldrb	r2, [r7, #6]
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	3304      	adds	r3, #4
 8000b26:	fa42 f303 	asr.w	r3, r2, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	461a      	mov	r2, r3
 8000b34:	4620      	mov	r0, r4
 8000b36:	f001 fa34 	bl	8001fa2 <MCAL_GPIO_WritePin>
		for(i=0;i<data_size;i++){
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <LCD_WRITE_CHAR+0x258>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	7bfa      	ldrb	r2, [r7, #15]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d3d2      	bcc.n	8000af0 <LCD_WRITE_CHAR+0xdc>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000b4e:	215c      	movs	r1, #92	; 0x5c
 8000b50:	fb01 f303 	mul.w	r3, r1, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	330c      	adds	r3, #12
 8000b58:	6818      	ldr	r0, [r3, #0]
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	4a44      	ldr	r2, [pc, #272]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000b5e:	215c      	movs	r1, #92	; 0x5c
 8000b60:	fb01 f303 	mul.w	r3, r1, r3
 8000b64:	4413      	add	r3, r2
 8000b66:	3310      	adds	r3, #16
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f001 fa18 	bl	8001fa2 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_SET);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a3e      	ldr	r2, [pc, #248]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000b76:	215c      	movs	r1, #92	; 0x5c
 8000b78:	fb01 f303 	mul.w	r3, r1, r3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3304      	adds	r3, #4
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4a3a      	ldr	r2, [pc, #232]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000b86:	215c      	movs	r1, #92	; 0x5c
 8000b88:	fb01 f303 	mul.w	r3, r1, r3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3308      	adds	r3, #8
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4619      	mov	r1, r3
 8000b96:	f001 fa04 	bl	8001fa2 <MCAL_GPIO_WritePin>
			delay_ms(1);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fcc4 	bl	8000528 <delay_ms>
			LCD_lcd_kick(LCD_INDEX);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fda6 	bl	80006f4 <LCD_lcd_kick>
			for(i=0;i<data_size;i++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e026      	b.n	8000bfc <LCD_WRITE_CHAR+0x1e8>
				MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_Port, LCD_CONFIG[LCD_INDEX].D_LCD_PIN[i].GPIO_PIN, character>>i & 0x1);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	492f      	ldr	r1, [pc, #188]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000bb4:	3203      	adds	r2, #3
 8000bb6:	00d2      	lsls	r2, r2, #3
 8000bb8:	205c      	movs	r0, #92	; 0x5c
 8000bba:	fb00 f303 	mul.w	r3, r0, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681c      	ldr	r4, [r3, #0]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	4929      	ldr	r1, [pc, #164]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000bcc:	3203      	adds	r2, #3
 8000bce:	00d2      	lsls	r2, r2, #3
 8000bd0:	205c      	movs	r0, #92	; 0x5c
 8000bd2:	fb00 f303 	mul.w	r3, r0, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	3308      	adds	r3, #8
 8000bdc:	7819      	ldrb	r1, [r3, #0]
 8000bde:	79ba      	ldrb	r2, [r7, #6]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	fa42 f303 	asr.w	r3, r2, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f001 f9d6 	bl	8001fa2 <MCAL_GPIO_WritePin>
			for(i=0;i<data_size;i++){
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <LCD_WRITE_CHAR+0x258>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	7bfa      	ldrb	r2, [r7, #15]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3d3      	bcc.n	8000bae <LCD_WRITE_CHAR+0x19a>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RW_LCD_PIN.GPIO_PIN, GPIO_PIN_RESET);
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000c0a:	215c      	movs	r1, #92	; 0x5c
 8000c0c:	fb01 f303 	mul.w	r3, r1, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	330c      	adds	r3, #12
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000c1a:	215c      	movs	r1, #92	; 0x5c
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	3310      	adds	r3, #16
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2200      	movs	r2, #0
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f001 f9ba 	bl	8001fa2 <MCAL_GPIO_WritePin>
			MCAL_GPIO_WritePin(LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_Port, LCD_CONFIG[LCD_INDEX].RS_LCD_PIN.GPIO_PIN, GPIO_PIN_SET);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000c32:	215c      	movs	r1, #92	; 0x5c
 8000c34:	fb01 f303 	mul.w	r3, r1, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LCD_WRITE_CHAR+0x25c>)
 8000c42:	215c      	movs	r1, #92	; 0x5c
 8000c44:	fb01 f303 	mul.w	r3, r1, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	f001 f9a6 	bl	8001fa2 <MCAL_GPIO_WritePin>
			delay_ms(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fc66 	bl	8000528 <delay_ms>
			LCD_lcd_kick(LCD_INDEX);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fd48 	bl	80006f4 <LCD_lcd_kick>
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	20000020 	.word	0x20000020
 8000c70:	20000034 	.word	0x20000034

08000c74 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(uint8_t LCD_INDEX,char *string) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
	int count = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000c84:	e024      	b.n	8000cd0 <LCD_WRITE_STRING+0x5c>
		count++;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(LCD_INDEX,*string++);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	1c5a      	adds	r2, r3, #1
 8000c90:	603a      	str	r2, [r7, #0]
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff febb 	bl	8000a14 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2b10      	cmp	r3, #16
 8000ca2:	d106      	bne.n	8000cb2 <LCD_WRITE_STRING+0x3e>
			LCD_GOTO_XY(LCD_INDEX,2, 0);
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fd58 	bl	8000760 <LCD_GOTO_XY>
 8000cb0:	e00e      	b.n	8000cd0 <LCD_WRITE_STRING+0x5c>
		} else if (count == 32) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	d10b      	bne.n	8000cd0 <LCD_WRITE_STRING+0x5c>
			LCD_clear_screen(LCD_INDEX);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd0c 	bl	80006d8 <LCD_clear_screen>
			LCD_GOTO_XY(LCD_INDEX,1, 0);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fd4a 	bl	8000760 <LCD_GOTO_XY>
			count = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1d6      	bne.n	8000c86 <LCD_WRITE_STRING+0x12>
		}
	}
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Gates_Idle>:

uint16_t RFID_CARD_Enter;
uint16_t RFID_CARD_EXIT;
void (* Gate_Status)();

void Gates_Idle(void){
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	Gate_Status=Gates_Idle;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <Gates_Idle+0x14>)
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <Gates_Idle+0x18>)
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000204 	.word	0x20000204
 8000cf8:	08000ce1 	.word	0x08000ce1

08000cfc <Gate1_Letting>:
void Gate1_Letting(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	Servo1_Entry_Gate(UP);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f7ff fa47 	bl	8000194 <Servo1_Entry_Gate>
	delay_mss(2000);
 8000d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d0a:	f7ff fab1 	bl	8000270 <delay_mss>
	while(MCAL_GPIO_ReadPIN(GPIOA, GPIO_Pin_7));
 8000d0e:	bf00      	nop
 8000d10:	2107      	movs	r1, #7
 8000d12:	480a      	ldr	r0, [pc, #40]	; (8000d3c <Gate1_Letting+0x40>)
 8000d14:	f001 f916 	bl	8001f44 <MCAL_GPIO_ReadPIN>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f8      	bne.n	8000d10 <Gate1_Letting+0x14>
	Servo1_Entry_Gate(Down);
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fa38 	bl	8000194 <Servo1_Entry_Gate>
	LED_Status=LED_Green_Off;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <Gate1_Letting+0x44>)
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <Gate1_Letting+0x48>)
 8000d28:	601a      	str	r2, [r3, #0]
	LCD1_Status=LCD_Display_Empty_Slots;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <Gate1_Letting+0x4c>)
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <Gate1_Letting+0x50>)
 8000d2e:	601a      	str	r2, [r3, #0]
	Gate_Status=Gates_Idle;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <Gate1_Letting+0x54>)
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <Gate1_Letting+0x58>)
 8000d34:	601a      	str	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	200002c8 	.word	0x200002c8
 8000d44:	08001175 	.word	0x08001175
 8000d48:	2000020c 	.word	0x2000020c
 8000d4c:	08000f2d 	.word	0x08000f2d
 8000d50:	20000204 	.word	0x20000204
 8000d54:	08000ce1 	.word	0x08000ce1

08000d58 <Gate2_Letting>:
void Gate2_Letting(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	Servo2_Exit_Gate(UP);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff fa59 	bl	8000214 <Servo2_Exit_Gate>
	delay_mss(2000);
 8000d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d66:	f7ff fa83 	bl	8000270 <delay_mss>
	while(MCAL_GPIO_ReadPIN(GPIOA, GPIO_Pin_1));
 8000d6a:	bf00      	nop
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	480a      	ldr	r0, [pc, #40]	; (8000d98 <Gate2_Letting+0x40>)
 8000d70:	f001 f8e8 	bl	8001f44 <MCAL_GPIO_ReadPIN>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f8      	bne.n	8000d6c <Gate2_Letting+0x14>
	Servo2_Exit_Gate(Down);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff fa4a 	bl	8000214 <Servo2_Exit_Gate>
	LED_Status=LED_Green_Off;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <Gate2_Letting+0x44>)
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <Gate2_Letting+0x48>)
 8000d84:	601a      	str	r2, [r3, #0]
	LCD1_Status=LCD_Display_Empty_Slots;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <Gate2_Letting+0x4c>)
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <Gate2_Letting+0x50>)
 8000d8a:	601a      	str	r2, [r3, #0]
	Gate_Status=Gates_Idle;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <Gate2_Letting+0x54>)
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <Gate2_Letting+0x58>)
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	200002c8 	.word	0x200002c8
 8000da0:	08001175 	.word	0x08001175
 8000da4:	2000020c 	.word	0x2000020c
 8000da8:	08000f2d 	.word	0x08000f2d
 8000dac:	20000204 	.word	0x20000204
 8000db0:	08000ce1 	.word	0x08000ce1

08000db4 <RFIDs_Init>:
void RFIDs_Init(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
	//==========================UART1 INIT=============================
		UART_Config_t UART1_C;
		UART1_C.BaudRate=USART_BaudRate_115200;
 8000dba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000dbe:	61bb      	str	r3, [r7, #24]
		UART1_C.HWFlowCtl=USART_HwFlowCtl_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	77fb      	strb	r3, [r7, #31]
		UART1_C.Parity=USART_Parity_None;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	777b      	strb	r3, [r7, #29]
		UART1_C.StopBits=USART_StopBits_1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	77bb      	strb	r3, [r7, #30]
		UART1_C.Payload_Length=USART_Payload_Length8;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	773b      	strb	r3, [r7, #28]
		UART1_C.USART_Mode=USART_MODE_TX_RX;
 8000dd0:	230c      	movs	r3, #12
 8000dd2:	753b      	strb	r3, [r7, #20]
		UART1_C.P_IRQ_CallBack=RFID_CARD_Enter_CallBack;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <RFIDs_Init+0x78>)
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
		UART1_C.IRQ_Enable=USART_IRQ_Enable_RXIEN;
 8000dd8:	2320      	movs	r3, #32
 8000dda:	f887 3020 	strb.w	r3, [r7, #32]

		MCAL_USART_Init(&UART1_C, USART1);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4913      	ldr	r1, [pc, #76]	; (8000e30 <RFIDs_Init+0x7c>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 fe65 	bl	8001ab4 <MCAL_USART_Init>
		MCAL_USART_SetPins(USART1);
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <RFIDs_Init+0x7c>)
 8000dec:	f000 ff4c 	bl	8001c88 <MCAL_USART_SetPins>
		 * PA11 CTC
		 * PA12 RTS
		 */
		//==========================UART2 INIT=============================
		UART_Config_t UART2_C;
		UART2_C.BaudRate=USART_BaudRate_115200;
 8000df0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000df4:	607b      	str	r3, [r7, #4]
		UART2_C.HWFlowCtl=USART_HwFlowCtl_NONE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	72fb      	strb	r3, [r7, #11]
		UART2_C.Parity=USART_Parity_None;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	727b      	strb	r3, [r7, #9]
		UART2_C.StopBits=USART_StopBits_1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	72bb      	strb	r3, [r7, #10]
		UART2_C.Payload_Length=USART_Payload_Length8;
 8000e02:	2300      	movs	r3, #0
 8000e04:	723b      	strb	r3, [r7, #8]
		UART2_C.USART_Mode=USART_MODE_TX_RX;
 8000e06:	230c      	movs	r3, #12
 8000e08:	703b      	strb	r3, [r7, #0]
		UART2_C.P_IRQ_CallBack=RFID_CARD_EXIT_CallBack;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <RFIDs_Init+0x80>)
 8000e0c:	613b      	str	r3, [r7, #16]
		UART2_C.IRQ_Enable=USART_IRQ_Enable_RXIEN;
 8000e0e:	2320      	movs	r3, #32
 8000e10:	733b      	strb	r3, [r7, #12]
		MCAL_USART_Init(&UART2_C, USART2);
 8000e12:	463b      	mov	r3, r7
 8000e14:	4908      	ldr	r1, [pc, #32]	; (8000e38 <RFIDs_Init+0x84>)
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 fe4c 	bl	8001ab4 <MCAL_USART_Init>
		MCAL_USART_SetPins(USART2);
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <RFIDs_Init+0x84>)
 8000e1e:	f000 ff33 	bl	8001c88 <MCAL_USART_SetPins>
}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	40013800 	.word	0x40013800
 8000e34:	08000e71 	.word	0x08000e71
 8000e38:	40004400 	.word	0x40004400

08000e3c <RFID_CARD_Enter_CallBack>:

/*Call Back For UART*/
void RFID_CARD_Enter_CallBack(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	MCAL_USART_Recieve(USART1, &RFID_CARD_Enter, Enable);
 8000e40:	2200      	movs	r2, #0
 8000e42:	4907      	ldr	r1, [pc, #28]	; (8000e60 <RFID_CARD_Enter_CallBack+0x24>)
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <RFID_CARD_Enter_CallBack+0x28>)
 8000e46:	f000 ffbf 	bl	8001dc8 <MCAL_USART_Recieve>
	MCAL_USART_Send(USART1, &RFID_CARD_Enter, Enable);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4904      	ldr	r1, [pc, #16]	; (8000e60 <RFID_CARD_Enter_CallBack+0x24>)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <RFID_CARD_Enter_CallBack+0x28>)
 8000e50:	f000 ff7c 	bl	8001d4c <MCAL_USART_Send>
	Park_Status=Park_Process_EntryGate;
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <RFID_CARD_Enter_CallBack+0x2c>)
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <RFID_CARD_Enter_CallBack+0x30>)
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000208 	.word	0x20000208
 8000e64:	40013800 	.word	0x40013800
 8000e68:	200002cc 	.word	0x200002cc
 8000e6c:	0800122d 	.word	0x0800122d

08000e70 <RFID_CARD_EXIT_CallBack>:

void RFID_CARD_EXIT_CallBack(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	MCAL_USART_Recieve(USART2, &RFID_CARD_EXIT, Enable);
 8000e74:	2200      	movs	r2, #0
 8000e76:	4907      	ldr	r1, [pc, #28]	; (8000e94 <RFID_CARD_EXIT_CallBack+0x24>)
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <RFID_CARD_EXIT_CallBack+0x28>)
 8000e7a:	f000 ffa5 	bl	8001dc8 <MCAL_USART_Recieve>
	MCAL_USART_Send(USART2, &RFID_CARD_EXIT, Enable);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4904      	ldr	r1, [pc, #16]	; (8000e94 <RFID_CARD_EXIT_CallBack+0x24>)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <RFID_CARD_EXIT_CallBack+0x28>)
 8000e84:	f000 ff62 	bl	8001d4c <MCAL_USART_Send>
	Park_Status=Park_Process_ExitGate;
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <RFID_CARD_EXIT_CallBack+0x2c>)
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <RFID_CARD_EXIT_CallBack+0x30>)
 8000e8c:	601a      	str	r2, [r3, #0]
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000020a 	.word	0x2000020a
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	200002cc 	.word	0x200002cc
 8000ea0:	080012fd 	.word	0x080012fd

08000ea4 <PIRs_Iint>:



void PIRs_Iint(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	//PIR1 A7
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <PIRs_Iint+0x48>)
 8000eb8:	f000 fff2 	bl	8001ea0 <MCAL_GPIO_Init>

	//PIR2 A1
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_INPUT_PU;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <PIRs_Iint+0x48>)
 8000eca:	f000 ffe9 	bl	8001ea0 <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_0, 1); //make A0 ground
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <PIRs_Iint+0x48>)
 8000ed4:	f001 f865 	bl	8001fa2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_11, 1); //make A11 ground
 8000ed8:	2201      	movs	r2, #1
 8000eda:	210b      	movs	r1, #11
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <PIRs_Iint+0x48>)
 8000ede:	f001 f860 	bl	8001fa2 <MCAL_GPIO_WritePin>

}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010800 	.word	0x40010800

08000ef0 <LCD_Welcome>:
LCD_Config_t LCD0;
LCD_Config_t LCD1;

void (* LCD1_Status)();
void LCD_Welcome(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_DISP_ON);
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff fc5c 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_CLEAR_SCREEN);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fc58 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD1_INDEX, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fc29 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD1_INDEX,"Welcome in Smart Parking");
 8000f0e:	4904      	ldr	r1, [pc, #16]	; (8000f20 <LCD_Welcome+0x30>)
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff feaf 	bl	8000c74 <LCD_WRITE_STRING>
	LCD1_Status=LCD_Idle;
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <LCD_Welcome+0x34>)
 8000f18:	4a03      	ldr	r2, [pc, #12]	; (8000f28 <LCD_Welcome+0x38>)
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	080020dc 	.word	0x080020dc
 8000f24:	2000020c 	.word	0x2000020c
 8000f28:	08000fe9 	.word	0x08000fe9

08000f2c <LCD_Display_Empty_Slots>:

void LCD_Display_Empty_Slots(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_DISP_ON);
 8000f30:	210c      	movs	r1, #12
 8000f32:	2001      	movs	r0, #1
 8000f34:	f7ff fc3e 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_CLEAR_SCREEN);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fc3a 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD1_INDEX, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2100      	movs	r1, #0
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fc0b 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD1_INDEX,"Empty Slots=");
 8000f4a:	490b      	ldr	r1, [pc, #44]	; (8000f78 <LCD_Display_Empty_Slots+0x4c>)
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fe91 	bl	8000c74 <LCD_WRITE_STRING>
	LCD_GOTO_XY(LCD1_INDEX, 13, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	210d      	movs	r1, #13
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff fc02 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_CHAR(LCD1_INDEX,Available_Slots+48);
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <LCD_Display_Empty_Slots+0x50>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3330      	adds	r3, #48	; 0x30
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4619      	mov	r1, r3
 8000f66:	2001      	movs	r0, #1
 8000f68:	f7ff fd54 	bl	8000a14 <LCD_WRITE_CHAR>
	LCD1_Status=LCD_Idle;
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <LCD_Display_Empty_Slots+0x54>)
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <LCD_Display_Empty_Slots+0x58>)
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	080020f8 	.word	0x080020f8
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	2000020c 	.word	0x2000020c
 8000f84:	08000fe9 	.word	0x08000fe9

08000f88 <LCD_Full_Parking>:
void LCD_Full_Parking(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_DISP_ON);
 8000f8c:	210c      	movs	r1, #12
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff fc10 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_CLEAR_SCREEN);
 8000f94:	2101      	movs	r1, #1
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff fc0c 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD1_INDEX, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f7ff fbdd 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD1_INDEX,"Parking is Full");
 8000fa6:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <LCD_Full_Parking+0x2c>)
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fe63 	bl	8000c74 <LCD_WRITE_STRING>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08002108 	.word	0x08002108

08000fb8 <LCD_Farewell>:
void LCD_Farewell(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_DISP_ON);
 8000fbc:	210c      	movs	r1, #12
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fbf8 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_CLEAR_SCREEN);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fbf4 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD1_INDEX, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f7ff fbc5 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD1_INDEX,"See You");
 8000fd6:	4903      	ldr	r1, [pc, #12]	; (8000fe4 <LCD_Farewell+0x2c>)
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fe4b 	bl	8000c74 <LCD_WRITE_STRING>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08002118 	.word	0x08002118

08000fe8 <LCD_Idle>:
void LCD_Idle(){
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
	LCD1_Status=LCD_Idle;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <LCD_Idle+0x14>)
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <LCD_Idle+0x18>)
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000020c 	.word	0x2000020c
 8001000:	08000fe9 	.word	0x08000fe9

08001004 <LCD_Rejected>:
void LCD_Rejected(){
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_DISP_ON);
 8001008:	210c      	movs	r1, #12
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fbd2 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD1_INDEX, LCD_CLEAR_SCREEN);
 8001010:	2101      	movs	r1, #1
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff fbce 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD1_INDEX, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fb9f 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD1_INDEX,"Not Allowed ID");
 8001022:	4904      	ldr	r1, [pc, #16]	; (8001034 <LCD_Rejected+0x30>)
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fe25 	bl	8000c74 <LCD_WRITE_STRING>
	LCD1_Status=LCD_Display_Empty_Slots;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <LCD_Rejected+0x34>)
 800102c:	4a03      	ldr	r2, [pc, #12]	; (800103c <LCD_Rejected+0x38>)
 800102e:	601a      	str	r2, [r3, #0]

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	08002120 	.word	0x08002120
 8001038:	2000020c 	.word	0x2000020c
 800103c:	08000f2d 	.word	0x08000f2d

08001040 <LCDS_init>:
void LCDS_init(){
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	LCD1.LCD_MODE=LCD_MODE_4BIT_2LINES;
 8001044:	4b35      	ldr	r3, [pc, #212]	; (800111c <LCDS_init+0xdc>)
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	701a      	strb	r2, [r3, #0]
	LCD1.EN_LCD_PIN.GPIO_Port = GPIOA;
 800104a:	4b34      	ldr	r3, [pc, #208]	; (800111c <LCDS_init+0xdc>)
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <LCDS_init+0xe0>)
 800104e:	615a      	str	r2, [r3, #20]
	LCD1.EN_LCD_PIN.GPIO_PIN = GPIO_Pin_6;
 8001050:	4b32      	ldr	r3, [pc, #200]	; (800111c <LCDS_init+0xdc>)
 8001052:	2206      	movs	r2, #6
 8001054:	761a      	strb	r2, [r3, #24]
	LCD1.RS_LCD_PIN.GPIO_Port = GPIOA;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <LCDS_init+0xdc>)
 8001058:	4a31      	ldr	r2, [pc, #196]	; (8001120 <LCDS_init+0xe0>)
 800105a:	605a      	str	r2, [r3, #4]
	LCD1.RS_LCD_PIN.GPIO_PIN = GPIO_Pin_5;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <LCDS_init+0xdc>)
 800105e:	2205      	movs	r2, #5
 8001060:	721a      	strb	r2, [r3, #8]
	LCD1.RW_LCD_PIN.GPIO_Port = GPIOA;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <LCDS_init+0xdc>)
 8001064:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <LCDS_init+0xe0>)
 8001066:	60da      	str	r2, [r3, #12]
	LCD1.RW_LCD_PIN.GPIO_PIN = GPIO_Pin_4;
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <LCDS_init+0xdc>)
 800106a:	2204      	movs	r2, #4
 800106c:	741a      	strb	r2, [r3, #16]
	LCD1.D_LCD_PIN[0].GPIO_Port = GPIOA;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <LCDS_init+0xdc>)
 8001070:	4a2b      	ldr	r2, [pc, #172]	; (8001120 <LCDS_init+0xe0>)
 8001072:	61da      	str	r2, [r3, #28]
	LCD1.D_LCD_PIN[0].GPIO_PIN = GPIO_Pin_12;
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <LCDS_init+0xdc>)
 8001076:	220c      	movs	r2, #12
 8001078:	f883 2020 	strb.w	r2, [r3, #32]
	LCD1.D_LCD_PIN[1].GPIO_Port = GPIOA;
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <LCDS_init+0xdc>)
 800107e:	4a28      	ldr	r2, [pc, #160]	; (8001120 <LCDS_init+0xe0>)
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
	LCD1.D_LCD_PIN[1].GPIO_PIN = GPIO_Pin_13;
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <LCDS_init+0xdc>)
 8001084:	220d      	movs	r2, #13
 8001086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	LCD1.D_LCD_PIN[2].GPIO_Port = GPIOA;
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <LCDS_init+0xdc>)
 800108c:	4a24      	ldr	r2, [pc, #144]	; (8001120 <LCDS_init+0xe0>)
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
	LCD1.D_LCD_PIN[2].GPIO_PIN = GPIO_Pin_14;
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <LCDS_init+0xdc>)
 8001092:	220e      	movs	r2, #14
 8001094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	LCD1.D_LCD_PIN[3].GPIO_Port = GPIOA;
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <LCDS_init+0xdc>)
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <LCDS_init+0xe0>)
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
	LCD1.D_LCD_PIN[3].GPIO_PIN = GPIO_Pin_15;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <LCDS_init+0xdc>)
 80010a0:	220f      	movs	r2, #15
 80010a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38


	LCD0.LCD_MODE=LCD_MODE_4BIT_2LINES;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <LCDS_init+0xe4>)
 80010a8:	2228      	movs	r2, #40	; 0x28
 80010aa:	701a      	strb	r2, [r3, #0]
	LCD0.EN_LCD_PIN.GPIO_Port = GPIOB;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <LCDS_init+0xe4>)
 80010ae:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <LCDS_init+0xe8>)
 80010b0:	615a      	str	r2, [r3, #20]
	LCD0.EN_LCD_PIN.GPIO_PIN = GPIO_Pin_10;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <LCDS_init+0xe4>)
 80010b4:	220a      	movs	r2, #10
 80010b6:	761a      	strb	r2, [r3, #24]
	LCD0.RS_LCD_PIN.GPIO_Port = GPIOB;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <LCDS_init+0xe4>)
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <LCDS_init+0xe8>)
 80010bc:	605a      	str	r2, [r3, #4]
	LCD0.RS_LCD_PIN.GPIO_PIN = GPIO_Pin_11;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <LCDS_init+0xe4>)
 80010c0:	220b      	movs	r2, #11
 80010c2:	721a      	strb	r2, [r3, #8]
	LCD0.RW_LCD_PIN.GPIO_Port = GPIOA;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <LCDS_init+0xe4>)
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <LCDS_init+0xe0>)
 80010c8:	60da      	str	r2, [r3, #12]
	LCD0.RW_LCD_PIN.GPIO_PIN = GPIO_Pin_4;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <LCDS_init+0xe4>)
 80010cc:	2204      	movs	r2, #4
 80010ce:	741a      	strb	r2, [r3, #16]
	LCD0.D_LCD_PIN[0].GPIO_Port = GPIOB;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <LCDS_init+0xe4>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <LCDS_init+0xe8>)
 80010d4:	61da      	str	r2, [r3, #28]
	LCD0.D_LCD_PIN[0].GPIO_PIN = GPIO_Pin_12;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <LCDS_init+0xe4>)
 80010d8:	220c      	movs	r2, #12
 80010da:	f883 2020 	strb.w	r2, [r3, #32]
	LCD0.D_LCD_PIN[1].GPIO_Port = GPIOB;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <LCDS_init+0xe4>)
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <LCDS_init+0xe8>)
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
	LCD0.D_LCD_PIN[1].GPIO_PIN = GPIO_Pin_13;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <LCDS_init+0xe4>)
 80010e6:	220d      	movs	r2, #13
 80010e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	LCD0.D_LCD_PIN[2].GPIO_Port = GPIOB;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <LCDS_init+0xe4>)
 80010ee:	4a0e      	ldr	r2, [pc, #56]	; (8001128 <LCDS_init+0xe8>)
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
	LCD0.D_LCD_PIN[2].GPIO_PIN = GPIO_Pin_14;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <LCDS_init+0xe4>)
 80010f4:	220e      	movs	r2, #14
 80010f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	LCD0.D_LCD_PIN[3].GPIO_Port = GPIOB;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <LCDS_init+0xe4>)
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <LCDS_init+0xe8>)
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
	LCD0.D_LCD_PIN[3].GPIO_PIN = GPIO_Pin_15;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <LCDS_init+0xe4>)
 8001102:	220f      	movs	r2, #15
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	LCD_INIT(0, &LCD0);
 8001108:	4906      	ldr	r1, [pc, #24]	; (8001124 <LCDS_init+0xe4>)
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fa28 	bl	8000560 <LCD_INIT>
	LCD_INIT(1, &LCD1);
 8001110:	4902      	ldr	r1, [pc, #8]	; (800111c <LCDS_init+0xdc>)
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff fa24 	bl	8000560 <LCD_INIT>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000026c 	.word	0x2000026c
 8001120:	40010800 	.word	0x40010800
 8001124:	20000210 	.word	0x20000210
 8001128:	40010c00 	.word	0x40010c00

0800112c <LED_Red_On>:
 */


#include "LED_Controller.h"
void (* LED_Status)();
void LED_Red_On(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_0,GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <LED_Red_On+0x24>)
 8001136:	f000 ff34 	bl	8001fa2 <MCAL_GPIO_WritePin>
	delay_mss(2000);
 800113a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800113e:	f7ff f897 	bl	8000270 <delay_mss>
	LED_Red_Off();
 8001142:	f000 f829 	bl	8001198 <LED_Red_Off>
	LED_Status=LED_Idle;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <LED_Red_On+0x28>)
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <LED_Red_On+0x2c>)
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010800 	.word	0x40010800
 8001154:	200002c8 	.word	0x200002c8
 8001158:	080011bd 	.word	0x080011bd

0800115c <LED_Green_On>:
void LED_Green_On(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_11,GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	210b      	movs	r1, #11
 8001164:	4802      	ldr	r0, [pc, #8]	; (8001170 <LED_Green_On+0x14>)
 8001166:	f000 ff1c 	bl	8001fa2 <MCAL_GPIO_WritePin>


}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40010800 	.word	0x40010800

08001174 <LED_Green_Off>:
void LED_Green_Off(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_11,GPIO_PIN_SET);
 8001178:	2201      	movs	r2, #1
 800117a:	210b      	movs	r1, #11
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <LED_Green_Off+0x18>)
 800117e:	f000 ff10 	bl	8001fa2 <MCAL_GPIO_WritePin>
	LED_Status=LED_Idle;
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <LED_Green_Off+0x1c>)
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <LED_Green_Off+0x20>)
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40010800 	.word	0x40010800
 8001190:	200002c8 	.word	0x200002c8
 8001194:	080011bd 	.word	0x080011bd

08001198 <LED_Red_Off>:
void LED_Red_Off(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_0,GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2100      	movs	r1, #0
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <LED_Red_Off+0x18>)
 80011a2:	f000 fefe 	bl	8001fa2 <MCAL_GPIO_WritePin>
	LED_Status=LED_Idle;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <LED_Red_Off+0x1c>)
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <LED_Red_Off+0x20>)
 80011aa:	601a      	str	r2, [r3, #0]

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010800 	.word	0x40010800
 80011b4:	200002c8 	.word	0x200002c8
 80011b8:	080011bd 	.word	0x080011bd

080011bc <LED_Idle>:
void LED_Idle(){
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	LED_Status=LED_Idle;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <LED_Idle+0x14>)
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <LED_Idle+0x18>)
 80011c4:	601a      	str	r2, [r3, #0]
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200002c8 	.word	0x200002c8
 80011d4:	080011bd 	.word	0x080011bd

080011d8 <LEDs_Init>:
void LEDs_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	//RED LED A0
	GPIO_PinConfig_t PinCinfg;
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_0;
 80011de:	2300      	movs	r3, #0
 80011e0:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80011e2:	2301      	movs	r3, #1
 80011e4:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	4619      	mov	r1, r3
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <LEDs_Init+0x34>)
 80011ec:	f000 fe58 	bl	8001ea0 <MCAL_GPIO_Init>

	//GREEN LED A11
	PinCinfg.GPIO_Pin_Number=GPIO_Pin_11;
 80011f0:	230b      	movs	r3, #11
 80011f2:	717b      	strb	r3, [r7, #5]
	PinCinfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80011f4:	2301      	movs	r3, #1
 80011f6:	713b      	strb	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &PinCinfg);
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <LEDs_Init+0x34>)
 80011fe:	f000 fe4f 	bl	8001ea0 <MCAL_GPIO_Init>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40010800 	.word	0x40010800

08001210 <Park_Idle>:

uint8_t pass[3] ={0};
uint8_t Available_Slots=3;
uint8_t Search_Done = 0;

void Park_Idle(){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	Park_Status=Park_Idle;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <Park_Idle+0x14>)
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <Park_Idle+0x18>)
 8001218:	601a      	str	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	200002cc 	.word	0x200002cc
 8001228:	08001211 	.word	0x08001211

0800122c <Park_Process_EntryGate>:
void Park_Process_EntryGate(){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0

		if(Available_Slots>0)
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <Park_Process_EntryGate+0x94>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d037      	beq.n	80012aa <Park_Process_EntryGate+0x7e>
		{
			Search_Done=0;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <Park_Process_EntryGate+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
			uint8_t i;
			for(i=0;i<3;i++){
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	e020      	b.n	8001288 <Park_Process_EntryGate+0x5c>
				/*==================Correct Id====================*/
				if(RFID_CARD_Enter==pass[i]){
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <Park_Process_EntryGate+0x9c>)
 800124a:	5cd3      	ldrb	r3, [r2, r3]
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <Park_Process_EntryGate+0xa0>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d10f      	bne.n	8001276 <Park_Process_EntryGate+0x4a>
					LCD1_Status=LCD_Welcome;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <Park_Process_EntryGate+0xa4>)
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <Park_Process_EntryGate+0xa8>)
 800125a:	601a      	str	r2, [r3, #0]
					LED_Status=LED_Green_On;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <Park_Process_EntryGate+0xac>)
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <Park_Process_EntryGate+0xb0>)
 8001260:	601a      	str	r2, [r3, #0]
					Gate_Status=Gate1_Letting;
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <Park_Process_EntryGate+0xb4>)
 8001264:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <Park_Process_EntryGate+0xb8>)
 8001266:	601a      	str	r2, [r3, #0]
					Available_Slots--;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <Park_Process_EntryGate+0x94>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <Park_Process_EntryGate+0x94>)
 8001272:	701a      	strb	r2, [r3, #0]
					break;
 8001274:	e00b      	b.n	800128e <Park_Process_EntryGate+0x62>
				}else
					Search_Done++;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <Park_Process_EntryGate+0x98>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <Park_Process_EntryGate+0x98>)
 8001280:	701a      	strb	r2, [r3, #0]
			for(i=0;i<3;i++){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3301      	adds	r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d9db      	bls.n	8001246 <Park_Process_EntryGate+0x1a>
			}/*==================Wrong Id====================*/
			if(Search_Done==3){
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <Park_Process_EntryGate+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d10c      	bne.n	80012b0 <Park_Process_EntryGate+0x84>
				LCD1_Status=LCD_Rejected;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <Park_Process_EntryGate+0xa4>)
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <Park_Process_EntryGate+0xbc>)
 800129a:	601a      	str	r2, [r3, #0]
				LED_Status=LED_Red_On;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <Park_Process_EntryGate+0xac>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <Park_Process_EntryGate+0xc0>)
 80012a0:	601a      	str	r2, [r3, #0]
				Search_Done=0;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <Park_Process_EntryGate+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e002      	b.n	80012b0 <Park_Process_EntryGate+0x84>
			}
		}
		/*======Parking is full so not allow enetr cars=======*/
		else
		{
			LCD1_Status=LCD_Full_Parking;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <Park_Process_EntryGate+0xa4>)
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <Park_Process_EntryGate+0xc4>)
 80012ae:	601a      	str	r2, [r3, #0]
		}
	Park_Status=Park_Idle;
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <Park_Process_EntryGate+0xc8>)
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <Park_Process_EntryGate+0xcc>)
 80012b4:	601a      	str	r2, [r3, #0]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000027 	.word	0x20000027
 80012c8:	20000024 	.word	0x20000024
 80012cc:	20000208 	.word	0x20000208
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	08000ef1 	.word	0x08000ef1
 80012d8:	200002c8 	.word	0x200002c8
 80012dc:	0800115d 	.word	0x0800115d
 80012e0:	20000204 	.word	0x20000204
 80012e4:	08000cfd 	.word	0x08000cfd
 80012e8:	08001005 	.word	0x08001005
 80012ec:	0800112d 	.word	0x0800112d
 80012f0:	08000f89 	.word	0x08000f89
 80012f4:	200002cc 	.word	0x200002cc
 80012f8:	08001211 	.word	0x08001211

080012fc <Park_Process_ExitGate>:
void Park_Process_ExitGate(void){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

	//Search about ID in array of Pass
	if(Available_Slots<3){
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <Park_Process_ExitGate+0x94>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d839      	bhi.n	800137e <Park_Process_ExitGate+0x82>
	int i=0;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
		Search_Done=0;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <Park_Process_ExitGate+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++){
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	e021      	b.n	800135e <Park_Process_ExitGate+0x62>
			/*==================Correct Id====================*/
			if(RFID_CARD_EXIT==pass[i]){
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <Park_Process_ExitGate+0x9c>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <Park_Process_ExitGate+0xa0>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d10f      	bne.n	800134c <Park_Process_ExitGate+0x50>
				LCD1_Status=LCD_Farewell;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <Park_Process_ExitGate+0xa4>)
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <Park_Process_ExitGate+0xa8>)
 8001330:	601a      	str	r2, [r3, #0]
				LED_Status=LED_Green_On;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <Park_Process_ExitGate+0xac>)
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <Park_Process_ExitGate+0xb0>)
 8001336:	601a      	str	r2, [r3, #0]
				Gate_Status=Gate2_Letting;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <Park_Process_ExitGate+0xb4>)
 800133a:	4a1e      	ldr	r2, [pc, #120]	; (80013b4 <Park_Process_ExitGate+0xb8>)
 800133c:	601a      	str	r2, [r3, #0]
				Available_Slots++;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <Park_Process_ExitGate+0x94>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <Park_Process_ExitGate+0x94>)
 8001348:	701a      	strb	r2, [r3, #0]
				break;
 800134a:	e00b      	b.n	8001364 <Park_Process_ExitGate+0x68>
			}else
				Search_Done++;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <Park_Process_ExitGate+0x98>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b2da      	uxtb	r2, r3
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <Park_Process_ExitGate+0x98>)
 8001356:	701a      	strb	r2, [r3, #0]
		for(i=0;i<3;i++){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	ddda      	ble.n	800131a <Park_Process_ExitGate+0x1e>
		}/*==================Wrong Id====================*/
		if(Search_Done==3){
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <Park_Process_ExitGate+0x98>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d108      	bne.n	800137e <Park_Process_ExitGate+0x82>
			LCD1_Status=LCD_Rejected;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <Park_Process_ExitGate+0xa4>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <Park_Process_ExitGate+0xbc>)
 8001370:	601a      	str	r2, [r3, #0]
			LED_Status=LED_Red_On;
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <Park_Process_ExitGate+0xac>)
 8001374:	4a11      	ldr	r2, [pc, #68]	; (80013bc <Park_Process_ExitGate+0xc0>)
 8001376:	601a      	str	r2, [r3, #0]
			Search_Done=0;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <Park_Process_ExitGate+0x98>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
		}
	}
	Park_Status=Park_Idle;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <Park_Process_ExitGate+0xc4>)
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <Park_Process_ExitGate+0xc8>)
 8001382:	601a      	str	r2, [r3, #0]

}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	20000027 	.word	0x20000027
 8001398:	20000024 	.word	0x20000024
 800139c:	2000020a 	.word	0x2000020a
 80013a0:	2000020c 	.word	0x2000020c
 80013a4:	08000fb9 	.word	0x08000fb9
 80013a8:	200002c8 	.word	0x200002c8
 80013ac:	0800115d 	.word	0x0800115d
 80013b0:	20000204 	.word	0x20000204
 80013b4:	08000d59 	.word	0x08000d59
 80013b8:	08001005 	.word	0x08001005
 80013bc:	0800112d 	.word	0x0800112d
 80013c0:	200002cc 	.word	0x200002cc
 80013c4:	08001211 	.word	0x08001211

080013c8 <Store_IDs_From_Admin>:


void Store_IDs_From_Admin(void)
{
 80013c8:	b598      	push	{r3, r4, r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD0_INDEX, LCD_DISP_ON);
 80013cc:	210c      	movs	r1, #12
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff f9f0 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD0_INDEX, LCD_CLEAR_SCREEN);
 80013d4:	2101      	movs	r1, #1
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff f9ec 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD0_INDEX, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff f9bd 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD0_INDEX,"Enter Car IDS");
 80013e6:	4945      	ldr	r1, [pc, #276]	; (80014fc <Store_IDs_From_Admin+0x134>)
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fc43 	bl	8000c74 <LCD_WRITE_STRING>
	static uint8_t i=0;
	for(i=0;i<3;i++){
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e04a      	b.n	800148c <Store_IDs_From_Admin+0xc4>
		do{
			pass[i]=Keypad_getkey();
 80013f6:	4b42      	ldr	r3, [pc, #264]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461c      	mov	r4, r3
 80013fc:	f7fe ff9c 	bl	8000338 <Keypad_getkey>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <Store_IDs_From_Admin+0x13c>)
 8001406:	551a      	strb	r2, [r3, r4]
		}
		while(pass[i]=='N');
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <Store_IDs_From_Admin+0x138>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <Store_IDs_From_Admin+0x13c>)
 8001410:	5c9b      	ldrb	r3, [r3, r2]
 8001412:	2b4e      	cmp	r3, #78	; 0x4e
 8001414:	d0ef      	beq.n	80013f6 <Store_IDs_From_Admin+0x2e>
		LCD_WRITE_COMMAND(LCD0_INDEX, LCD_DISP_ON);
 8001416:	210c      	movs	r1, #12
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff f9cb 	bl	80007b4 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD0_INDEX, LCD_CLEAR_SCREEN);
 800141e:	2101      	movs	r1, #1
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff f9c7 	bl	80007b4 <LCD_WRITE_COMMAND>
		LCD_GOTO_XY(LCD0_INDEX, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff f998 	bl	8000760 <LCD_GOTO_XY>
		LCD_WRITE_STRING(LCD0_INDEX,"ID ");
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <Store_IDs_From_Admin+0x140>)
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fc1e 	bl	8000c74 <LCD_WRITE_STRING>
		LCD_GOTO_XY(LCD0_INDEX, 4, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2104      	movs	r1, #4
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff f98f 	bl	8000760 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(LCD0_INDEX,i+48);
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <Store_IDs_From_Admin+0x138>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3330      	adds	r3, #48	; 0x30
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4619      	mov	r1, r3
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fae1 	bl	8000a14 <LCD_WRITE_CHAR>
		LCD_GOTO_XY(LCD0_INDEX, 5, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff f982 	bl	8000760 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(LCD0_INDEX,'=');
 800145c:	213d      	movs	r1, #61	; 0x3d
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fad8 	bl	8000a14 <LCD_WRITE_CHAR>
		LCD_GOTO_XY(LCD0_INDEX, 6, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2106      	movs	r1, #6
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f979 	bl	8000760 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(LCD0_INDEX,pass[i]);
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <Store_IDs_From_Admin+0x138>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <Store_IDs_From_Admin+0x13c>)
 8001476:	5c9b      	ldrb	r3, [r3, r2]
 8001478:	4619      	mov	r1, r3
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff faca 	bl	8000a14 <LCD_WRITE_CHAR>
	for(i=0;i<3;i++){
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <Store_IDs_From_Admin+0x138>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <Store_IDs_From_Admin+0x138>)
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <Store_IDs_From_Admin+0x138>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d9b0      	bls.n	80013f6 <Store_IDs_From_Admin+0x2e>
		//		pass[i]=Keypad_getkey();
	}
	LCD_WRITE_COMMAND(LCD0_INDEX, LCD_DISP_ON);
 8001494:	210c      	movs	r1, #12
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f98c 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD0_INDEX, LCD_CLEAR_SCREEN);
 800149c:	2101      	movs	r1, #1
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff f988 	bl	80007b4 <LCD_WRITE_COMMAND>
	LCD_GOTO_XY(LCD0_INDEX, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff f959 	bl	8000760 <LCD_GOTO_XY>
	LCD_WRITE_STRING(LCD0_INDEX,"Allowed IDS=");
 80014ae:	4917      	ldr	r1, [pc, #92]	; (800150c <Store_IDs_From_Admin+0x144>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fbdf 	bl	8000c74 <LCD_WRITE_STRING>
	for(i=0;i<3;i++){
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	e017      	b.n	80014ee <Store_IDs_From_Admin+0x126>
		LCD_GOTO_XY(LCD0_INDEX, i+12, 0);
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	330c      	adds	r3, #12
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	4619      	mov	r1, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff f948 	bl	8000760 <LCD_GOTO_XY>
		LCD_WRITE_CHAR(LCD0_INDEX,pass[i]);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <Store_IDs_From_Admin+0x13c>)
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	4619      	mov	r1, r3
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fa99 	bl	8000a14 <LCD_WRITE_CHAR>
	for(i=0;i<3;i++){
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <Store_IDs_From_Admin+0x138>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d9e3      	bls.n	80014be <Store_IDs_From_Admin+0xf6>
	}
}
 80014f6:	bf00      	nop
 80014f8:	bd98      	pop	{r3, r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08002130 	.word	0x08002130
 8001500:	20000028 	.word	0x20000028
 8001504:	20000024 	.word	0x20000024
 8001508:	08002140 	.word	0x08002140
 800150c:	08002144 	.word	0x08002144

08001510 <Clock_Init>:
#include "Servo_Motor.h"
#include "keypad.h"


/*=================Global Variables===============*/
void Clock_Init(void){
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <Clock_Init+0x30>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <Clock_Init+0x30>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <Clock_Init+0x30>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <Clock_Init+0x30>)
 8001526:	f043 0308 	orr.w	r3, r3, #8
 800152a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <Clock_Init+0x30>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a03      	ldr	r2, [pc, #12]	; (8001540 <Clock_Init+0x30>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6193      	str	r3, [r2, #24]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000

08001544 <HW_Init>:
void HW_Init(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	Keypad_init();
 8001548:	f7fe feae 	bl	80002a8 <Keypad_init>

	LCDS_init();
 800154c:	f7ff fd78 	bl	8001040 <LCDS_init>


	LEDs_Init();
 8001550:	f7ff fe42 	bl	80011d8 <LEDs_Init>

	//Gates Init
	Timer2_init();
 8001554:	f000 fd4a 	bl	8001fec <Timer2_init>
	Servo1_Entry_Gate_Init();
 8001558:	f7fe fe0a 	bl	8000170 <Servo1_Entry_Gate_Init>
	Servo2_Exit_Gate_Init();
 800155c:	f7fe fe48 	bl	80001f0 <Servo2_Exit_Gate_Init>
	RFIDs_Init();
 8001560:	f7ff fc28 	bl	8000db4 <RFIDs_Init>
	PIRs_Iint();
 8001564:	f7ff fc9e 	bl	8000ea4 <PIRs_Iint>

	Park_Status=Park_Idle;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HW_Init+0x40>)
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HW_Init+0x44>)
 800156c:	601a      	str	r2, [r3, #0]
	LCD1_Status=LCD_Idle;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HW_Init+0x48>)
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HW_Init+0x4c>)
 8001572:	601a      	str	r2, [r3, #0]
	LED_Status=LED_Idle;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HW_Init+0x50>)
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HW_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
	Gate_Status=Gates_Idle;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HW_Init+0x58>)
 800157c:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HW_Init+0x5c>)
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002cc 	.word	0x200002cc
 8001588:	08001211 	.word	0x08001211
 800158c:	2000020c 	.word	0x2000020c
 8001590:	08000fe9 	.word	0x08000fe9
 8001594:	200002c8 	.word	0x200002c8
 8001598:	080011bd 	.word	0x080011bd
 800159c:	20000204 	.word	0x20000204
 80015a0:	08000ce1 	.word	0x08000ce1

080015a4 <main>:

int main(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	Clock_Init();
 80015a8:	f7ff ffb2 	bl	8001510 <Clock_Init>
	HW_Init();
 80015ac:	f7ff ffca 	bl	8001544 <HW_Init>


	/*==========Enter IDs To Store In Array Pass==========*/
	Store_IDs_From_Admin();
 80015b0:	f7ff ff0a 	bl	80013c8 <Store_IDs_From_Admin>
	LCD_Welcome();
 80015b4:	f7ff fc9c 	bl	8000ef0 <LCD_Welcome>
	LCD_Display_Empty_Slots();
 80015b8:	f7ff fcb8 	bl	8000f2c <LCD_Display_Empty_Slots>

	while(1)
	{
		/*=====================Enter gate=====================*/
		Park_Status();
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <main+0x44>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4798      	blx	r3
		LCD1_Status();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <main+0x48>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4798      	blx	r3
		LED_Status();
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <main+0x4c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4798      	blx	r3
		LED_Status();
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <main+0x4c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4798      	blx	r3
		Gate_Status();
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <main+0x50>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4798      	blx	r3
		LED_Status();
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <main+0x4c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4798      	blx	r3
		LCD1_Status();
 80015e0:	4b02      	ldr	r3, [pc, #8]	; (80015ec <main+0x48>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4798      	blx	r3
		Park_Status();
 80015e6:	e7e9      	b.n	80015bc <main+0x18>
 80015e8:	200002cc 	.word	0x200002cc
 80015ec:	2000020c 	.word	0x2000020c
 80015f0:	200002c8 	.word	0x200002c8
 80015f4:	20000204 	.word	0x20000204

080015f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopForever+0x6>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopForever+0xe>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopForever+0x16>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001626:	f000 fd1d 	bl	8002064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff ffbb 	bl	80015a4 <main>

0800162e <LoopForever>:

LoopForever:
    b LoopForever
 800162e:	e7fe      	b.n	800162e <LoopForever>
  ldr   r0, =_estack
 8001630:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800163c:	08002174 	.word	0x08002174
  ldr r2, =_sbss
 8001640:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001644:	20000354 	.word	0x20000354

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_Disable;
	NVIC_IRQ40_EXTI10_15_Disable;
}


void EXTI0_IRQHandler(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	//Clear Pending Register
	EXTI->PR |=(1<<0);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <EXTI0_IRQHandler+0x1c>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <EXTI0_IRQHandler+0x1c>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[0]();
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <EXTI0_IRQHandler+0x20>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4798      	blx	r3

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40010400 	.word	0x40010400
 800166c:	200002d0 	.word	0x200002d0

08001670 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <EXTI1_IRQHandler+0x1c>)
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	4a04      	ldr	r2, [pc, #16]	; (800168c <EXTI1_IRQHandler+0x1c>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[1]();
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <EXTI1_IRQHandler+0x20>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4798      	blx	r3
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40010400 	.word	0x40010400
 8001690:	200002d0 	.word	0x200002d0

08001694 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <EXTI2_IRQHandler+0x1c>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <EXTI2_IRQHandler+0x1c>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[2]();
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <EXTI2_IRQHandler+0x20>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4798      	blx	r3
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40010400 	.word	0x40010400
 80016b4:	200002d0 	.word	0x200002d0

080016b8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <EXTI3_IRQHandler+0x1c>)
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <EXTI3_IRQHandler+0x1c>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[3]();
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <EXTI3_IRQHandler+0x20>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4798      	blx	r3
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40010400 	.word	0x40010400
 80016d8:	200002d0 	.word	0x200002d0

080016dc <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <EXTI4_IRQHandler+0x1c>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <EXTI4_IRQHandler+0x1c>)
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[4]();
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <EXTI4_IRQHandler+0x20>)
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	4798      	blx	r3
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010400 	.word	0x40010400
 80016fc:	200002d0 	.word	0x200002d0

08001700 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<5)){
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |=(1<<5);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001716:	f043 0320 	orr.w	r3, r3, #32
 800171a:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[5]();
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <EXTI9_5_IRQHandler+0xa4>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<6)){
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |=(1<<6);
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001738:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[6]();
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <EXTI9_5_IRQHandler+0xa4>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<7)){
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |=(1<<7);
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001756:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[7]();
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <EXTI9_5_IRQHandler+0xa4>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<8)){
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |=(1<<8);
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[8]();
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <EXTI9_5_IRQHandler+0xa4>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<9)){
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |=(1<<9);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <EXTI9_5_IRQHandler+0xa0>)
 800178e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001792:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[9]();
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <EXTI9_5_IRQHandler+0xa4>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	4798      	blx	r3
	}

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40010400 	.word	0x40010400
 80017a4:	200002d0 	.word	0x200002d0

080017a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<10)){
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |=(1<<10);
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c2:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[10]();
 80017c4:	4b28      	ldr	r3, [pc, #160]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c8:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<11)){
 80017ca:	4b26      	ldr	r3, [pc, #152]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |=(1<<11);
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e0:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[11]();
 80017e2:	4b21      	ldr	r3, [pc, #132]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<12)){
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |=(1<<12);
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 80017fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fe:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[12]();
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<13)){
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |=(1<<13);
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181c:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[13]();
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<14)){
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d008      	beq.n	8001842 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |=(1<<14);
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183a:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[14]();
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<15)){
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |=(1<<15);
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <EXTI15_10_IRQHandler+0xbc>)
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[15]();
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <EXTI15_10_IRQHandler+0xc0>)
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	4798      	blx	r3
	}
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40010400 	.word	0x40010400
 8001868:	200002d0 	.word	0x200002d0

0800186c <MCAL_RCC_GetSYS_CLK>:
/*
 * ===============================================
 * APIs Supported by "MCAL RCC DRIVER"
 * ===============================================
 */
uint32_t MCAL_RCC_GetSYS_CLK(void){
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
	switch ( (RCC->CFGR >>2) &0b11 ){
 8001870:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d006      	beq.n	800188c <MCAL_RCC_GetSYS_CLK+0x20>
 800187e:	2b01      	cmp	r3, #1
 8001880:	d302      	bcc.n	8001888 <MCAL_RCC_GetSYS_CLK+0x1c>
 8001882:	2b02      	cmp	r3, #2
 8001884:	d004      	beq.n	8001890 <MCAL_RCC_GetSYS_CLK+0x24>
 8001886:	e06e      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
	//HSI selected as system clock
	case 0:
		return HSI_RC_CLK;
 8001888:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <MCAL_RCC_GetSYS_CLK+0x108>)
 800188a:	e06c      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//HSE selected as system clock
	case 1:
		return HSE_CLK;
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <MCAL_RCC_GetSYS_CLK+0x10c>)
 800188e:	e06a      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//PLL selected as system clock
	case 2:
		switch ( (RCC->CFGR >>16) &0b1 ){
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <MCAL_RCC_GetSYS_CLK+0x38>
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d01e      	beq.n	80018e0 <MCAL_RCC_GetSYS_CLK+0x74>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
			}

			break;

		}break;
 80018a2:	e060      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
			if (((RCC->CFGR >>18)& 0b1111) ==15   )
 80018a4:	4b32      	ldr	r3, [pc, #200]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	d109      	bne.n	80018c6 <MCAL_RCC_GetSYS_CLK+0x5a>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 80018b2:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	3301      	adds	r3, #1
 80018be:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	e04f      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	0c9b      	lsrs	r3, r3, #18
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80018da:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80018de:	e042      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
			if((RCC->CFGR >>17) &0b1){
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01d      	beq.n	800192a <MCAL_RCC_GetSYS_CLK+0xbe>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c9b      	lsrs	r3, r3, #18
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d109      	bne.n	8001910 <MCAL_RCC_GetSYS_CLK+0xa4>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c9b      	lsrs	r3, r3, #18
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3301      	adds	r3, #1
 8001908:	4a1c      	ldr	r2, [pc, #112]	; (800197c <MCAL_RCC_GetSYS_CLK+0x110>)
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	e02a      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <MCAL_RCC_GetSYS_CLK+0x110>)
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8001924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001928:	e01d      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d109      	bne.n	800194c <MCAL_RCC_GetSYS_CLK+0xe0>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0c9b      	lsrs	r3, r3, #18
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3301      	adds	r3, #1
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	e00c      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MCAL_RCC_GetSYS_CLK+0x104>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	0c9b      	lsrs	r3, r3, #18
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8001958:	fb02 f303 	mul.w	r3, r2, r3
 800195c:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001960:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001964:	e7ff      	b.n	8001966 <MCAL_RCC_GetSYS_CLK+0xfa>

	}

}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	003d0900 	.word	0x003d0900
 800197c:	001e8480 	.word	0x001e8480

08001980 <MCAL_RCC_GetHCLK>:
 * @param [in] -	none
 * @param [out] -	None
 * @retval -		Freq
 * Note-
 */
uint32_t MCAL_RCC_GetHCLK(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	uint32_t test=(MCAL_RCC_GetSYS_CLK() >> AHBprescTable[( (RCC->CFGR >>4) &0b1111 )]);
 8001986:	f7ff ff71 	bl	800186c <MCAL_RCC_GetSYS_CLK>
 800198a:	4601      	mov	r1, r0
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MCAL_RCC_GetHCLK+0x2c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <MCAL_RCC_GetHCLK+0x30>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	fa21 f303 	lsr.w	r3, r1, r3
 800199e:	607b      	str	r3, [r7, #4]
	return test;
 80019a0:	687b      	ldr	r3, [r7, #4]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	0800215c 	.word	0x0800215c

080019b4 <MCAL_RCC_GetPCLK1>:
// bits 8 :10 PPRE1 APB1 prescaler
uint32_t MCAL_RCC_GetPCLK1(void){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>8) &0b111 )]);
 80019b8:	f7ff ffe2 	bl	8001980 <MCAL_RCC_GetHCLK>
 80019bc:	4601      	mov	r1, r0
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <MCAL_RCC_GetPCLK1+0x20>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	4a03      	ldr	r2, [pc, #12]	; (80019d8 <MCAL_RCC_GetPCLK1+0x24>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08002154 	.word	0x08002154

080019dc <MCAL_RCC_GetPCLK2>:
// bits 11 :13 PPRE1 APB2 prescaler
uint32_t MCAL_RCC_GetPCLK2(void){
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>11) &0b111 )]);
 80019e0:	f7ff ffce 	bl	8001980 <MCAL_RCC_GetHCLK>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <MCAL_RCC_GetPCLK2+0x20>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	0adb      	lsrs	r3, r3, #11
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	4a03      	ldr	r2, [pc, #12]	; (8001a00 <MCAL_RCC_GetPCLK2+0x24>)
 80019f2:	5cd3      	ldrb	r3, [r2, r3]
 80019f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	08002154 	.word	0x08002154

08001a04 <SPI1_IRQHandler>:
/*=================================================================*/
/*=========================IRQ=====================================*/
/*=================================================================*/

void SPI1_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR)&(1<<1)>>1);
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <SPI1_IRQHandler+0x50>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	793b      	ldrb	r3, [r7, #4]
 8001a16:	f362 0300 	bfi	r3, r2, #0, #1
 8001a1a:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR)&(1<<0)>>0);
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <SPI1_IRQHandler+0x50>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	793b      	ldrb	r3, [r7, #4]
 8001a28:	f362 0341 	bfi	r3, r2, #1, #1
 8001a2c:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR)&(1<<4)>>4);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <SPI1_IRQHandler+0x50>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	793b      	ldrb	r3, [r7, #4]
 8001a3a:	f362 0382 	bfi	r3, r2, #2, #1
 8001a3e:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SPI1_IRQHandler+0x54>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	7938      	ldrb	r0, [r7, #4]
 8001a48:	4798      	blx	r3
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40013000 	.word	0x40013000
 8001a58:	2000002c 	.word	0x2000002c

08001a5c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR)&(1<<1)>>1);
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <SPI2_IRQHandler+0x50>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	793b      	ldrb	r3, [r7, #4]
 8001a6e:	f362 0300 	bfi	r3, r2, #0, #1
 8001a72:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR)&(1<<0)>>0);
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <SPI2_IRQHandler+0x50>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	793b      	ldrb	r3, [r7, #4]
 8001a80:	f362 0341 	bfi	r3, r2, #1, #1
 8001a84:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR)&(1<<4)>>4);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <SPI2_IRQHandler+0x50>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	793b      	ldrb	r3, [r7, #4]
 8001a92:	f362 0382 	bfi	r3, r2, #2, #1
 8001a96:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SPI2_IRQHandler+0x54>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	7938      	ldrb	r0, [r7, #4]
 8001aa0:	4798      	blx	r3
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40003800 	.word	0x40003800
 8001ab0:	2000002c 	.word	0x2000002c

08001ab4 <MCAL_USART_Init>:
 * @param [in] -	Cofiguration structure, usart instance
 * @param [out] -	None
 * @retval -			None
 * Note-
 */
void MCAL_USART_Init(UART_Config_t *UART_Config , USART_t* USARTx){
 8001ab4:	b5b0      	push	{r4, r5, r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <MCAL_USART_Init+0x1a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d114      	bne.n	8001af0 <MCAL_USART_Init+0x3c>
		RCC_USART1_CLK_EN();
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6193      	str	r3, [r2, #24]
		Global_UART_Config[0]=*UART_Config;
 8001ad2:	4a63      	ldr	r2, [pc, #396]	; (8001c60 <MCAL_USART_Init+0x1ac>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	461d      	mov	r5, r3
 8001ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	6023      	str	r3, [r4, #0]
		Global_UART1_Config=&Global_UART_Config[0];
 8001ae2:	4b60      	ldr	r3, [pc, #384]	; (8001c64 <MCAL_USART_Init+0x1b0>)
 8001ae4:	4a5e      	ldr	r2, [pc, #376]	; (8001c60 <MCAL_USART_Init+0x1ac>)
 8001ae6:	601a      	str	r2, [r3, #0]
		pclk=MCAL_RCC_GetPCLK2();
 8001ae8:	f7ff ff78 	bl	80019dc <MCAL_RCC_GetPCLK2>
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	e032      	b.n	8001b56 <MCAL_USART_Init+0xa2>
	} else if (USARTx == USART2) {
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <MCAL_USART_Init+0x1b4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d115      	bne.n	8001b24 <MCAL_USART_Init+0x70>
		RCC_USART2_CLK_EN();
 8001af8:	4b58      	ldr	r3, [pc, #352]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a57      	ldr	r2, [pc, #348]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[1]=*UART_Config;
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <MCAL_USART_Init+0x1ac>)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	f103 0414 	add.w	r4, r3, #20
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	6023      	str	r3, [r4, #0]
		Global_UART2_Config=&Global_UART_Config[1];
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <MCAL_USART_Init+0x1b8>)
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <MCAL_USART_Init+0x1bc>)
 8001b1a:	601a      	str	r2, [r3, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8001b1c:	f7ff ff4a 	bl	80019b4 <MCAL_RCC_GetPCLK1>
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	e018      	b.n	8001b56 <MCAL_USART_Init+0xa2>
	} else if (USARTx == USART3) {
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	4a53      	ldr	r2, [pc, #332]	; (8001c74 <MCAL_USART_Init+0x1c0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d114      	bne.n	8001b56 <MCAL_USART_Init+0xa2>
		RCC_USART3_CLK_EN();
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a4a      	ldr	r2, [pc, #296]	; (8001c5c <MCAL_USART_Init+0x1a8>)
 8001b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b36:	61d3      	str	r3, [r2, #28]
		Global_UART_Config[2]=*UART_Config;
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <MCAL_USART_Init+0x1ac>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001b40:	4615      	mov	r5, r2
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	6023      	str	r3, [r4, #0]
		Global_UART3_Config=&Global_UART_Config[2];
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	; (8001c78 <MCAL_USART_Init+0x1c4>)
 8001b4c:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <MCAL_USART_Init+0x1c8>)
 8001b4e:	601a      	str	r2, [r3, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8001b50:	f7ff ff30 	bl	80019b4 <MCAL_RCC_GetPCLK1>
 8001b54:	60f8      	str	r0, [r7, #12]
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->USART_Mode;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Payload_Length;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	7a12      	ldrb	r2, [r2, #8]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Parity;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	7a52      	ldrb	r2, [r2, #9]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	60da      	str	r2, [r3, #12]

	USARTx->CR2 |=UART_Config->StopBits;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	7a92      	ldrb	r2, [r2, #10]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	611a      	str	r2, [r3, #16]
	USARTx->CR3 |=UART_Config->HWFlowCtl;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	7ad2      	ldrb	r2, [r2, #11]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	615a      	str	r2, [r3, #20]

	BRR = USART_BRR_Register(pclk,UART_Config->BaudRate);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	0119      	lsls	r1, r3, #4
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	011b      	lsls	r3, r3, #4
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd8:	2064      	movs	r0, #100	; 0x64
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <MCAL_USART_Init+0x1cc>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	609a      	str	r2, [r3, #8]

	if (UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <MCAL_USART_Init+0x19a>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable ;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	7b12      	ldrb	r2, [r2, #12]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTx == USART1)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4a11      	ldr	r2, [pc, #68]	; (8001c58 <MCAL_USART_Init+0x1a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d106      	bne.n	8001c24 <MCAL_USART_Init+0x170>
		{
			NVIC_IRQ37_USART1_Enable ;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1a      	ldr	r2, [pc, #104]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	6013      	str	r3, [r2, #0]
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}

}
 8001c22:	e014      	b.n	8001c4e <MCAL_USART_Init+0x19a>
		else if (USARTx == USART2)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <MCAL_USART_Init+0x1b4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d106      	bne.n	8001c3a <MCAL_USART_Init+0x186>
			NVIC_IRQ38_USART2_Enable ;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	e009      	b.n	8001c4e <MCAL_USART_Init+0x19a>
		else if (USARTx == USART3)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <MCAL_USART_Init+0x1c0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d105      	bne.n	8001c4e <MCAL_USART_Init+0x19a>
			NVIC_IRQ39_USART3_Enable ;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <MCAL_USART_Init+0x1d0>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	20000310 	.word	0x20000310
 8001c64:	2000030c 	.word	0x2000030c
 8001c68:	40004400 	.word	0x40004400
 8001c6c:	2000034c 	.word	0x2000034c
 8001c70:	20000324 	.word	0x20000324
 8001c74:	40004800 	.word	0x40004800
 8001c78:	20000350 	.word	0x20000350
 8001c7c:	20000338 	.word	0x20000338
 8001c80:	51eb851f 	.word	0x51eb851f
 8001c84:	e000e104 	.word	0xe000e104

08001c88 <MCAL_USART_SetPins>:
 *		param[in]         -USARTx :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/

void MCAL_USART_SetPins(USART_t *USARTx){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	GPIO_t * GPIOx;
	uint8_t TX_PIN;
	uint8_t RX_PIN;
	uint8_t CTS_PIN;
	uint8_t RTS_PIN;
	if(USARTx == USART1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a26      	ldr	r2, [pc, #152]	; (8001d2c <MCAL_USART_SetPins+0xa4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d10d      	bne.n	8001cb4 <MCAL_USART_SetPins+0x2c>
	{
		TX_PIN=GPIO_Pin_9;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_10;
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_11;
 8001ca0:	230b      	movs	r3, #11
 8001ca2:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_12;
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MCAL_USART_SetPins+0xa8>)
 8001caa:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART1_Config;
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <MCAL_USART_SetPins+0xac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e022      	b.n	8001cfa <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART2){
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a20      	ldr	r2, [pc, #128]	; (8001d38 <MCAL_USART_SetPins+0xb0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10d      	bne.n	8001cd8 <MCAL_USART_SetPins+0x50>
		TX_PIN=GPIO_Pin_2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_3;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <MCAL_USART_SetPins+0xa8>)
 8001cce:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART2_Config;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MCAL_USART_SetPins+0xb4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e010      	b.n	8001cfa <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART3){
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <MCAL_USART_SetPins+0xb8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10c      	bne.n	8001cfa <MCAL_USART_SetPins+0x72>
		TX_PIN=GPIO_Pin_10;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_11;
 8001ce4:	230b      	movs	r3, #11
 8001ce6:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_13;
 8001ce8:	230d      	movs	r3, #13
 8001cea:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_14;
 8001cec:	230e      	movs	r3, #14
 8001cee:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOB;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MCAL_USART_SetPins+0xbc>)
 8001cf2:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART3_Config;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MCAL_USART_SetPins+0xc0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]

	}
	//from alternative pin table for LQF and see recommended gpio pins configuration table

	pincfg.GPIO_Pin_Number = TX_PIN ;
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 8001cfe:	2309      	movs	r3, #9
 8001d00:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	4619      	mov	r1, r3
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f000 f8c9 	bl	8001ea0 <MCAL_GPIO_Init>

	pincfg.GPIO_Pin_Number = RX_PIN ;
 8001d0e:	7cbb      	ldrb	r3, [r7, #18]
 8001d10:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_INPUT_F;
 8001d12:	2304      	movs	r3, #4
 8001d14:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6978      	ldr	r0, [r7, #20]
 8001d1e:	f000 f8bf 	bl	8001ea0 <MCAL_GPIO_Init>
		pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
		MCAL_GPIO_Init(GPIOx, &pincfg) ;
	}


}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40010800 	.word	0x40010800
 8001d34:	2000030c 	.word	0x2000030c
 8001d38:	40004400 	.word	0x40004400
 8001d3c:	2000034c 	.word	0x2000034c
 8001d40:	40004800 	.word	0x40004800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	20000350 	.word	0x20000350

08001d4c <MCAL_USART_Send>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -Should initialize UART First
 *
 ********************************************************************************************************************/
void MCAL_USART_Send(USART_t *USARTx , uint16_t *pTxBuffer , enum Polling_Mechanism PollingEn ){
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]

	UART_Config_t * UARTx_Config;
	if(USARTx == USART1)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <MCAL_USART_Send+0x64>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d103      	bne.n	8001d6a <MCAL_USART_Send+0x1e>
	{
		UARTx_Config=Global_UART1_Config;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MCAL_USART_Send+0x68>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00e      	b.n	8001d88 <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART2){
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MCAL_USART_Send+0x6c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d103      	bne.n	8001d7a <MCAL_USART_Send+0x2e>
		UARTx_Config=Global_UART2_Config;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MCAL_USART_Send+0x70>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e006      	b.n	8001d88 <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART3){
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <MCAL_USART_Send+0x74>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d102      	bne.n	8001d88 <MCAL_USART_Send+0x3c>
		UARTx_Config=Global_UART3_Config;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MCAL_USART_Send+0x78>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	617b      	str	r3, [r7, #20]
	}
	//wait until TXE is set Transmit data register empty
	if(PollingEn==Enable)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <MCAL_USART_Send+0x50>
		while(!(USARTx->SR &(1<<7)));
 8001d8e:	bf00      	nop
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f9      	beq.n	8001d90 <MCAL_USART_Send+0x44>
	{
		USARTx->DR = (*pTxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer&(uint8_t)0xFF);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]
	}
}
 8001da6:	bf00      	nop
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40013800 	.word	0x40013800
 8001db4:	2000030c 	.word	0x2000030c
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	2000034c 	.word	0x2000034c
 8001dc0:	40004800 	.word	0x40004800
 8001dc4:	20000350 	.word	0x20000350

08001dc8 <MCAL_USART_Recieve>:
 *		param[in]         -PtxBuffer: the recieved buffer
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -none																										*
 ********************************************************************************************************************/
void MCAL_USART_Recieve(USART_t *USARTx , uint16_t *pTxBuffer , enum Polling_Mechanism PollingEn ){
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
	UART_Config_t * UARTx_Config;
	if(USARTx == USART1)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <MCAL_USART_Recieve+0x84>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d103      	bne.n	8001de6 <MCAL_USART_Recieve+0x1e>
	{
		UARTx_Config=Global_UART1_Config;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MCAL_USART_Recieve+0x88>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00e      	b.n	8001e04 <MCAL_USART_Recieve+0x3c>

	}else if(USARTx == USART2){
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <MCAL_USART_Recieve+0x8c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d103      	bne.n	8001df6 <MCAL_USART_Recieve+0x2e>
		UARTx_Config=Global_UART2_Config;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MCAL_USART_Recieve+0x90>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e006      	b.n	8001e04 <MCAL_USART_Recieve+0x3c>

	}else if(USARTx == USART3){
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <MCAL_USART_Recieve+0x94>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d102      	bne.n	8001e04 <MCAL_USART_Recieve+0x3c>
		UARTx_Config=Global_UART3_Config;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MCAL_USART_Recieve+0x98>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
	}
	//wait until RXNE is set
	if (PollingEn == Enable)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <MCAL_USART_Recieve+0x50>
	{
		while(!(USARTx->SR&(1<<5)));
 8001e0a:	bf00      	nop
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f9      	beq.n	8001e0c <MCAL_USART_Recieve+0x44>
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0xFF);
		}
	}
	else //8 bit data
	{
		if(UARTx_Config->Parity == USART_Parity_None)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	7a5b      	ldrb	r3, [r3, #9]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <MCAL_USART_Recieve+0x68>
		{
			//no parity so all 9bits are data
			*((uint16_t*)pTxBuffer) = (USARTx->DR   & (uint8_t)0xFF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	801a      	strh	r2, [r3, #0]
		}else{
			//if parity is used so 8bit is data and the last one is parity
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 8001e2e:	e007      	b.n	8001e40 <MCAL_USART_Recieve+0x78>
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0x7F);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	801a      	strh	r2, [r3, #0]
}
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	2000030c 	.word	0x2000030c
 8001e54:	40004400 	.word	0x40004400
 8001e58:	2000034c 	.word	0x2000034c
 8001e5c:	40004800 	.word	0x40004800
 8001e60:	20000350 	.word	0x20000350

08001e64 <USART1_IRQHandler>:
	}


//ISR
void USART1_IRQHandler()
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	Global_UART1_Config->P_IRQ_CallBack();
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <USART1_IRQHandler+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	4798      	blx	r3
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000030c 	.word	0x2000030c

08001e78 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	Global_UART2_Config->P_IRQ_CallBack();
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <USART2_IRQHandler+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	4798      	blx	r3
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000034c 	.word	0x2000034c

08001e8c <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	Global_UART3_Config->P_IRQ_CallBack();
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <USART3_IRQHandler+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	4798      	blx	r3
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000350 	.word	0x20000350

08001ea0 <MCAL_GPIO_Init>:
* @param [out] -	None
* @retval -			None
* Note-				STM32F103C6 MCU has PORTS A,B,C,D,E
* 					While LQFP84 Has only A,B and Part of C,D
*/
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t* pinconfig){
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
	//CRL used for pins from 0:7
	if((pinconfig->GPIO_Pin_Number)*4<32){
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	2b1f      	cmp	r3, #31
 8001eb2:	dc19      	bgt.n	8001ee8 <MCAL_GPIO_Init+0x48>
		GPIOx->CRL &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	7852      	ldrb	r2, [r2, #1]
 8001ebc:	0092      	lsls	r2, r2, #2
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	43d2      	mvns	r2, r2
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	7852      	ldrb	r2, [r2, #1]
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e01a      	b.n	8001f1e <MCAL_GPIO_Init+0x7e>
	}//CRH used to configure pins 8:15
	else{
		GPIOx->CRH &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4-32));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	7852      	ldrb	r2, [r2, #1]
 8001ef0:	3a08      	subs	r2, #8
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	43d2      	mvns	r2, r2
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4-32));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	7812      	ldrb	r2, [r2, #0]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	7852      	ldrb	r2, [r2, #1]
 8001f10:	3a08      	subs	r2, #8
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	605a      	str	r2, [r3, #4]
	}
	/*Incase of Input Pull Down ODR should be set for the specific pin*/
	if (pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b18      	cmp	r3, #24
 8001f24:	d109      	bne.n	8001f3a <MCAL_GPIO_Init+0x9a>
		GPIOx->ODR |=(1<<pinconfig->GPIO_Pin_Number);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	7852      	ldrb	r2, [r2, #1]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	2201      	movs	r2, #1
 8001f32:	408a      	lsls	r2, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60da      	str	r2, [r3, #12]

}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <MCAL_GPIO_ReadPIN>:
* @brief -			Read the Value of A Specific pin
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @retval -			value of the pin
* Note-				None
*/
uint8_t MCAL_GPIO_ReadPIN(GPIO_t *GPIOx, uint8_t Pin_Number){
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t value=(GPIOx->IDR>>Pin_Number &(0x1));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
	return value;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <MCAL_GPIO_ReadPort>:
* @brief -			Read the Value of A Specific port
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @retval -			value of the port
* Note-				None
*/
uint16_t MCAL_GPIO_ReadPort(GPIO_t *GPIOx){
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return (uint16_t)GPIOx->IDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	b29b      	uxth	r3, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <MCAL_GPIO_WritePort>:
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @param [out] -	None
* @retval -			None
* Note-				None
*/
void MCAL_GPIO_WritePort(GPIO_t *GPIOx, uint16_t value){
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR= value;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <MCAL_GPIO_WritePin>:
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @param [out] -	None
* @retval -			None
* Note-				None
*/
void MCAL_GPIO_WritePin(GPIO_t *GPIOx, uint8_t Pin_Number,uint8_t value){
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	70fb      	strb	r3, [r7, #3]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	70bb      	strb	r3, [r7, #2]
	if(!value)
 8001fb2:	78bb      	ldrb	r3, [r7, #2]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <MCAL_GPIO_WritePin+0x2c>
		GPIOx->ODR &=~(1<<Pin_Number);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
	else
		GPIOx->ODR |=(1<<Pin_Number);

}
 8001fcc:	e008      	b.n	8001fe0 <MCAL_GPIO_WritePin+0x3e>
		GPIOx->ODR |=(1<<Pin_Number);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60da      	str	r2, [r3, #12]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
	...

08001fec <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <Timer2_init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <Timer2_init+0x40>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <Timer2_init+0x44>)
 8001ffe:	2207      	movs	r2, #7
 8002000:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <Timer2_init+0x48>)
 8002004:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002008:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 800200a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800201a:	bf00      	nop
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <Timer2_init+0x4c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0fb      	beq.n	800201c <Timer2_init+0x30>
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	4002101c 	.word	0x4002101c
 8002030:	40000028 	.word	0x40000028
 8002034:	4000002c 	.word	0x4000002c
 8002038:	40000010 	.word	0x40000010

0800203c <dus>:

void dus(int us)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <dus+0x24>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 800204a:	bf00      	nop
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <dus+0x24>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d3fa      	bcc.n	800204c <dus+0x10>
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40000024 	.word	0x40000024

08002064 <__libc_init_array>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	2500      	movs	r5, #0
 8002068:	4e0c      	ldr	r6, [pc, #48]	; (800209c <__libc_init_array+0x38>)
 800206a:	4c0d      	ldr	r4, [pc, #52]	; (80020a0 <__libc_init_array+0x3c>)
 800206c:	1ba4      	subs	r4, r4, r6
 800206e:	10a4      	asrs	r4, r4, #2
 8002070:	42a5      	cmp	r5, r4
 8002072:	d109      	bne.n	8002088 <__libc_init_array+0x24>
 8002074:	f000 f826 	bl	80020c4 <_init>
 8002078:	2500      	movs	r5, #0
 800207a:	4e0a      	ldr	r6, [pc, #40]	; (80020a4 <__libc_init_array+0x40>)
 800207c:	4c0a      	ldr	r4, [pc, #40]	; (80020a8 <__libc_init_array+0x44>)
 800207e:	1ba4      	subs	r4, r4, r6
 8002080:	10a4      	asrs	r4, r4, #2
 8002082:	42a5      	cmp	r5, r4
 8002084:	d105      	bne.n	8002092 <__libc_init_array+0x2e>
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800208c:	4798      	blx	r3
 800208e:	3501      	adds	r5, #1
 8002090:	e7ee      	b.n	8002070 <__libc_init_array+0xc>
 8002092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002096:	4798      	blx	r3
 8002098:	3501      	adds	r5, #1
 800209a:	e7f2      	b.n	8002082 <__libc_init_array+0x1e>
 800209c:	0800216c 	.word	0x0800216c
 80020a0:	0800216c 	.word	0x0800216c
 80020a4:	0800216c 	.word	0x0800216c
 80020a8:	08002170 	.word	0x08002170

080020ac <memcpy>:
 80020ac:	b510      	push	{r4, lr}
 80020ae:	1e43      	subs	r3, r0, #1
 80020b0:	440a      	add	r2, r1
 80020b2:	4291      	cmp	r1, r2
 80020b4:	d100      	bne.n	80020b8 <memcpy+0xc>
 80020b6:	bd10      	pop	{r4, pc}
 80020b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020c0:	e7f7      	b.n	80020b2 <memcpy+0x6>
	...

080020c4 <_init>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	bf00      	nop
 80020c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ca:	bc08      	pop	{r3}
 80020cc:	469e      	mov	lr, r3
 80020ce:	4770      	bx	lr

080020d0 <_fini>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	bf00      	nop
 80020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d6:	bc08      	pop	{r3}
 80020d8:	469e      	mov	lr, r3
 80020da:	4770      	bx	lr
