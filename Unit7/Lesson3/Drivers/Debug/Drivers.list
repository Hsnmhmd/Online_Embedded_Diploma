
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080003fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  0800040c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800040c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001834  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000392  00000000  00000000  0002186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000388  00000000  00000000  00021bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b0  00000000  00000000  00021f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00022038  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000090b  00000000  00000000  000220c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000d6b  00000000  00000000  000229cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000089ca  00000000  00000000  00023736  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c100  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001e8  00000000  00000000  0002c17c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	080003dc 	.word	0x080003dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	080003dc 	.word	0x080003dc

08000170 <GPIO_init>:

GPIO_PinConfig_t GPIOA13={GPIO_MODE_INPUT_F,13};
GPIO_PinConfig_t GPIOA1={GPIO_MODE_INPUT_F,1};
GPIO_PinConfig_t GPIOB13={GPIO_MODE_OUTPUT_PP_10M,13};
GPIO_PinConfig_t GPIOB1={GPIO_MODE_OUTPUT_PP_10M,1};
void GPIO_init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/*pin 13 PA as FLOATING INPUT*/
	MCAL_GPIO_Init(GPIOA, &GPIOA13);
 8000174:	4908      	ldr	r1, [pc, #32]	; (8000198 <GPIO_init+0x28>)
 8000176:	4809      	ldr	r0, [pc, #36]	; (800019c <GPIO_init+0x2c>)
 8000178:	f000 f893 	bl	80002a2 <MCAL_GPIO_Init>

	/*pin 1 PA as FLOATING INPUT*/
	MCAL_GPIO_Init(GPIOA, &GPIOA1);
 800017c:	4908      	ldr	r1, [pc, #32]	; (80001a0 <GPIO_init+0x30>)
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <GPIO_init+0x2c>)
 8000180:	f000 f88f 	bl	80002a2 <MCAL_GPIO_Init>
	/*pin 13 PB as GENERAL OUTPUT PUSH PULL 10MHZ*/
	MCAL_GPIO_Init(GPIOB, &GPIOB13);
 8000184:	4907      	ldr	r1, [pc, #28]	; (80001a4 <GPIO_init+0x34>)
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <GPIO_init+0x38>)
 8000188:	f000 f88b 	bl	80002a2 <MCAL_GPIO_Init>
	/*pin 1 PA as GENERAL O/P PUSH PULL 10 MHZ*/
	MCAL_GPIO_Init(GPIOB, &GPIOB1);
 800018c:	4907      	ldr	r1, [pc, #28]	; (80001ac <GPIO_init+0x3c>)
 800018e:	4806      	ldr	r0, [pc, #24]	; (80001a8 <GPIO_init+0x38>)
 8000190:	f000 f887 	bl	80002a2 <MCAL_GPIO_Init>

}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	40010800 	.word	0x40010800
 80001a0:	20000004 	.word	0x20000004
 80001a4:	20000008 	.word	0x20000008
 80001a8:	40010c00 	.word	0x40010c00
 80001ac:	2000000c 	.word	0x2000000c

080001b0 <CLOCK_init>:
void CLOCK_init(void){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	/*clock init for GPIOA */
	RCC_GPIOA_CLK_EN();
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <CLOCK_init+0x24>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <CLOCK_init+0x24>)
 80001ba:	f043 0304 	orr.w	r3, r3, #4
 80001be:	6193      	str	r3, [r2, #24]
	/*clock init for GPIOB */
	RCC_GPIOB_CLK_EN();
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <CLOCK_init+0x24>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a03      	ldr	r2, [pc, #12]	; (80001d4 <CLOCK_init+0x24>)
 80001c6:	f043 0308 	orr.w	r3, r3, #8
 80001ca:	6193      	str	r3, [r2, #24]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40021000 	.word	0x40021000

080001d8 <main>:


int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	CLOCK_init();
 80001de:	f7ff ffe7 	bl	80001b0 <CLOCK_init>
	GPIO_init();
 80001e2:	f7ff ffc5 	bl	8000170 <GPIO_init>

	/*  Loop forever */
	for(;;){
		/*Single Pressing for PA1*/
		if(!MCAL_GPIO_ReadPIN(GPIOA, 1)){
 80001e6:	2101      	movs	r1, #1
 80001e8:	4817      	ldr	r0, [pc, #92]	; (8000248 <main+0x70>)
 80001ea:	f000 f8ac 	bl	8000346 <MCAL_GPIO_ReadPIN>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d114      	bne.n	800021e <main+0x46>
			MCAL_GPIO_TogglePin(GPIOB, 1);
 80001f4:	2101      	movs	r1, #1
 80001f6:	4815      	ldr	r0, [pc, #84]	; (800024c <main+0x74>)
 80001f8:	f000 f8b7 	bl	800036a <MCAL_GPIO_TogglePin>
			for(int i=0;i<200;i++){}
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e002      	b.n	8000208 <main+0x30>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3301      	adds	r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2bc7      	cmp	r3, #199	; 0xc7
 800020c:	ddf9      	ble.n	8000202 <main+0x2a>
			while(!MCAL_GPIO_ReadPIN(GPIOA, 1)){}
 800020e:	bf00      	nop
 8000210:	2101      	movs	r1, #1
 8000212:	480d      	ldr	r0, [pc, #52]	; (8000248 <main+0x70>)
 8000214:	f000 f897 	bl	8000346 <MCAL_GPIO_ReadPIN>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f8      	beq.n	8000210 <main+0x38>
		}
		/*Multi PRessing*/
		/*Single Pressing for PA1*/
		if(MCAL_GPIO_ReadPIN(GPIOA, 13)){
 800021e:	210d      	movs	r1, #13
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <main+0x70>)
 8000222:	f000 f890 	bl	8000346 <MCAL_GPIO_ReadPIN>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0dc      	beq.n	80001e6 <main+0xe>
			MCAL_GPIO_TogglePin(GPIOB, 13);
 800022c:	210d      	movs	r1, #13
 800022e:	4807      	ldr	r0, [pc, #28]	; (800024c <main+0x74>)
 8000230:	f000 f89b 	bl	800036a <MCAL_GPIO_TogglePin>
			for(int i=0;i<200;i++){}
 8000234:	2300      	movs	r3, #0
 8000236:	603b      	str	r3, [r7, #0]
 8000238:	e002      	b.n	8000240 <main+0x68>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	3301      	adds	r3, #1
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	2bc7      	cmp	r3, #199	; 0xc7
 8000244:	ddf9      	ble.n	800023a <main+0x62>
		if(!MCAL_GPIO_ReadPIN(GPIOA, 1)){
 8000246:	e7ce      	b.n	80001e6 <main+0xe>
 8000248:	40010800 	.word	0x40010800
 800024c:	40010c00 	.word	0x40010c00

08000250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000252:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000258:	480c      	ldr	r0, [pc, #48]	; (800028c <LoopForever+0x6>)
  ldr r1, =_edata
 800025a:	490d      	ldr	r1, [pc, #52]	; (8000290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <LoopForever+0xe>)
  movs r3, #0
 800025e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000260:	e002      	b.n	8000268 <LoopCopyDataInit>

08000262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000266:	3304      	adds	r3, #4

08000268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800026c:	d3f9      	bcc.n	8000262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000270:	4c0a      	ldr	r4, [pc, #40]	; (800029c <LoopForever+0x16>)
  movs r3, #0
 8000272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000274:	e001      	b.n	800027a <LoopFillZerobss>

08000276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000278:	3204      	adds	r2, #4

0800027a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800027c:	d3fb      	bcc.n	8000276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027e:	f000 f889 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000282:	f7ff ffa9 	bl	80001d8 <main>

08000286 <LoopForever>:

LoopForever:
    b LoopForever
 8000286:	e7fe      	b.n	8000286 <LoopForever>
  ldr   r0, =_estack
 8000288:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000290:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000294:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000298:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800029c:	2000002c 	.word	0x2000002c

080002a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_2_IRQHandler>

080002a2 <MCAL_GPIO_Init>:
* @param [out] -	None
* @retval -			None
* Note-				STM32F103C6 MCU has PORTS A,B,C,D,E
* 					While LQFP84 Has only A,B and Part of C,D
*/
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t* pinconfig){
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
	//CRL used for pins from 0:7
	if((pinconfig->GPIO_Pin_Number)*4<32){
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	785b      	ldrb	r3, [r3, #1]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	2b1f      	cmp	r3, #31
 80002b4:	dc19      	bgt.n	80002ea <MCAL_GPIO_Init+0x48>
		GPIOx->CRL &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4));
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	7852      	ldrb	r2, [r2, #1]
 80002be:	0092      	lsls	r2, r2, #2
 80002c0:	210f      	movs	r1, #15
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	43d2      	mvns	r2, r2
 80002c8:	401a      	ands	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4));
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	4611      	mov	r1, r2
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	7852      	ldrb	r2, [r2, #1]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	431a      	orrs	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	e01a      	b.n	8000320 <MCAL_GPIO_Init+0x7e>
	}//CRH used to configure pins 8:15
	else{
		GPIOx->CRH &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4-32));
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	7852      	ldrb	r2, [r2, #1]
 80002f2:	3a08      	subs	r2, #8
 80002f4:	0092      	lsls	r2, r2, #2
 80002f6:	210f      	movs	r1, #15
 80002f8:	fa01 f202 	lsl.w	r2, r1, r2
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4-32));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	4611      	mov	r1, r2
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	7852      	ldrb	r2, [r2, #1]
 8000312:	3a08      	subs	r2, #8
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	fa01 f202 	lsl.w	r2, r1, r2
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	605a      	str	r2, [r3, #4]
	}
	/*Incase of Input Pull Down ODR should be set for the specific pin*/
	if (pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b08      	cmp	r3, #8
 8000326:	d109      	bne.n	800033c <MCAL_GPIO_Init+0x9a>
		GPIOx->ODR |=(1<<pinconfig->GPIO_Pin_Number);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	7852      	ldrb	r2, [r2, #1]
 8000330:	4611      	mov	r1, r2
 8000332:	2201      	movs	r2, #1
 8000334:	408a      	lsls	r2, r1
 8000336:	431a      	orrs	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	60da      	str	r2, [r3, #12]

}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr

08000346 <MCAL_GPIO_ReadPIN>:
* @brief -			Read the Value of A Specific pin
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @retval -			value of the pin
* Note-				None
*/
uint8_t MCAL_GPIO_ReadPIN(GPIO_t *GPIOx, uint8_t Pin_Number){
 8000346:	b480      	push	{r7}
 8000348:	b085      	sub	sp, #20
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	460b      	mov	r3, r1
 8000350:	70fb      	strb	r3, [r7, #3]
	uint8_t value=(GPIOx->IDR>>Pin_Number);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689a      	ldr	r2, [r3, #8]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	fa22 f303 	lsr.w	r3, r2, r3
 800035c:	73fb      	strb	r3, [r7, #15]
	return value;
 800035e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000360:	4618      	mov	r0, r3
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr

0800036a <MCAL_GPIO_TogglePin>:
* @param [in] -		GPIOx Where x  Could Be(A,B,C,D,E)
* @param [out] -	None
* @retval -			None
* Note-				None
*/
void MCAL_GPIO_TogglePin(GPIO_t *GPIOx, uint8_t Pin_Number){
 800036a:	b480      	push	{r7}
 800036c:	b083      	sub	sp, #12
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	460b      	mov	r3, r1
 8000374:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR ^=(1<<Pin_Number);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	78fa      	ldrb	r2, [r7, #3]
 800037c:	2101      	movs	r1, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	405a      	eors	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	60da      	str	r2, [r3, #12]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	2500      	movs	r5, #0
 8000398:	4e0c      	ldr	r6, [pc, #48]	; (80003cc <__libc_init_array+0x38>)
 800039a:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039c:	1ba4      	subs	r4, r4, r6
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	f000 f81a 	bl	80003dc <_init>
 80003a8:	2500      	movs	r5, #0
 80003aa:	4e0a      	ldr	r6, [pc, #40]	; (80003d4 <__libc_init_array+0x40>)
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <__libc_init_array+0x44>)
 80003ae:	1ba4      	subs	r4, r4, r6
 80003b0:	10a4      	asrs	r4, r4, #2
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003bc:	4798      	blx	r3
 80003be:	3501      	adds	r5, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003c6:	4798      	blx	r3
 80003c8:	3501      	adds	r5, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
