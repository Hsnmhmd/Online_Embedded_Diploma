
LAB1_TOGGLE_BLUEBILL_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a1e  00000000  00000000  00010375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ae  00000000  00000000  00010d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000c0  00000000  00000000  00010f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000058  00000000  00000000  00011008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00011060  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001977  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000611  00000000  00000000  00012a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076ba  00000000  00000000  00013028  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001a6e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000009c  00000000  00000000  0001a760  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800032c 	.word	0x0800032c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800032c 	.word	0x0800032c

08000170 <GPIO_init>:
#define GPIOB_CRH		*(vuint32_t *)(GPIOB_BASE + 0x04)
#define GPIOB_CRL		*(vuint32_t *)(GPIOB_BASE + 0x00)
#define GPIOB_ODR		*(vuint32_t *)(GPIOB_BASE + 0x0C)
#define GPIOB_IDR		*(vuint32_t *)(GPIOB_BASE + 0x08)

void GPIO_init(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*pin 13 PA as FLOATING INPUT*/
	GPIOA_CRH &= 0xFF0FFFFF;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <GPIO_init+0x6c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <GPIO_init+0x6c>)
 800017a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800017e:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00800000;
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <GPIO_init+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <GPIO_init+0x6c>)
 8000186:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800018a:	6013      	str	r3, [r2, #0]
	/*pin 1 PA as FLOATING INPUT*/
	GPIOA_CRL &= 0xFFFFFF0F;
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <GPIO_init+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <GPIO_init+0x70>)
 8000192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |= 0x00000080;
 8000198:	4b11      	ldr	r3, [pc, #68]	; (80001e0 <GPIO_init+0x70>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a10      	ldr	r2, [pc, #64]	; (80001e0 <GPIO_init+0x70>)
 800019e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001a2:	6013      	str	r3, [r2, #0]
	/*pin 13 PB as GENERAL OUTPUT PUSH PULL 10MHZ*/
	GPIOB_CRH &= 0xFF0FFFFF;
 80001a4:	4b0f      	ldr	r3, [pc, #60]	; (80001e4 <GPIO_init+0x74>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0e      	ldr	r2, [pc, #56]	; (80001e4 <GPIO_init+0x74>)
 80001aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ae:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= 0x00100000;
 80001b0:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <GPIO_init+0x74>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0b      	ldr	r2, [pc, #44]	; (80001e4 <GPIO_init+0x74>)
 80001b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001ba:	6013      	str	r3, [r2, #0]
	/*pin 1 PA as GENERAL O/P PUSH PULL 10 MHZ*/
	GPIOB_CRL &= 0xFFFFFF0F;
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <GPIO_init+0x78>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a09      	ldr	r2, [pc, #36]	; (80001e8 <GPIO_init+0x78>)
 80001c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |= 0x00000010;
 80001c8:	4b07      	ldr	r3, [pc, #28]	; (80001e8 <GPIO_init+0x78>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <GPIO_init+0x78>)
 80001ce:	f043 0310 	orr.w	r3, r3, #16
 80001d2:	6013      	str	r3, [r2, #0]

}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40010804 	.word	0x40010804
 80001e0:	40010800 	.word	0x40010800
 80001e4:	40010c04 	.word	0x40010c04
 80001e8:	40010c00 	.word	0x40010c00

080001ec <CLOCK_init>:
void CLOCK_init(void){
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	/*clock init for GPIOA */
	RCC_APB2ENR |=1<<2;
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <CLOCK_init+0x24>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <CLOCK_init+0x24>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6013      	str	r3, [r2, #0]
	/*clock init for GPIOB */
	RCC_APB2ENR |=1<<3;
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <CLOCK_init+0x24>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a03      	ldr	r2, [pc, #12]	; (8000210 <CLOCK_init+0x24>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6013      	str	r3, [r2, #0]
}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	40021018 	.word	0x40021018

08000214 <main>:


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
	CLOCK_init();
 800021a:	f7ff ffe7 	bl	80001ec <CLOCK_init>
	GPIO_init();
 800021e:	f7ff ffa7 	bl	8000170 <GPIO_init>

	/*  Loop forever */
	for(;;){
		/*Single Pressing for PA1*/
		if(!(GPIOA_IDR&(1<<1))){
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <main+0x74>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f003 0302 	and.w	r3, r3, #2
 800022a:	2b00      	cmp	r3, #0
 800022c:	d115      	bne.n	800025a <main+0x46>
			GPIOB_ODR ^=(1<<1);
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <main+0x78>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a16      	ldr	r2, [pc, #88]	; (800028c <main+0x78>)
 8000234:	f083 0302 	eor.w	r3, r3, #2
 8000238:	6013      	str	r3, [r2, #0]
			for(int i=0;i<200;i++){}
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
 800023e:	e002      	b.n	8000246 <main+0x32>
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3301      	adds	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2bc7      	cmp	r3, #199	; 0xc7
 800024a:	ddf9      	ble.n	8000240 <main+0x2c>
			while(!(GPIOA_IDR&(1<<1))){}
 800024c:	bf00      	nop
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <main+0x74>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f003 0302 	and.w	r3, r3, #2
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <main+0x3a>
		}
		/*Multi PRessing*/
		/*Single Pressing for PA1*/
		if((GPIOA_IDR&(1<<13))){
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <main+0x74>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0dd      	beq.n	8000222 <main+0xe>
			GPIOB_ODR ^=(1<<13);
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0x78>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4a08      	ldr	r2, [pc, #32]	; (800028c <main+0x78>)
 800026c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000270:	6013      	str	r3, [r2, #0]
			for(int i=0;i<200;i++){}
 8000272:	2300      	movs	r3, #0
 8000274:	603b      	str	r3, [r7, #0]
 8000276:	e002      	b.n	800027e <main+0x6a>
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	3301      	adds	r3, #1
 800027c:	603b      	str	r3, [r7, #0]
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	2bc7      	cmp	r3, #199	; 0xc7
 8000282:	ddf9      	ble.n	8000278 <main+0x64>
		if(!(GPIOA_IDR&(1<<1))){
 8000284:	e7cd      	b.n	8000222 <main+0xe>
 8000286:	bf00      	nop
 8000288:	40010808 	.word	0x40010808
 800028c:	40010c0c 	.word	0x40010c0c

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffa7 	bl	8000214 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC1_2_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2500      	movs	r5, #0
 80002e8:	4e0c      	ldr	r6, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a5      	cmp	r5, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	f000 f81a 	bl	800032c <_init>
 80002f8:	2500      	movs	r5, #0
 80002fa:	4e0a      	ldr	r6, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a5      	cmp	r5, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800030c:	4798      	blx	r3
 800030e:	3501      	adds	r5, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000316:	4798      	blx	r3
 8000318:	3501      	adds	r5, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
