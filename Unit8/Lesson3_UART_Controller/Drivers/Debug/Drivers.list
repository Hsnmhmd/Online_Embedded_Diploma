
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000094c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a94  08000a9c  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000a9c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000a9c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fef  00000000  00000000  00010ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009d0  00000000  00000000  00014ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a28  00000000  00000000  00015484  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00015eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00016078  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000012e5  00000000  00000000  000161e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027c6  00000000  00000000  000174cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b17f  00000000  00000000  00019c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024e12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000570  00000000  00000000  00024e90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a64 	.word	0x08000a64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a64 	.word	0x08000a64

08000170 <Clock_Init>:
#include<stdio.h>
#include <lcd.h>
#include"keypad.h"

void Clock_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
}



int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0

	UART_Config_t USART_ConFig ;
	Clock_Init();
 80001aa:	f7ff ffe1 	bl	8000170 <Clock_Init>

	USART_ConFig.BaudRate= USART_BaudRate_9600;
 80001ae:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80001b2:	60bb      	str	r3, [r7, #8]
	USART_ConFig.HWFlowCtl=USART_HwFlowCtl_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
	USART_ConFig.IRQ_Enable=USART_IRQ_Enable_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	743b      	strb	r3, [r7, #16]
	USART_ConFig.P_IRQ_CallBack = NULL ;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]
	USART_ConFig.Parity = USART_Parity_None ;
 80001c0:	2300      	movs	r3, #0
 80001c2:	737b      	strb	r3, [r7, #13]
	USART_ConFig.Payload_Length=USART_Payload_Length8;
 80001c4:	2300      	movs	r3, #0
 80001c6:	733b      	strb	r3, [r7, #12]
	USART_ConFig.StopBits=USART_StopBits_1 ;
 80001c8:	2300      	movs	r3, #0
 80001ca:	73bb      	strb	r3, [r7, #14]
	USART_ConFig.USART_Mode=USART_MODE_TX_RX ;
 80001cc:	230c      	movs	r3, #12
 80001ce:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(&USART_ConFig,USART1);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <main+0x54>)
 80001d4:	4618      	mov	r0, r3
 80001d6:	f000 fa19 	bl	800060c <MCAL_USART_Init>
	MCAL_USART_SetPins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fac0 	bl	8000760 <MCAL_USART_SetPins>
	while(1)
	{

		MCAL_USART_Recieve(USART1, &ch, Enable);
 80001e0:	2200      	movs	r2, #0
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fb5b 	bl	80008a0 <MCAL_USART_Recieve>
		MCAL_USART_Send(USART1, &ch, Enable);
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fb18 	bl	8000824 <MCAL_USART_Send>
		MCAL_USART_Recieve(USART1, &ch, Enable);
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	2000001c 	.word	0x2000001c

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fbf5 	bl	8000a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	08000a9c 	.word	0x08000a9c
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	20000068 	.word	0x20000068

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_Disable;
	NVIC_IRQ40_EXTI10_15_Disable;
}


void EXTI0_IRQHandler(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//Clear Pending Register
	EXTI->PR |=(1<<0);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[0]();
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000020 	.word	0x20000020

08000278 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[1]();
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000020 	.word	0x20000020

0800029c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[2]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000020 	.word	0x20000020

080002c0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[3]();
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	20000020 	.word	0x20000020

080002e4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	20000020 	.word	0x20000020

08000308 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<5)){
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |=(1<<5);
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[5]();
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<6)){
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |=(1<<6);
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[6]();
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<7)){
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |=(1<<7);
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[7]();
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<8)){
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |=(1<<8);
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[8]();
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<9)){
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |=(1<<9);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[9]();
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4798      	blx	r3
	}

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	20000020 	.word	0x20000020

080003b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<10)){
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |=(1<<10);
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a29      	ldr	r2, [pc, #164]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ca:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[10]();
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<11)){
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |=(1<<11);
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e8:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[11]();
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<12)){
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |=(1<<12);
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000406:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[12]();
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<13)){
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |=(1<<13);
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000424:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[13]();
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<14)){
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |=(1<<14);
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[14]();
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<15)){
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |=(1<<15);
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000460:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[15]();
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	4798      	blx	r3
	}
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010400 	.word	0x40010400
 8000470:	20000020 	.word	0x20000020

08000474 <MCAL_RCC_GetSYS_CLK>:
/*
 * ===============================================
 * APIs Supported by "MCAL RCC DRIVER"
 * ===============================================
 */
uint32_t MCAL_RCC_GetSYS_CLK(void){
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
	switch ( (RCC->CFGR >>2) &0b11 ){
 8000478:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	089b      	lsrs	r3, r3, #2
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	2b01      	cmp	r3, #1
 8000484:	d006      	beq.n	8000494 <MCAL_RCC_GetSYS_CLK+0x20>
 8000486:	2b01      	cmp	r3, #1
 8000488:	d302      	bcc.n	8000490 <MCAL_RCC_GetSYS_CLK+0x1c>
 800048a:	2b02      	cmp	r3, #2
 800048c:	d004      	beq.n	8000498 <MCAL_RCC_GetSYS_CLK+0x24>
 800048e:	e06e      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
	//HSI selected as system clock
	case 0:
		return HSI_RC_CLK;
 8000490:	4b3a      	ldr	r3, [pc, #232]	; (800057c <MCAL_RCC_GetSYS_CLK+0x108>)
 8000492:	e06c      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//HSE selected as system clock
	case 1:
		return HSE_CLK;
 8000494:	4b3a      	ldr	r3, [pc, #232]	; (8000580 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000496:	e06a      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//PLL selected as system clock
	case 2:
		switch ( (RCC->CFGR >>16) &0b1 ){
 8000498:	4b37      	ldr	r3, [pc, #220]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	0c1b      	lsrs	r3, r3, #16
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <MCAL_RCC_GetSYS_CLK+0x38>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d01e      	beq.n	80004e8 <MCAL_RCC_GetSYS_CLK+0x74>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
			}

			break;

		}break;
 80004aa:	e060      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
			if (((RCC->CFGR >>18)& 0b1111) ==15   )
 80004ac:	4b32      	ldr	r3, [pc, #200]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	0c9b      	lsrs	r3, r3, #18
 80004b2:	f003 030f 	and.w	r3, r3, #15
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d109      	bne.n	80004ce <MCAL_RCC_GetSYS_CLK+0x5a>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	0c9b      	lsrs	r3, r3, #18
 80004c0:	f003 030f 	and.w	r3, r3, #15
 80004c4:	3301      	adds	r3, #1
 80004c6:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80004c8:	fb02 f303 	mul.w	r3, r2, r3
 80004cc:	e04f      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	0c9b      	lsrs	r3, r3, #18
 80004d4:	f003 030f 	and.w	r3, r3, #15
 80004d8:	4a29      	ldr	r2, [pc, #164]	; (8000580 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80004da:	fb02 f303 	mul.w	r3, r2, r3
 80004de:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80004e2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80004e6:	e042      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
			if((RCC->CFGR >>17) &0b1){
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	0c5b      	lsrs	r3, r3, #17
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d01d      	beq.n	8000532 <MCAL_RCC_GetSYS_CLK+0xbe>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	0c9b      	lsrs	r3, r3, #18
 80004fc:	f003 030f 	and.w	r3, r3, #15
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d109      	bne.n	8000518 <MCAL_RCC_GetSYS_CLK+0xa4>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	0c9b      	lsrs	r3, r3, #18
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	3301      	adds	r3, #1
 8000510:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <MCAL_RCC_GetSYS_CLK+0x110>)
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	e02a      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	0c9b      	lsrs	r3, r3, #18
 800051e:	f003 030f 	and.w	r3, r3, #15
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MCAL_RCC_GetSYS_CLK+0x110>)
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 800052c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000530:	e01d      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	0c9b      	lsrs	r3, r3, #18
 8000538:	f003 030f 	and.w	r3, r3, #15
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d109      	bne.n	8000554 <MCAL_RCC_GetSYS_CLK+0xe0>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	0c9b      	lsrs	r3, r3, #18
 8000546:	f003 030f 	and.w	r3, r3, #15
 800054a:	3301      	adds	r3, #1
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <MCAL_RCC_GetSYS_CLK+0x10c>)
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	e00c      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	0c9b      	lsrs	r3, r3, #18
 800055a:	f003 030f 	and.w	r3, r3, #15
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000568:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800056c:	e7ff      	b.n	800056e <MCAL_RCC_GetSYS_CLK+0xfa>

	}

}
 800056e:	4618      	mov	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	007a1200 	.word	0x007a1200
 8000580:	003d0900 	.word	0x003d0900
 8000584:	001e8480 	.word	0x001e8480

08000588 <MCAL_RCC_GetHCLK>:
 * @param [in] -	none
 * @param [out] -	None
 * @retval -		Freq
 * Note-
 */
uint32_t MCAL_RCC_GetHCLK(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
	uint32_t test=(MCAL_RCC_GetSYS_CLK() >> AHBprescTable[( (RCC->CFGR >>4) &0b1111 )]);
 800058e:	f7ff ff71 	bl	8000474 <MCAL_RCC_GetSYS_CLK>
 8000592:	4601      	mov	r1, r0
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MCAL_RCC_GetHCLK+0x2c>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	f003 030f 	and.w	r3, r3, #15
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <MCAL_RCC_GetHCLK+0x30>)
 80005a0:	5cd3      	ldrb	r3, [r2, r3]
 80005a2:	fa21 f303 	lsr.w	r3, r1, r3
 80005a6:	607b      	str	r3, [r7, #4]
	return test;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	08000a84 	.word	0x08000a84

080005bc <MCAL_RCC_GetPCLK1>:
// bits 8 :10 PPRE1 APB1 prescaler
uint32_t MCAL_RCC_GetPCLK1(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>8) &0b111 )]);
 80005c0:	f7ff ffe2 	bl	8000588 <MCAL_RCC_GetHCLK>
 80005c4:	4601      	mov	r1, r0
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MCAL_RCC_GetPCLK1+0x20>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	0a1b      	lsrs	r3, r3, #8
 80005cc:	f003 0307 	and.w	r3, r3, #7
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <MCAL_RCC_GetPCLK1+0x24>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	08000a7c 	.word	0x08000a7c

080005e4 <MCAL_RCC_GetPCLK2>:
// bits 11 :13 PPRE1 APB2 prescaler
uint32_t MCAL_RCC_GetPCLK2(void){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>11) &0b111 )]);
 80005e8:	f7ff ffce 	bl	8000588 <MCAL_RCC_GetHCLK>
 80005ec:	4601      	mov	r1, r0
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MCAL_RCC_GetPCLK2+0x20>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	0adb      	lsrs	r3, r3, #11
 80005f4:	f003 0307 	and.w	r3, r3, #7
 80005f8:	4a03      	ldr	r2, [pc, #12]	; (8000608 <MCAL_RCC_GetPCLK2+0x24>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	08000a7c 	.word	0x08000a7c

0800060c <MCAL_USART_Init>:
 * @param [in] -	Cofiguration structure, usart instance
 * @param [out] -	None
 * @retval -			None
 * Note-
 */
void MCAL_USART_Init(UART_Config_t *UART_Config , USART_t* USARTx){
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	4a49      	ldr	r2, [pc, #292]	; (8000740 <MCAL_USART_Init+0x134>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10c      	bne.n	8000638 <MCAL_USART_Init+0x2c>
		RCC_USART1_CLK_EN();
 800061e:	4b49      	ldr	r3, [pc, #292]	; (8000744 <MCAL_USART_Init+0x138>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a48      	ldr	r2, [pc, #288]	; (8000744 <MCAL_USART_Init+0x138>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6193      	str	r3, [r2, #24]
		Global_UART1_Config=UART_Config;
 800062a:	4a47      	ldr	r2, [pc, #284]	; (8000748 <MCAL_USART_Init+0x13c>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK2();
 8000630:	f7ff ffd8 	bl	80005e4 <MCAL_RCC_GetPCLK2>
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	e020      	b.n	800067a <MCAL_USART_Init+0x6e>
	} else if (USARTx == USART2) {
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	4a44      	ldr	r2, [pc, #272]	; (800074c <MCAL_USART_Init+0x140>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d10c      	bne.n	800065a <MCAL_USART_Init+0x4e>
		RCC_USART2_CLK_EN();
 8000640:	4b40      	ldr	r3, [pc, #256]	; (8000744 <MCAL_USART_Init+0x138>)
 8000642:	69db      	ldr	r3, [r3, #28]
 8000644:	4a3f      	ldr	r2, [pc, #252]	; (8000744 <MCAL_USART_Init+0x138>)
 8000646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064a:	61d3      	str	r3, [r2, #28]
		Global_UART2_Config=UART_Config;
 800064c:	4a40      	ldr	r2, [pc, #256]	; (8000750 <MCAL_USART_Init+0x144>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8000652:	f7ff ffb3 	bl	80005bc <MCAL_RCC_GetPCLK1>
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	e00f      	b.n	800067a <MCAL_USART_Init+0x6e>
	} else if (USARTx == USART3) {
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	4a3d      	ldr	r2, [pc, #244]	; (8000754 <MCAL_USART_Init+0x148>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d10b      	bne.n	800067a <MCAL_USART_Init+0x6e>
		RCC_USART3_CLK_EN();
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MCAL_USART_Init+0x138>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a37      	ldr	r2, [pc, #220]	; (8000744 <MCAL_USART_Init+0x138>)
 8000668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800066c:	61d3      	str	r3, [r2, #28]
		Global_UART3_Config=UART_Config;
 800066e:	4a3a      	ldr	r2, [pc, #232]	; (8000758 <MCAL_USART_Init+0x14c>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8000674:	f7ff ffa2 	bl	80005bc <MCAL_RCC_GetPCLK1>
 8000678:	60f8      	str	r0, [r7, #12]
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	68db      	ldr	r3, [r3, #12]
 800067e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->USART_Mode;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	431a      	orrs	r2, r3
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Payload_Length;
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7a12      	ldrb	r2, [r2, #8]
 800069c:	431a      	orrs	r2, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Parity;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	7a52      	ldrb	r2, [r2, #9]
 80006aa:	431a      	orrs	r2, r3
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	60da      	str	r2, [r3, #12]

	USARTx->CR2 |=UART_Config->StopBits;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7a92      	ldrb	r2, [r2, #10]
 80006b8:	431a      	orrs	r2, r3
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	611a      	str	r2, [r3, #16]
	USARTx->CR3 |=UART_Config->HWFlowCtl;
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7ad2      	ldrb	r2, [r2, #11]
 80006c6:	431a      	orrs	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	615a      	str	r2, [r3, #20]

	BRR = USART_BRR_Register(pclk,UART_Config->BaudRate);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	609a      	str	r2, [r3, #8]

	if (UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7b1b      	ldrb	r3, [r3, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d026      	beq.n	8000738 <MCAL_USART_Init+0x12c>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable ;
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	7b12      	ldrb	r2, [r2, #12]
 80006f2:	431a      	orrs	r2, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTx == USART1)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MCAL_USART_Init+0x134>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <MCAL_USART_Init+0x102>
		{
			NVIC_IRQ37_USART1_Enable ;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MCAL_USART_Init+0x150>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <MCAL_USART_Init+0x150>)
 8000706:	f043 0320 	orr.w	r3, r3, #32
 800070a:	6013      	str	r3, [r2, #0]
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}

}
 800070c:	e014      	b.n	8000738 <MCAL_USART_Init+0x12c>
		else if (USARTx == USART2)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <MCAL_USART_Init+0x140>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <MCAL_USART_Init+0x118>
			NVIC_IRQ38_USART2_Enable ;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MCAL_USART_Init+0x150>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <MCAL_USART_Init+0x150>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6013      	str	r3, [r2, #0]
}
 8000722:	e009      	b.n	8000738 <MCAL_USART_Init+0x12c>
		else if (USARTx == USART3)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <MCAL_USART_Init+0x148>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d105      	bne.n	8000738 <MCAL_USART_Init+0x12c>
			NVIC_IRQ39_USART3_Enable ;
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MCAL_USART_Init+0x150>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <MCAL_USART_Init+0x150>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40013800 	.word	0x40013800
 8000744:	40021000 	.word	0x40021000
 8000748:	2000005c 	.word	0x2000005c
 800074c:	40004400 	.word	0x40004400
 8000750:	20000060 	.word	0x20000060
 8000754:	40004800 	.word	0x40004800
 8000758:	20000064 	.word	0x20000064
 800075c:	e000e104 	.word	0xe000e104

08000760 <MCAL_USART_SetPins>:
 *		param[in]         -USARTx :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/

void MCAL_USART_SetPins(USART_t *USARTx){
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	GPIO_t * GPIOx;
	uint8_t TX_PIN;
	uint8_t RX_PIN;
	uint8_t CTS_PIN;
	uint8_t RTS_PIN;
	if(USARTx == USART1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <MCAL_USART_SetPins+0xa4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d10d      	bne.n	800078c <MCAL_USART_SetPins+0x2c>
	{
		TX_PIN=GPIO_Pin_9;
 8000770:	2309      	movs	r3, #9
 8000772:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_10;
 8000774:	230a      	movs	r3, #10
 8000776:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_11;
 8000778:	230b      	movs	r3, #11
 800077a:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_12;
 800077c:	230c      	movs	r3, #12
 800077e:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MCAL_USART_SetPins+0xa8>)
 8000782:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART1_Config;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MCAL_USART_SetPins+0xac>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e022      	b.n	80007d2 <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART2){
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <MCAL_USART_SetPins+0xb0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d10d      	bne.n	80007b0 <MCAL_USART_SetPins+0x50>
		TX_PIN=GPIO_Pin_2;
 8000794:	2302      	movs	r3, #2
 8000796:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_3;
 8000798:	2303      	movs	r3, #3
 800079a:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_0;
 800079c:	2300      	movs	r3, #0
 800079e:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MCAL_USART_SetPins+0xa8>)
 80007a6:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART2_Config;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MCAL_USART_SetPins+0xb4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e010      	b.n	80007d2 <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART3){
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a19      	ldr	r2, [pc, #100]	; (8000818 <MCAL_USART_SetPins+0xb8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d10c      	bne.n	80007d2 <MCAL_USART_SetPins+0x72>
		TX_PIN=GPIO_Pin_10;
 80007b8:	230a      	movs	r3, #10
 80007ba:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_11;
 80007bc:	230b      	movs	r3, #11
 80007be:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_13;
 80007c0:	230d      	movs	r3, #13
 80007c2:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_14;
 80007c4:	230e      	movs	r3, #14
 80007c6:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOB;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MCAL_USART_SetPins+0xbc>)
 80007ca:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART3_Config;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MCAL_USART_SetPins+0xc0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	60fb      	str	r3, [r7, #12]

	}
	//from alternative pin table for LQF and see recommended gpio pins configuration table

	pincfg.GPIO_Pin_Number = TX_PIN ;
 80007d2:	7cfb      	ldrb	r3, [r7, #19]
 80007d4:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 80007d6:	2309      	movs	r3, #9
 80007d8:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4619      	mov	r1, r3
 80007e0:	6978      	ldr	r0, [r7, #20]
 80007e2:	f000 f8c9 	bl	8000978 <MCAL_GPIO_Init>

	pincfg.GPIO_Pin_Number = RX_PIN ;
 80007e6:	7cbb      	ldrb	r3, [r7, #18]
 80007e8:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_INPUT_F;
 80007ea:	2304      	movs	r3, #4
 80007ec:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	6978      	ldr	r0, [r7, #20]
 80007f6:	f000 f8bf 	bl	8000978 <MCAL_GPIO_Init>
		pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
		MCAL_GPIO_Init(GPIOx, &pincfg) ;
	}


}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40013800 	.word	0x40013800
 8000808:	40010800 	.word	0x40010800
 800080c:	2000005c 	.word	0x2000005c
 8000810:	40004400 	.word	0x40004400
 8000814:	20000060 	.word	0x20000060
 8000818:	40004800 	.word	0x40004800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	20000064 	.word	0x20000064

08000824 <MCAL_USART_Send>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -Should initialize UART First
 *
 ********************************************************************************************************************/
void MCAL_USART_Send(USART_t *USARTx , uint16_t *pTxBuffer , enum Polling_Mechanism PollingEn ){
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]

	UART_Config_t * UARTx_Config;
	if(USARTx == USART1)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MCAL_USART_Send+0x64>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d103      	bne.n	8000842 <MCAL_USART_Send+0x1e>
	{
		UARTx_Config=Global_UART1_Config;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MCAL_USART_Send+0x68>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e00e      	b.n	8000860 <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART2){
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MCAL_USART_Send+0x6c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d103      	bne.n	8000852 <MCAL_USART_Send+0x2e>
		UARTx_Config=Global_UART2_Config;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MCAL_USART_Send+0x70>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e006      	b.n	8000860 <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART3){
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4a10      	ldr	r2, [pc, #64]	; (8000898 <MCAL_USART_Send+0x74>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d102      	bne.n	8000860 <MCAL_USART_Send+0x3c>
		UARTx_Config=Global_UART3_Config;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MCAL_USART_Send+0x78>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	617b      	str	r3, [r7, #20]
	}
	//wait until TXE is set Transmit data register empty
	if(PollingEn==Enable)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d106      	bne.n	8000874 <MCAL_USART_Send+0x50>
		while(!(USARTx->SR &(1<<7)));
 8000866:	bf00      	nop
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f9      	beq.n	8000868 <MCAL_USART_Send+0x44>
	{
		USARTx->DR = (*pTxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer&(uint8_t)0xFF);
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	605a      	str	r2, [r3, #4]
	}
}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40013800 	.word	0x40013800
 800088c:	2000005c 	.word	0x2000005c
 8000890:	40004400 	.word	0x40004400
 8000894:	20000060 	.word	0x20000060
 8000898:	40004800 	.word	0x40004800
 800089c:	20000064 	.word	0x20000064

080008a0 <MCAL_USART_Recieve>:
 *		param[in]         -PtxBuffer: the recieved buffer
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -none																										*
 ********************************************************************************************************************/
void MCAL_USART_Recieve(USART_t *USARTx , uint16_t *pTxBuffer , enum Polling_Mechanism PollingEn ){
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	4613      	mov	r3, r2
 80008ac:	71fb      	strb	r3, [r7, #7]
	UART_Config_t * UARTx_Config;
	if(USARTx == USART1)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MCAL_USART_Recieve+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d103      	bne.n	80008be <MCAL_USART_Recieve+0x1e>
	{
		UARTx_Config=Global_UART1_Config;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MCAL_USART_Recieve+0x88>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e00e      	b.n	80008dc <MCAL_USART_Recieve+0x3c>

	}else if(USARTx == USART2){
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	4a1a      	ldr	r2, [pc, #104]	; (800092c <MCAL_USART_Recieve+0x8c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d103      	bne.n	80008ce <MCAL_USART_Recieve+0x2e>
		UARTx_Config=Global_UART2_Config;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MCAL_USART_Recieve+0x90>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e006      	b.n	80008dc <MCAL_USART_Recieve+0x3c>

	}else if(USARTx == USART3){
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MCAL_USART_Recieve+0x94>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d102      	bne.n	80008dc <MCAL_USART_Recieve+0x3c>
		UARTx_Config=Global_UART3_Config;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MCAL_USART_Recieve+0x98>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	617b      	str	r3, [r7, #20]
	}
	//wait until RXNE is set
	if (PollingEn == Enable)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d106      	bne.n	80008f0 <MCAL_USART_Recieve+0x50>
	{
		while(!(USARTx->SR&(1<<5)));
 80008e2:	bf00      	nop
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <MCAL_USART_Recieve+0x44>
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0xFF);
		}
	}
	else //8 bit data
	{
		if(UARTx_Config->Parity == USART_Parity_None)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	7a5b      	ldrb	r3, [r3, #9]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d107      	bne.n	8000908 <MCAL_USART_Recieve+0x68>
		{
			//no parity so all 9bits are data
			*((uint16_t*)pTxBuffer) = (USARTx->DR   & (uint8_t)0xFF);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	b29a      	uxth	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	801a      	strh	r2, [r3, #0]
		}else{
			//if parity is used so 8bit is data and the last one is parity
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0x7F);
		}
	}
}
 8000906:	e007      	b.n	8000918 <MCAL_USART_Recieve+0x78>
			*((uint16_t*)pTxBuffer) =( USARTx->DR & (uint8_t)0x7F);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	b29b      	uxth	r3, r3
 800090e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000912:	b29a      	uxth	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	801a      	strh	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	371c      	adds	r7, #28
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40013800 	.word	0x40013800
 8000928:	2000005c 	.word	0x2000005c
 800092c:	40004400 	.word	0x40004400
 8000930:	20000060 	.word	0x20000060
 8000934:	40004800 	.word	0x40004800
 8000938:	20000064 	.word	0x20000064

0800093c <USART1_IRQHandler>:
	}


//ISR
void USART1_IRQHandler()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	Global_UART1_Config->P_IRQ_CallBack();
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <USART1_IRQHandler+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	4798      	blx	r3
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000005c 	.word	0x2000005c

08000950 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	Global_UART2_Config->P_IRQ_CallBack( );
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <USART2_IRQHandler+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	4798      	blx	r3
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000060 	.word	0x20000060

08000964 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	Global_UART3_Config->P_IRQ_CallBack();
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <USART3_IRQHandler+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	4798      	blx	r3
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000064 	.word	0x20000064

08000978 <MCAL_GPIO_Init>:
* @param [out] -	None
* @retval -			None
* Note-				STM32F103C6 MCU has PORTS A,B,C,D,E
* 					While LQFP84 Has only A,B and Part of C,D
*/
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t* pinconfig){
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
	//CRL used for pins from 0:7
	if((pinconfig->GPIO_Pin_Number)*4<32){
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	785b      	ldrb	r3, [r3, #1]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	2b1f      	cmp	r3, #31
 800098a:	dc19      	bgt.n	80009c0 <MCAL_GPIO_Init+0x48>
		GPIOx->CRL &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	7852      	ldrb	r2, [r2, #1]
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	210f      	movs	r1, #15
 8000998:	fa01 f202 	lsl.w	r2, r1, r2
 800099c:	43d2      	mvns	r2, r2
 800099e:	401a      	ands	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	4611      	mov	r1, r2
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	7852      	ldrb	r2, [r2, #1]
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e01a      	b.n	80009f6 <MCAL_GPIO_Init+0x7e>
	}//CRH used to configure pins 8:15
	else{
		GPIOx->CRH &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4-32));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	7852      	ldrb	r2, [r2, #1]
 80009c8:	3a08      	subs	r2, #8
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	210f      	movs	r1, #15
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	43d2      	mvns	r2, r2
 80009d4:	401a      	ands	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4-32));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	4611      	mov	r1, r2
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	7852      	ldrb	r2, [r2, #1]
 80009e8:	3a08      	subs	r2, #8
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	fa01 f202 	lsl.w	r2, r1, r2
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	605a      	str	r2, [r3, #4]
	}
	/*Incase of Input Pull Down ODR should be set for the specific pin*/
	if (pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d109      	bne.n	8000a12 <MCAL_GPIO_Init+0x9a>
		GPIOx->ODR |=(1<<pinconfig->GPIO_Pin_Number);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	7852      	ldrb	r2, [r2, #1]
 8000a06:	4611      	mov	r1, r2
 8000a08:	2201      	movs	r2, #1
 8000a0a:	408a      	lsls	r2, r1
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60da      	str	r2, [r3, #12]

}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <__libc_init_array>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	2500      	movs	r5, #0
 8000a20:	4e0c      	ldr	r6, [pc, #48]	; (8000a54 <__libc_init_array+0x38>)
 8000a22:	4c0d      	ldr	r4, [pc, #52]	; (8000a58 <__libc_init_array+0x3c>)
 8000a24:	1ba4      	subs	r4, r4, r6
 8000a26:	10a4      	asrs	r4, r4, #2
 8000a28:	42a5      	cmp	r5, r4
 8000a2a:	d109      	bne.n	8000a40 <__libc_init_array+0x24>
 8000a2c:	f000 f81a 	bl	8000a64 <_init>
 8000a30:	2500      	movs	r5, #0
 8000a32:	4e0a      	ldr	r6, [pc, #40]	; (8000a5c <__libc_init_array+0x40>)
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <__libc_init_array+0x44>)
 8000a36:	1ba4      	subs	r4, r4, r6
 8000a38:	10a4      	asrs	r4, r4, #2
 8000a3a:	42a5      	cmp	r5, r4
 8000a3c:	d105      	bne.n	8000a4a <__libc_init_array+0x2e>
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a44:	4798      	blx	r3
 8000a46:	3501      	adds	r5, #1
 8000a48:	e7ee      	b.n	8000a28 <__libc_init_array+0xc>
 8000a4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a4e:	4798      	blx	r3
 8000a50:	3501      	adds	r5, #1
 8000a52:	e7f2      	b.n	8000a3a <__libc_init_array+0x1e>
 8000a54:	08000a94 	.word	0x08000a94
 8000a58:	08000a94 	.word	0x08000a94
 8000a5c:	08000a94 	.word	0x08000a94
 8000a60:	08000a98 	.word	0x08000a98

08000a64 <_init>:
 8000a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a66:	bf00      	nop
 8000a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a6a:	bc08      	pop	{r3}
 8000a6c:	469e      	mov	lr, r3
 8000a6e:	4770      	bx	lr

08000a70 <_fini>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr
