
Drivers_AddedSpi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cbc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000dec  08000dec  00010dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e04  08000e04  00010e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e04  08000e04  00010e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e04  08000e0c  00010e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e04  08000e04  00010e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e08  08000e08  00010e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000e0c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000e0c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050df  00000000  00000000  00010e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c94  00000000  00000000  00015f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d4c  00000000  00000000  00016ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  000178f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000015e0  00000000  00000000  00017ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002fbe  00000000  00000000  000192c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b8ad  00000000  00000000  0001c27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00027b2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006dc  00000000  00000000  00027ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000dd4 	.word	0x08000dd4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000dd4 	.word	0x08000dd4

08000170 <clock_init>:
#endif
//#define MCU_Act_As_Master
#define MCU_Act_As_Slave

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();  // Enable GPIOA Clock
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();   //Enable GPIOB Clock
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <SPI_Interrupt_Call_Back>:
uint16_t ch;
void SPI_Interrupt_Call_Back(struct S_IRQ_SRC irq_src)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(irq_src.RXNE)
 80001ac:	793b      	ldrb	r3, [r7, #4]
 80001ae:	f003 0302 	and.w	r3, r3, #2
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d00c      	beq.n	80001d2 <SPI_Interrupt_Call_Back+0x2e>
	{
		ch=0xf;
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <SPI_Interrupt_Call_Back+0x38>)
 80001ba:	220f      	movs	r2, #15
 80001bc:	801a      	strh	r2, [r3, #0]
		MCAL_SPI_Tx_Rx(SPI1, &ch, Disabled);
 80001be:	2200      	movs	r2, #0
 80001c0:	4906      	ldr	r1, [pc, #24]	; (80001dc <SPI_Interrupt_Call_Back+0x38>)
 80001c2:	4807      	ldr	r0, [pc, #28]	; (80001e0 <SPI_Interrupt_Call_Back+0x3c>)
 80001c4:	f000 fb86 	bl	80008d4 <MCAL_SPI_Tx_Rx>
		MCAL_USART_Send(USART1, &ch, Enable);
 80001c8:	2200      	movs	r2, #0
 80001ca:	4904      	ldr	r1, [pc, #16]	; (80001dc <SPI_Interrupt_Call_Back+0x38>)
 80001cc:	4805      	ldr	r0, [pc, #20]	; (80001e4 <SPI_Interrupt_Call_Back+0x40>)
 80001ce:	f000 fd2f 	bl	8000c30 <MCAL_USART_Send>
	}
#endif
}
 80001d2:	bf00      	nop
 80001d4:	3708      	adds	r7, #8
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	20000024 	.word	0x20000024
 80001e0:	40013000 	.word	0x40013000
 80001e4:	40013800 	.word	0x40013800

080001e8 <Uart_CallBack>:
void Uart_CallBack(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_4, GPIO_PIN_RESET);
	MCAL_SPI_Tx_Rx(SPI1, &ch, Enabled);
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_4, GPIO_PIN_SET);
#endif

}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <main>:

int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08c      	sub	sp, #48	; 0x30
 80001f8:	af00      	add	r7, sp, #0
	UART_Config_t CFG;
	clock_init();
 80001fa:	f7ff ffb9 	bl	8000170 <clock_init>
	CFG.BaudRate = USART_BaudRate_115200;
 80001fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000202:	623b      	str	r3, [r7, #32]
	CFG.HWFlowCtl = USART_HwFlowCtl_NONE;
 8000204:	2300      	movs	r3, #0
 8000206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	CFG.IRQ_Enable = USART_IRQ_Enable_RXIEN;
 800020a:	2320      	movs	r3, #32
 800020c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	CFG.Parity = USART_Parity_None;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	CFG.Payload_Length = USART_Payload_Length8;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	CFG.StopBits = USART_StopBits_1;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	CFG.USART_Mode = USART_MODE_TX_RX;
 8000222:	230c      	movs	r3, #12
 8000224:	773b      	strb	r3, [r7, #28]
	CFG.P_IRQ_CallBack = Uart_CallBack;
 8000226:	4b14      	ldr	r3, [pc, #80]	; (8000278 <main+0x84>)
 8000228:	62fb      	str	r3, [r7, #44]	; 0x2c
	MCAL_USART_Init(&CFG,USART1);
 800022a:	f107 031c 	add.w	r3, r7, #28
 800022e:	4913      	ldr	r1, [pc, #76]	; (800027c <main+0x88>)
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fbd1 	bl	80009d8 <MCAL_USART_Init>
	MCAL_USART_SetPins(USART1);
 8000236:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x88>)
 8000238:	f000 fc98 	bl	8000b6c <MCAL_USART_SetPins>

	//===============================SPI============================//
	SPI_Config_t SPICfg;
	SPICfg.CLock_Phase = SPI_Clock_Polarity_High_idel;
 800023c:	2302      	movs	r3, #2
 800023e:	81fb      	strh	r3, [r7, #14]
	SPICfg.CLock_Polarity =SPI_Clock_Phase_Trailing;
 8000240:	2301      	movs	r3, #1
 8000242:	81bb      	strh	r3, [r7, #12]
	SPICfg.Frame_Format = SPI_Frame_Format_MSB_1st;
 8000244:	2300      	movs	r3, #0
 8000246:	817b      	strh	r3, [r7, #10]
	SPICfg.Pay_Load_Length = SPI_Pay_Load_Length_8bit;
 8000248:	2300      	movs	r3, #0
 800024a:	813b      	strh	r3, [r7, #8]
	SPICfg.SPI_Prescaler = SPI_Divide_Prescaler_8;
 800024c:	2310      	movs	r3, #16
 800024e:	827b      	strh	r3, [r7, #18]
	SPICfg.Communication_Mode = SPI_Direction_2lines;
 8000250:	2300      	movs	r3, #0
 8000252:	80fb      	strh	r3, [r7, #6]
	MCAL_GPIO_Init(GPIOA, &P_Config);
	//Write one
	MCAL_GPIO_WritePin(GPIOA, GPIO_Pin_4, GPIO_PIN_SET);
#endif
#ifdef MCU_Act_As_Slave
	SPICfg.Device_Mode = SPI_Mode_Slave;
 8000254:	2300      	movs	r3, #0
 8000256:	80bb      	strh	r3, [r7, #4]
	SPICfg.IRQ_Enable  = SPI_IRQ_Enable_RXNE;
 8000258:	2340      	movs	r3, #64	; 0x40
 800025a:	82bb      	strh	r3, [r7, #20]
	SPICfg.NSS = SPI_NSS_Hard_Slave;
 800025c:	2300      	movs	r3, #0
 800025e:	823b      	strh	r3, [r7, #16]
	SPICfg.P_IRQ_CallBack = SPI_Interrupt_Call_Back;
 8000260:	4b07      	ldr	r3, [pc, #28]	; (8000280 <main+0x8c>)
 8000262:	61bb      	str	r3, [r7, #24]
#endif
	MCAL_SPI_Init(SPI1, &SPICfg);
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4619      	mov	r1, r3
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <main+0x90>)
 800026a:	f000 fa13 	bl	8000694 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800026e:	4805      	ldr	r0, [pc, #20]	; (8000284 <main+0x90>)
 8000270:	f000 fa96 	bl	80007a0 <MCAL_SPI_GPIO_Set_Pins>
	while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x80>
 8000276:	bf00      	nop
 8000278:	080001e9 	.word	0x080001e9
 800027c:	40013800 	.word	0x40013800
 8000280:	080001a5 	.word	0x080001a5
 8000284:	40013000 	.word	0x40013000

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	; (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	; (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	; (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fd69 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff9b 	bl	80001f4 <main>

080002be <LoopForever>:

LoopForever:
    b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002cc:	08000e0c 	.word	0x08000e0c
  ldr r2, =_sbss
 80002d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d4:	20000070 	.word	0x20000070

080002d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC1_2_IRQHandler>
	...

080002dc <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_Disable;
	NVIC_IRQ40_EXTI10_15_Disable;
}


void EXTI0_IRQHandler(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//Clear Pending Register
	EXTI->PR |=(1<<0);
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <EXTI0_IRQHandler+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[0]();
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <EXTI0_IRQHandler+0x20>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4798      	blx	r3

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40010400 	.word	0x40010400
 80002fc:	20000028 	.word	0x20000028

08000300 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI1_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI1_IRQHandler+0x1c>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[1]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI1_IRQHandler+0x20>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	20000028 	.word	0x20000028

08000324 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI2_IRQHandler+0x1c>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[2]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI2_IRQHandler+0x20>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4798      	blx	r3
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	20000028 	.word	0x20000028

08000348 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI3_IRQHandler+0x1c>)
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[3]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI3_IRQHandler+0x20>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	20000028 	.word	0x20000028

0800036c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI4_IRQHandler+0x1c>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[4]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI4_IRQHandler+0x20>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<5)){
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	2b00      	cmp	r3, #0
 800039e:	d008      	beq.n	80003b2 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |=(1<<5);
 80003a0:	4b23      	ldr	r3, [pc, #140]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003a6:	f043 0320 	orr.w	r3, r3, #32
 80003aa:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[5]();
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<6)){
 80003b2:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d008      	beq.n	80003d0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |=(1<<6);
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c8:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[6]();
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<7)){
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |=(1<<7);
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[7]();
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<8)){
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d008      	beq.n	800040c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |=(1<<8);
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[8]();
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<9)){
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |=(1<<9);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <EXTI9_5_IRQHandler+0xa0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000422:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[9]();
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <EXTI9_5_IRQHandler+0xa4>)
 8000426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000428:	4798      	blx	r3
	}

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010400 	.word	0x40010400
 8000434:	20000028 	.word	0x20000028

08000438 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<10)){
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000444:	2b00      	cmp	r3, #0
 8000446:	d008      	beq.n	800045a <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |=(1<<10);
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4a29      	ldr	r2, [pc, #164]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800044e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000452:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[10]();
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000458:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<11)){
 800045a:	4b26      	ldr	r3, [pc, #152]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000462:	2b00      	cmp	r3, #0
 8000464:	d008      	beq.n	8000478 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |=(1<<11);
 8000466:	4b23      	ldr	r3, [pc, #140]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a22      	ldr	r2, [pc, #136]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800046c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000470:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[11]();
 8000472:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<12)){
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000480:	2b00      	cmp	r3, #0
 8000482:	d008      	beq.n	8000496 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |=(1<<12);
 8000484:	4b1b      	ldr	r3, [pc, #108]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	4a1a      	ldr	r2, [pc, #104]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 800048a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800048e:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[12]();
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<13)){
 8000496:	4b17      	ldr	r3, [pc, #92]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d008      	beq.n	80004b4 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |=(1<<13);
 80004a2:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[13]();
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b2:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<14)){
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d008      	beq.n	80004d2 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |=(1<<14);
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[14]();
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d0:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<15)){
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d008      	beq.n	80004f0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |=(1<<15);
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI15_10_IRQHandler+0xbc>)
 80004e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004e8:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[15]();
 80004ea:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI15_10_IRQHandler+0xc0>)
 80004ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ee:	4798      	blx	r3
	}
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000028 	.word	0x20000028

080004fc <MCAL_RCC_GetSYS_CLK>:
/*
 * ===============================================
 * APIs Supported by "MCAL RCC DRIVER"
 * ===============================================
 */
uint32_t MCAL_RCC_GetSYS_CLK(void){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	switch ( (RCC->CFGR >>2) &0b11 ){
 8000500:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	089b      	lsrs	r3, r3, #2
 8000506:	f003 0303 	and.w	r3, r3, #3
 800050a:	2b01      	cmp	r3, #1
 800050c:	d006      	beq.n	800051c <MCAL_RCC_GetSYS_CLK+0x20>
 800050e:	2b01      	cmp	r3, #1
 8000510:	d302      	bcc.n	8000518 <MCAL_RCC_GetSYS_CLK+0x1c>
 8000512:	2b02      	cmp	r3, #2
 8000514:	d004      	beq.n	8000520 <MCAL_RCC_GetSYS_CLK+0x24>
 8000516:	e06e      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
	//HSI selected as system clock
	case 0:
		return HSI_RC_CLK;
 8000518:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <MCAL_RCC_GetSYS_CLK+0x108>)
 800051a:	e06c      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//HSE selected as system clock
	case 1:
		return HSE_CLK;
 800051c:	4b3a      	ldr	r3, [pc, #232]	; (8000608 <MCAL_RCC_GetSYS_CLK+0x10c>)
 800051e:	e06a      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//PLL selected as system clock
	case 2:
		switch ( (RCC->CFGR >>16) &0b1 ){
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	0c1b      	lsrs	r3, r3, #16
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <MCAL_RCC_GetSYS_CLK+0x38>
 800052e:	2b01      	cmp	r3, #1
 8000530:	d01e      	beq.n	8000570 <MCAL_RCC_GetSYS_CLK+0x74>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
			}

			break;

		}break;
 8000532:	e060      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
			if (((RCC->CFGR >>18)& 0b1111) ==15   )
 8000534:	4b32      	ldr	r3, [pc, #200]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	0c9b      	lsrs	r3, r3, #18
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	2b0f      	cmp	r3, #15
 8000540:	d109      	bne.n	8000556 <MCAL_RCC_GetSYS_CLK+0x5a>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000542:	4b2f      	ldr	r3, [pc, #188]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	0c9b      	lsrs	r3, r3, #18
 8000548:	f003 030f 	and.w	r3, r3, #15
 800054c:	3301      	adds	r3, #1
 800054e:	4a2e      	ldr	r2, [pc, #184]	; (8000608 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000550:	fb02 f303 	mul.w	r3, r2, r3
 8000554:	e04f      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000556:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	0c9b      	lsrs	r3, r3, #18
 800055c:	f003 030f 	and.w	r3, r3, #15
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800056a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800056e:	e042      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
			if((RCC->CFGR >>17) &0b1){
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	0c5b      	lsrs	r3, r3, #17
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	2b00      	cmp	r3, #0
 800057c:	d01d      	beq.n	80005ba <MCAL_RCC_GetSYS_CLK+0xbe>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	0c9b      	lsrs	r3, r3, #18
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d109      	bne.n	80005a0 <MCAL_RCC_GetSYS_CLK+0xa4>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	0c9b      	lsrs	r3, r3, #18
 8000592:	f003 030f 	and.w	r3, r3, #15
 8000596:	3301      	adds	r3, #1
 8000598:	4a1c      	ldr	r2, [pc, #112]	; (800060c <MCAL_RCC_GetSYS_CLK+0x110>)
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	e02a      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	0c9b      	lsrs	r3, r3, #18
 80005a6:	f003 030f 	and.w	r3, r3, #15
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <MCAL_RCC_GetSYS_CLK+0x110>)
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 80005b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80005b8:	e01d      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	f003 030f 	and.w	r3, r3, #15
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d109      	bne.n	80005dc <MCAL_RCC_GetSYS_CLK+0xe0>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	0c9b      	lsrs	r3, r3, #18
 80005ce:	f003 030f 	and.w	r3, r3, #15
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80005d6:	fb02 f303 	mul.w	r3, r2, r3
 80005da:	e00c      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MCAL_RCC_GetSYS_CLK+0x104>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	0c9b      	lsrs	r3, r3, #18
 80005e2:	f003 030f 	and.w	r3, r3, #15
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MCAL_RCC_GetSYS_CLK+0x10c>)
 80005e8:	fb02 f303 	mul.w	r3, r2, r3
 80005ec:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80005f0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80005f4:	e7ff      	b.n	80005f6 <MCAL_RCC_GetSYS_CLK+0xfa>

	}

}
 80005f6:	4618      	mov	r0, r3
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	007a1200 	.word	0x007a1200
 8000608:	003d0900 	.word	0x003d0900
 800060c:	001e8480 	.word	0x001e8480

08000610 <MCAL_RCC_GetHCLK>:
 * @param [in] -	none
 * @param [out] -	None
 * @retval -		Freq
 * Note-
 */
uint32_t MCAL_RCC_GetHCLK(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	uint32_t test=(MCAL_RCC_GetSYS_CLK() >> AHBprescTable[( (RCC->CFGR >>4) &0b1111 )]);
 8000616:	f7ff ff71 	bl	80004fc <MCAL_RCC_GetSYS_CLK>
 800061a:	4601      	mov	r1, r0
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MCAL_RCC_GetHCLK+0x2c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	f003 030f 	and.w	r3, r3, #15
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <MCAL_RCC_GetHCLK+0x30>)
 8000628:	5cd3      	ldrb	r3, [r2, r3]
 800062a:	fa21 f303 	lsr.w	r3, r1, r3
 800062e:	607b      	str	r3, [r7, #4]
	return test;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000
 8000640:	08000df4 	.word	0x08000df4

08000644 <MCAL_RCC_GetPCLK1>:
// bits 8 :10 PPRE1 APB1 prescaler
uint32_t MCAL_RCC_GetPCLK1(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>8) &0b111 )]);
 8000648:	f7ff ffe2 	bl	8000610 <MCAL_RCC_GetHCLK>
 800064c:	4601      	mov	r1, r0
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MCAL_RCC_GetPCLK1+0x20>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	f003 0307 	and.w	r3, r3, #7
 8000658:	4a03      	ldr	r2, [pc, #12]	; (8000668 <MCAL_RCC_GetPCLK1+0x24>)
 800065a:	5cd3      	ldrb	r3, [r2, r3]
 800065c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000660:	4618      	mov	r0, r3
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	08000dec 	.word	0x08000dec

0800066c <MCAL_RCC_GetPCLK2>:
// bits 11 :13 PPRE1 APB2 prescaler
uint32_t MCAL_RCC_GetPCLK2(void){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>11) &0b111 )]);
 8000670:	f7ff ffce 	bl	8000610 <MCAL_RCC_GetHCLK>
 8000674:	4601      	mov	r1, r0
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MCAL_RCC_GetPCLK2+0x20>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	0adb      	lsrs	r3, r3, #11
 800067c:	f003 0307 	and.w	r3, r3, #7
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <MCAL_RCC_GetPCLK2+0x24>)
 8000682:	5cd3      	ldrb	r3, [r2, r3]
 8000684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000688:	4618      	mov	r0, r3
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	08000dec 	.word	0x08000dec

08000694 <MCAL_SPI_Init>:
 * @param [in]		-SPI_Cfg
 * @retval			-Non
 * Note
 */
void MCAL_SPI_Init(SPI_t * SPIx , SPI_Config_t * Config)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
	//safety for registers to avoid any unwanted behavior
	// will  put their values in registers at the end
	uint16_t tmpreg_CR1 = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	81fb      	strh	r3, [r7, #14]
	uint16_t tmpreg_CR2 = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	81bb      	strh	r3, [r7, #12]
	if(SPIx == SPI1)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a39      	ldr	r2, [pc, #228]	; (8000790 <MCAL_SPI_Init+0xfc>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d109      	bne.n	80006c2 <MCAL_SPI_Init+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = Config;
 80006ae:	4a39      	ldr	r2, [pc, #228]	; (8000794 <MCAL_SPI_Init+0x100>)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 80006b4:	4b38      	ldr	r3, [pc, #224]	; (8000798 <MCAL_SPI_Init+0x104>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a37      	ldr	r2, [pc, #220]	; (8000798 <MCAL_SPI_Init+0x104>)
 80006ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	e008      	b.n	80006d4 <MCAL_SPI_Init+0x40>
	}
	else
	{
		Global_SPI_Config[SPI2_Index] = Config;
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <MCAL_SPI_Init+0x100>)
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <MCAL_SPI_Init+0x104>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a32      	ldr	r2, [pc, #200]	; (8000798 <MCAL_SPI_Init+0x104>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	61d3      	str	r3, [r2, #28]
	}
	//Enable SPI bit6 in CR1
	tmpreg_CR1 |= (1<<6);
 80006d4:	89fb      	ldrh	r3, [r7, #14]
 80006d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006da:	81fb      	strh	r3, [r7, #14]
	//Master or slave
	tmpreg_CR1 |= Config->Device_Mode;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	81fb      	strh	r3, [r7, #14]
	//SPI Communication mode 2line or 1line rx only ,tx only or both
	tmpreg_CR1 |=Config->Communication_Mode;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	885a      	ldrh	r2, [r3, #2]
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	81fb      	strh	r3, [r7, #14]
	tmpreg_CR1 |=Config->Frame_Format;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	88da      	ldrh	r2, [r3, #6]
 80006f4:	89fb      	ldrh	r3, [r7, #14]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	81fb      	strh	r3, [r7, #14]
	tmpreg_CR1 |=Config->Pay_Load_Length;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	889a      	ldrh	r2, [r3, #4]
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	4313      	orrs	r3, r2
 8000702:	81fb      	strh	r3, [r7, #14]
	//SPI_Clock_Polarity
	tmpreg_CR1 |=Config->CLock_Polarity;
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	891a      	ldrh	r2, [r3, #8]
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	4313      	orrs	r3, r2
 800070c:	81fb      	strh	r3, [r7, #14]
	//SPI_Clock_Phase
	tmpreg_CR1 |=Config->CLock_Phase;
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	895a      	ldrh	r2, [r3, #10]
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4313      	orrs	r3, r2
 8000716:	81fb      	strh	r3, [r7, #14]
	//================================NSS==============================

	if(Config->NSS == SPI_NSS_Hard_Master_SS_Output_Enable)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d104      	bne.n	800072a <MCAL_SPI_Init+0x96>
		//		Single Master Mode
		//		NSS output enabled (SSM = 0, SSOE = 1)
		//		This configuration is used only when the device operates in master mode. The
		//		NSS signal is driven low when the master starts the communication and is kept
		//		low until the SPI is disabled.
		tmpreg_CR2 |= SPI_NSS_Hard_Master_SS_Output_Enable;
 8000720:	89bb      	ldrh	r3, [r7, #12]
 8000722:	f043 0304 	orr.w	r3, r3, #4
 8000726:	81bb      	strh	r3, [r7, #12]
 8000728:	e008      	b.n	800073c <MCAL_SPI_Init+0xa8>
	}
	else if (Config->NSS == SPI_NSS_Hard_Master_SS_No_output)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	899b      	ldrh	r3, [r3, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <MCAL_SPI_Init+0xa8>
	{
		tmpreg_CR2 |= SPI_NSS_Hard_Master_SS_No_output;
	}
	else
		tmpreg_CR1 |= Config->NSS;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	899a      	ldrh	r2, [r3, #12]
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	4313      	orrs	r3, r2
 800073a:	81fb      	strh	r3, [r7, #14]
	//==============================PreScaler=========================
	tmpreg_CR1 |= Config->SPI_Prescaler;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	89da      	ldrh	r2, [r3, #14]
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	4313      	orrs	r3, r2
 8000744:	81fb      	strh	r3, [r7, #14]

	if(Config->IRQ_Enable != SPI_IRQ_Enable_Non)
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	8a1b      	ldrh	r3, [r3, #16]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d015      	beq.n	800077a <MCAL_SPI_Init+0xe6>
	{
		tmpreg_CR2 |= Config->IRQ_Enable;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	8a1a      	ldrh	r2, [r3, #16]
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	4313      	orrs	r3, r2
 8000756:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MCAL_SPI_Init+0xfc>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <MCAL_SPI_Init+0xda>
		{
			NVIC_IRQ35_SPI1_Enable;
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MCAL_SPI_Init+0x108>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <MCAL_SPI_Init+0x108>)
 8000766:	f043 0308 	orr.w	r3, r3, #8
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e005      	b.n	800077a <MCAL_SPI_Init+0xe6>
		}
		else
		{
			NVIC_IRQ36_SPI2_Enable;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MCAL_SPI_Init+0x108>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0a      	ldr	r2, [pc, #40]	; (800079c <MCAL_SPI_Init+0x108>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tmpreg_CR1;
 800077a:	89fa      	ldrh	r2, [r7, #14]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tmpreg_CR2;
 8000780:	89ba      	ldrh	r2, [r7, #12]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40013000 	.word	0x40013000
 8000794:	2000001c 	.word	0x2000001c
 8000798:	40021000 	.word	0x40021000
 800079c:	e000e104 	.word	0xe000e104

080007a0 <MCAL_SPI_GPIO_Set_Pins>:
	}

}
// Multi Slave operation not included only point to point
void MCAL_SPI_GPIO_Set_Pins(SPI_t * SPIx)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	uint8_t SCK;
	uint8_t MISO;
	uint8_t MOSI;
	SPI_Config_t * Local_SPI_Config;
	GPIO_t *GPIOx;
	if(SPIx == SPI1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a46      	ldr	r2, [pc, #280]	; (80008c4 <MCAL_SPI_GPIO_Set_Pins+0x124>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d10d      	bne.n	80007cc <MCAL_SPI_GPIO_Set_Pins+0x2c>
	{
		NSS=GPIO_Pin_4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	75fb      	strb	r3, [r7, #23]
		SCK=GPIO_Pin_5;
 80007b4:	2305      	movs	r3, #5
 80007b6:	75bb      	strb	r3, [r7, #22]
		MISO=GPIO_Pin_6;
 80007b8:	2306      	movs	r3, #6
 80007ba:	757b      	strb	r3, [r7, #21]
		MOSI=GPIO_Pin_7;
 80007bc:	2307      	movs	r3, #7
 80007be:	753b      	strb	r3, [r7, #20]
		Local_SPI_Config=Global_SPI_Config[SPI1_Index];
 80007c0:	4b41      	ldr	r3, [pc, #260]	; (80008c8 <MCAL_SPI_GPIO_Set_Pins+0x128>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	613b      	str	r3, [r7, #16]
		GPIOx=GPIOA;
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <MCAL_SPI_GPIO_Set_Pins+0x12c>)
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e00c      	b.n	80007e6 <MCAL_SPI_GPIO_Set_Pins+0x46>
	}else
	{
		NSS=GPIO_Pin_12;
 80007cc:	230c      	movs	r3, #12
 80007ce:	75fb      	strb	r3, [r7, #23]
		SCK=GPIO_Pin_13;
 80007d0:	230d      	movs	r3, #13
 80007d2:	75bb      	strb	r3, [r7, #22]
		MISO=GPIO_Pin_14;
 80007d4:	230e      	movs	r3, #14
 80007d6:	757b      	strb	r3, [r7, #21]
		MOSI=GPIO_Pin_15;
 80007d8:	230f      	movs	r3, #15
 80007da:	753b      	strb	r3, [r7, #20]
		Local_SPI_Config=Global_SPI_Config[SPI2_Index];
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MCAL_SPI_GPIO_Set_Pins+0x128>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	613b      	str	r3, [r7, #16]
		GPIOx=GPIOB;
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <MCAL_SPI_GPIO_Set_Pins+0x130>)
 80007e4:	60fb      	str	r3, [r7, #12]
	}
		if(Local_SPI_Config->Device_Mode == SPI_Mode_Master )
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d13a      	bne.n	8000864 <MCAL_SPI_GPIO_Set_Pins+0xc4>
		{
			//NSS
			switch(Local_SPI_Config->NSS)
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	899b      	ldrh	r3, [r3, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00c      	beq.n	8000810 <MCAL_SPI_GPIO_Set_Pins+0x70>
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d115      	bne.n	8000826 <MCAL_SPI_GPIO_Set_Pins+0x86>
			{
			case SPI_NSS_Hard_Master_SS_Output_Enable :
			{

				PConfig.GPIO_Pin_Number = NSS;
 80007fa:	7dfb      	ldrb	r3, [r7, #23]
 80007fc:	727b      	strb	r3, [r7, #9]
				PConfig.GPIO_Mode = GPIO_MODE_OUTPUT_PP_10M;
 80007fe:	2301      	movs	r3, #1
 8000800:	723b      	strb	r3, [r7, #8]
				MCAL_GPIO_Init(GPIOx, &PConfig);
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4619      	mov	r1, r3
 8000808:	68f8      	ldr	r0, [r7, #12]
 800080a:	f000 fa6d 	bl	8000ce8 <MCAL_GPIO_Init>
				break;
 800080e:	e00a      	b.n	8000826 <MCAL_SPI_GPIO_Set_Pins+0x86>
			}
			case SPI_NSS_Hard_Master_SS_No_output:
			{
				PConfig.GPIO_Pin_Number = NSS;
 8000810:	7dfb      	ldrb	r3, [r7, #23]
 8000812:	727b      	strb	r3, [r7, #9]
				PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
 8000814:	2304      	movs	r3, #4
 8000816:	723b      	strb	r3, [r7, #8]
				MCAL_GPIO_Init(GPIOx,&PConfig);
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4619      	mov	r1, r3
 800081e:	68f8      	ldr	r0, [r7, #12]
 8000820:	f000 fa62 	bl	8000ce8 <MCAL_GPIO_Init>
				break;
 8000824:	bf00      	nop
			}
			}
			PConfig.GPIO_Pin_Number = SCK;
 8000826:	7dbb      	ldrb	r3, [r7, #22]
 8000828:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 800082a:	2309      	movs	r3, #9
 800082c:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx, &PConfig);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	68f8      	ldr	r0, [r7, #12]
 8000836:	f000 fa57 	bl	8000ce8 <MCAL_GPIO_Init>
			//MISO
			PConfig.GPIO_Pin_Number = MISO;
 800083a:	7d7b      	ldrb	r3, [r7, #21]
 800083c:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
 800083e:	2304      	movs	r3, #4
 8000840:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx,&PConfig);
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4619      	mov	r1, r3
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f000 fa4d 	bl	8000ce8 <MCAL_GPIO_Init>
			//MOSI
			PConfig.GPIO_Pin_Number = MOSI;
 800084e:	7d3b      	ldrb	r3, [r7, #20]
 8000850:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 8000852:	2309      	movs	r3, #9
 8000854:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx,&PConfig);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f000 fa43 	bl	8000ce8 <MCAL_GPIO_Init>
			PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
			MCAL_GPIO_Init(GPIOx,&PConfig);
		}


}
 8000862:	e02b      	b.n	80008bc <MCAL_SPI_GPIO_Set_Pins+0x11c>
			if (Local_SPI_Config->NSS == SPI_NSS_Hard_Slave )
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	899b      	ldrh	r3, [r3, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <MCAL_SPI_GPIO_Set_Pins+0xe0>
				PConfig.GPIO_Pin_Number = NSS;
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	727b      	strb	r3, [r7, #9]
				PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
 8000870:	2304      	movs	r3, #4
 8000872:	723b      	strb	r3, [r7, #8]
				MCAL_GPIO_Init(GPIOx, &PConfig);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4619      	mov	r1, r3
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f000 fa34 	bl	8000ce8 <MCAL_GPIO_Init>
			PConfig.GPIO_Pin_Number = SCK;
 8000880:	7dbb      	ldrb	r3, [r7, #22]
 8000882:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
 8000884:	2304      	movs	r3, #4
 8000886:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx, &PConfig);
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4619      	mov	r1, r3
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f000 fa2a 	bl	8000ce8 <MCAL_GPIO_Init>
			PConfig.GPIO_Pin_Number = MISO;
 8000894:	7d7b      	ldrb	r3, [r7, #21]
 8000896:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 8000898:	2309      	movs	r3, #9
 800089a:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx, &PConfig);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 fa20 	bl	8000ce8 <MCAL_GPIO_Init>
			PConfig.GPIO_Pin_Number = GPIO_Pin_7;
 80008a8:	2307      	movs	r3, #7
 80008aa:	727b      	strb	r3, [r7, #9]
			PConfig.GPIO_Mode = GPIO_MODE_INPUT_F;
 80008ac:	2304      	movs	r3, #4
 80008ae:	723b      	strb	r3, [r7, #8]
			MCAL_GPIO_Init(GPIOx,&PConfig);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f000 fa16 	bl	8000ce8 <MCAL_GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013000 	.word	0x40013000
 80008c8:	2000001c 	.word	0x2000001c
 80008cc:	40010800 	.word	0x40010800
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <MCAL_SPI_Tx_Rx>:
 * @param [in]		-Polling_mechism:Waiting or Not
 * @retval			-None
 * Note
 */
void MCAL_SPI_Tx_Rx(SPI_t * SPIX ,uint16_t * TX_RX_pBuffer , enum SPI_PollingMechanism Polling_En)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	71fb      	strb	r3, [r7, #7]

	if(Polling_En == Enabled)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d106      	bne.n	80008f6 <MCAL_SPI_Tx_Rx+0x22>
	{
		while(!(SPIX->SR & SR_TXE));//Waiting until tx buffer is empty
 80008e8:	bf00      	nop
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <MCAL_SPI_Tx_Rx+0x16>
	}
	SPIX->DR = *TX_RX_pBuffer;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	60da      	str	r2, [r3, #12]
	if(Polling_En == Enabled)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d106      	bne.n	8000914 <MCAL_SPI_Tx_Rx+0x40>
	{
		while(!(SPIX->SR & SR_RXNE));
 8000906:	bf00      	nop
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	2b00      	cmp	r3, #0
 8000912:	d0f9      	beq.n	8000908 <MCAL_SPI_Tx_Rx+0x34>
	}
	*TX_RX_pBuffer =  SPIX->DR;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	b29a      	uxth	r2, r3
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	801a      	strh	r2, [r3, #0]
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SPI1_IRQHandler>:
/*=================================================================*/
/*=========================IRQ=====================================*/
/*=================================================================*/

void SPI1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR)&(1<<1)>>1);
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <SPI1_IRQHandler+0x50>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	793b      	ldrb	r3, [r7, #4]
 800093a:	f362 0300 	bfi	r3, r2, #0, #1
 800093e:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR)&(1<<0)>>0);
 8000940:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <SPI1_IRQHandler+0x50>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	f362 0341 	bfi	r3, r2, #1, #1
 8000950:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR)&(1<<4)>>4);
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <SPI1_IRQHandler+0x50>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	793b      	ldrb	r3, [r7, #4]
 800095e:	f362 0382 	bfi	r3, r2, #2, #1
 8000962:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SPI1_IRQHandler+0x54>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	7938      	ldrb	r0, [r7, #4]
 800096c:	4798      	blx	r3
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40013000 	.word	0x40013000
 800097c:	2000001c 	.word	0x2000001c

08000980 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR)&(1<<1)>>1);
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <SPI2_IRQHandler+0x50>)
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	793b      	ldrb	r3, [r7, #4]
 8000992:	f362 0300 	bfi	r3, r2, #0, #1
 8000996:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR)&(1<<0)>>0);
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <SPI2_IRQHandler+0x50>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	793b      	ldrb	r3, [r7, #4]
 80009a4:	f362 0341 	bfi	r3, r2, #1, #1
 80009a8:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR)&(1<<4)>>4);
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <SPI2_IRQHandler+0x50>)
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	793b      	ldrb	r3, [r7, #4]
 80009b6:	f362 0382 	bfi	r3, r2, #2, #1
 80009ba:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SPI2_IRQHandler+0x54>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	7938      	ldrb	r0, [r7, #4]
 80009c4:	4798      	blx	r3
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40003800 	.word	0x40003800
 80009d4:	2000001c 	.word	0x2000001c

080009d8 <MCAL_USART_Init>:
 * @param [in] -	Cofiguration structure, usart instance
 * @param [out] -	None
 * @retval -			None
 * Note-
 */
void MCAL_USART_Init(UART_Config_t *UART_Config , USART_t* USARTx){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	uint32_t pclk,BRR;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	4a58      	ldr	r2, [pc, #352]	; (8000b48 <MCAL_USART_Init+0x170>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d10c      	bne.n	8000a04 <MCAL_USART_Init+0x2c>
		RCC_USART1_CLK_EN();
 80009ea:	4b58      	ldr	r3, [pc, #352]	; (8000b4c <MCAL_USART_Init+0x174>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a57      	ldr	r2, [pc, #348]	; (8000b4c <MCAL_USART_Init+0x174>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6193      	str	r3, [r2, #24]
		Global_UART1_Config=UART_Config;
 80009f6:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <MCAL_USART_Init+0x178>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK2();
 80009fc:	f7ff fe36 	bl	800066c <MCAL_RCC_GetPCLK2>
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	e020      	b.n	8000a46 <MCAL_USART_Init+0x6e>
	} else if (USARTx == USART2) {
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	4a53      	ldr	r2, [pc, #332]	; (8000b54 <MCAL_USART_Init+0x17c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d10c      	bne.n	8000a26 <MCAL_USART_Init+0x4e>
		RCC_USART2_CLK_EN();
 8000a0c:	4b4f      	ldr	r3, [pc, #316]	; (8000b4c <MCAL_USART_Init+0x174>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	; (8000b4c <MCAL_USART_Init+0x174>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a16:	61d3      	str	r3, [r2, #28]
		Global_UART2_Config=UART_Config;
 8000a18:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <MCAL_USART_Init+0x180>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8000a1e:	f7ff fe11 	bl	8000644 <MCAL_RCC_GetPCLK1>
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	e00f      	b.n	8000a46 <MCAL_USART_Init+0x6e>
	} else if (USARTx == USART3) {
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	4a4c      	ldr	r2, [pc, #304]	; (8000b5c <MCAL_USART_Init+0x184>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d10b      	bne.n	8000a46 <MCAL_USART_Init+0x6e>
		RCC_USART3_CLK_EN();
 8000a2e:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <MCAL_USART_Init+0x174>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a46      	ldr	r2, [pc, #280]	; (8000b4c <MCAL_USART_Init+0x174>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	61d3      	str	r3, [r2, #28]
		Global_UART3_Config=UART_Config;
 8000a3a:	4a49      	ldr	r2, [pc, #292]	; (8000b60 <MCAL_USART_Init+0x188>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
		pclk=MCAL_RCC_GetPCLK1();
 8000a40:	f7ff fe00 	bl	8000644 <MCAL_RCC_GetPCLK1>
 8000a44:	60f8      	str	r0, [r7, #12]
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |=(1<<13);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->USART_Mode;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Payload_Length;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	7a12      	ldrb	r2, [r2, #8]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	60da      	str	r2, [r3, #12]
	USARTx->CR1 |=UART_Config->Parity;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7a52      	ldrb	r2, [r2, #9]
 8000a76:	431a      	orrs	r2, r3
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	60da      	str	r2, [r3, #12]

	USARTx->CR2 |=UART_Config->StopBits;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	7a92      	ldrb	r2, [r2, #10]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	611a      	str	r2, [r3, #16]
	USARTx->CR3 |=UART_Config->HWFlowCtl;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	7ad2      	ldrb	r2, [r2, #11]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	615a      	str	r2, [r3, #20]

	BRR = USART_BRR_Register(pclk,UART_Config->BaudRate);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa4:	0119      	lsls	r1, r3, #4
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	009a      	lsls	r2, r3, #2
 8000ab0:	441a      	add	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	011b      	lsls	r3, r3, #4
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ac8:	2064      	movs	r0, #100	; 0x64
 8000aca:	fb00 f303 	mul.w	r3, r0, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <MCAL_USART_Init+0x18c>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	095b      	lsrs	r3, r3, #5
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	68ba      	ldr	r2, [r7, #8]
 8000ae6:	609a      	str	r2, [r3, #8]

	if (UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7b1b      	ldrb	r3, [r3, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d026      	beq.n	8000b3e <MCAL_USART_Init+0x166>
	{
		USARTx->CR1 |= UART_Config->IRQ_Enable ;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	7b12      	ldrb	r2, [r2, #12]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTx == USART1)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <MCAL_USART_Init+0x170>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <MCAL_USART_Init+0x13c>
		{
			NVIC_IRQ37_USART1_Enable ;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b0c:	f043 0320 	orr.w	r3, r3, #32
 8000b10:	6013      	str	r3, [r2, #0]
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}

}
 8000b12:	e014      	b.n	8000b3e <MCAL_USART_Init+0x166>
		else if (USARTx == USART2)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <MCAL_USART_Init+0x17c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d106      	bne.n	8000b2a <MCAL_USART_Init+0x152>
			NVIC_IRQ38_USART2_Enable ;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	e009      	b.n	8000b3e <MCAL_USART_Init+0x166>
		else if (USARTx == USART3)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <MCAL_USART_Init+0x184>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d105      	bne.n	8000b3e <MCAL_USART_Init+0x166>
			NVIC_IRQ39_USART3_Enable ;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <MCAL_USART_Init+0x190>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b3c:	6013      	str	r3, [r2, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	20000064 	.word	0x20000064
 8000b54:	40004400 	.word	0x40004400
 8000b58:	20000068 	.word	0x20000068
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	2000006c 	.word	0x2000006c
 8000b64:	51eb851f 	.word	0x51eb851f
 8000b68:	e000e104 	.word	0xe000e104

08000b6c <MCAL_USART_SetPins>:
 *		param[in]         -USARTx :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/

void MCAL_USART_SetPins(USART_t *USARTx){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	GPIO_t * GPIOx;
	uint8_t TX_PIN;
	uint8_t RX_PIN;
	uint8_t CTS_PIN;
	uint8_t RTS_PIN;
	if(USARTx == USART1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <MCAL_USART_SetPins+0xa4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d10d      	bne.n	8000b98 <MCAL_USART_SetPins+0x2c>
	{
		TX_PIN=GPIO_Pin_9;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_10;
 8000b80:	230a      	movs	r3, #10
 8000b82:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_11;
 8000b84:	230b      	movs	r3, #11
 8000b86:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_12;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MCAL_USART_SetPins+0xa8>)
 8000b8e:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART1_Config;
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MCAL_USART_SetPins+0xac>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e022      	b.n	8000bde <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART2){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <MCAL_USART_SetPins+0xb0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d10d      	bne.n	8000bbc <MCAL_USART_SetPins+0x50>
		TX_PIN=GPIO_Pin_2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOA;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MCAL_USART_SetPins+0xa8>)
 8000bb2:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART2_Config;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MCAL_USART_SetPins+0xb4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e010      	b.n	8000bde <MCAL_USART_SetPins+0x72>

	}else if(USARTx == USART3){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <MCAL_USART_SetPins+0xb8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d10c      	bne.n	8000bde <MCAL_USART_SetPins+0x72>
		TX_PIN=GPIO_Pin_10;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	74fb      	strb	r3, [r7, #19]
		RX_PIN=GPIO_Pin_11;
 8000bc8:	230b      	movs	r3, #11
 8000bca:	74bb      	strb	r3, [r7, #18]
		CTS_PIN=GPIO_Pin_13;
 8000bcc:	230d      	movs	r3, #13
 8000bce:	747b      	strb	r3, [r7, #17]
		RTS_PIN=GPIO_Pin_14;
 8000bd0:	230e      	movs	r3, #14
 8000bd2:	743b      	strb	r3, [r7, #16]
		GPIOx=GPIOB;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MCAL_USART_SetPins+0xbc>)
 8000bd6:	617b      	str	r3, [r7, #20]
		UARTx_Config=Global_UART3_Config;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MCAL_USART_SetPins+0xc0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]

	}
	//from alternative pin table for LQF and see recommended gpio pins configuration table

	pincfg.GPIO_Pin_Number = TX_PIN ;
 8000bde:	7cfb      	ldrb	r3, [r7, #19]
 8000be0:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
 8000be2:	2309      	movs	r3, #9
 8000be4:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f000 f87b 	bl	8000ce8 <MCAL_GPIO_Init>

	pincfg.GPIO_Pin_Number = RX_PIN ;
 8000bf2:	7cbb      	ldrb	r3, [r7, #18]
 8000bf4:	727b      	strb	r3, [r7, #9]
	pincfg.GPIO_Mode = GPIO_MODE_INPUT_F;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	723b      	strb	r3, [r7, #8]
	MCAL_GPIO_Init(GPIOx, &pincfg) ;
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6978      	ldr	r0, [r7, #20]
 8000c02:	f000 f871 	bl	8000ce8 <MCAL_GPIO_Init>
		pincfg.GPIO_Mode = GPIO_MODE_AF_PP_10M;
		MCAL_GPIO_Init(GPIOx, &pincfg) ;
	}


}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013800 	.word	0x40013800
 8000c14:	40010800 	.word	0x40010800
 8000c18:	20000064 	.word	0x20000064
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	20000068 	.word	0x20000068
 8000c24:	40004800 	.word	0x40004800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	2000006c 	.word	0x2000006c

08000c30 <MCAL_USART_Send>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -Should initialize UART First
 *
 ********************************************************************************************************************/
void MCAL_USART_Send(USART_t *USARTx , uint16_t *pTxBuffer , enum Polling_Mechanism PollingEn ){
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]

	UART_Config_t * UARTx_Config;
	if(USARTx == USART1)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <MCAL_USART_Send+0x64>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d103      	bne.n	8000c4e <MCAL_USART_Send+0x1e>
	{
		UARTx_Config=Global_UART1_Config;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MCAL_USART_Send+0x68>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00e      	b.n	8000c6c <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART2){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MCAL_USART_Send+0x6c>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d103      	bne.n	8000c5e <MCAL_USART_Send+0x2e>
		UARTx_Config=Global_UART2_Config;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MCAL_USART_Send+0x70>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e006      	b.n	8000c6c <MCAL_USART_Send+0x3c>

	}else if(USARTx == USART3){
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <MCAL_USART_Send+0x74>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d102      	bne.n	8000c6c <MCAL_USART_Send+0x3c>
		UARTx_Config=Global_UART3_Config;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MCAL_USART_Send+0x78>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	617b      	str	r3, [r7, #20]
	}
	//wait until TXE is set Transmit data register empty
	if(PollingEn==Enable)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d106      	bne.n	8000c80 <MCAL_USART_Send+0x50>
		while(!(USARTx->SR &(1<<7)));
 8000c72:	bf00      	nop
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f9      	beq.n	8000c74 <MCAL_USART_Send+0x44>
	{
		USARTx->DR = (*pTxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer&(uint8_t)0xFF);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	605a      	str	r2, [r3, #4]
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	371c      	adds	r7, #28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	40013800 	.word	0x40013800
 8000c98:	20000064 	.word	0x20000064
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	20000068 	.word	0x20000068
 8000ca4:	40004800 	.word	0x40004800
 8000ca8:	2000006c 	.word	0x2000006c

08000cac <USART1_IRQHandler>:
	}


//ISR
void USART1_IRQHandler()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	Global_UART1_Config->P_IRQ_CallBack();
 8000cb0:	4b02      	ldr	r3, [pc, #8]	; (8000cbc <USART1_IRQHandler+0x10>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	4798      	blx	r3
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000064 	.word	0x20000064

08000cc0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	Global_UART2_Config->P_IRQ_CallBack();
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <USART2_IRQHandler+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	4798      	blx	r3
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000068 	.word	0x20000068

08000cd4 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	Global_UART3_Config->P_IRQ_CallBack();
 8000cd8:	4b02      	ldr	r3, [pc, #8]	; (8000ce4 <USART3_IRQHandler+0x10>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	4798      	blx	r3
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000006c 	.word	0x2000006c

08000ce8 <MCAL_GPIO_Init>:
* @param [out] -	None
* @retval -			None
* Note-				STM32F103C6 MCU has PORTS A,B,C,D,E
* 					While LQFP84 Has only A,B and Part of C,D
*/
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t* pinconfig){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	//CRL used for pins from 0:7
	if((pinconfig->GPIO_Pin_Number)*4<32){
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	785b      	ldrb	r3, [r3, #1]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	dc19      	bgt.n	8000d30 <MCAL_GPIO_Init+0x48>
		GPIOx->CRL &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	7852      	ldrb	r2, [r2, #1]
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	210f      	movs	r1, #15
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	43d2      	mvns	r2, r2
 8000d0e:	401a      	ands	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4));
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	7852      	ldrb	r2, [r2, #1]
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e01a      	b.n	8000d66 <MCAL_GPIO_Init+0x7e>
	}//CRH used to configure pins 8:15
	else{
		GPIOx->CRH &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4-32));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	7852      	ldrb	r2, [r2, #1]
 8000d38:	3a08      	subs	r2, #8
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4-32));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4611      	mov	r1, r2
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	7852      	ldrb	r2, [r2, #1]
 8000d58:	3a08      	subs	r2, #8
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	605a      	str	r2, [r3, #4]
	}
	/*Incase of Input Pull Down ODR should be set for the specific pin*/
	if (pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d109      	bne.n	8000d82 <MCAL_GPIO_Init+0x9a>
		GPIOx->ODR |=(1<<pinconfig->GPIO_Pin_Number);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	7852      	ldrb	r2, [r2, #1]
 8000d76:	4611      	mov	r1, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	408a      	lsls	r2, r1
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60da      	str	r2, [r3, #12]

}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2500      	movs	r5, #0
 8000d90:	4e0c      	ldr	r6, [pc, #48]	; (8000dc4 <__libc_init_array+0x38>)
 8000d92:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	f000 f81a 	bl	8000dd4 <_init>
 8000da0:	2500      	movs	r5, #0
 8000da2:	4e0a      	ldr	r6, [pc, #40]	; (8000dcc <__libc_init_array+0x40>)
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <__libc_init_array+0x44>)
 8000da6:	1ba4      	subs	r4, r4, r6
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db4:	4798      	blx	r3
 8000db6:	3501      	adds	r5, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbe:	4798      	blx	r3
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000e04 	.word	0x08000e04
 8000dc8:	08000e04 	.word	0x08000e04
 8000dcc:	08000e04 	.word	0x08000e04
 8000dd0:	08000e08 	.word	0x08000e08

08000dd4 <_init>:
 8000dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dd6:	bf00      	nop
 8000dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dda:	bc08      	pop	{r3}
 8000ddc:	469e      	mov	lr, r3
 8000dde:	4770      	bx	lr

08000de0 <_fini>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr
