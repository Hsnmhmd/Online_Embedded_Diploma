
Drivers_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eb0  08000eb0  00010eb8  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb0  08000eb0  00010eb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb0  08000eb8  00010eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb0  08000eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000000  08000eb8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08000eb8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b7f  00000000  00000000  00010ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000102e  00000000  00000000  00017a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000116e  00000000  00000000  00018a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b8  00000000  00000000  00019c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000230  00000000  00000000  00019eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003455  00000000  00000000  0001a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003f52  00000000  00000000  0001d53d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c03e  00000000  00000000  0002148f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d4cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008dc  00000000  00000000  0002d548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e78 	.word	0x08000e78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e78 	.word	0x08000e78

08000170 <eeprom_init>:
#include "I2C_Slave_eeprom.h"

void eeprom_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//PB7:I2C1_SDA

	I2C_Config_t I2C1CFG ;

	//I2C Controller act as a Master
	I2C1CFG.General_Call_Address_Detection = I2C_ENGC_Enable ;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	623b      	str	r3, [r7, #32]
	I2C1CFG.I2c_ACK_Control = I2C_ACK_Enable;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	61fb      	str	r3, [r7, #28]
	I2C1CFG.I2C_ClockSpeed = I2C_SCLK_SM_100K ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <eeprom_init+0x38>)
 8000182:	607b      	str	r3, [r7, #4]
	I2C1CFG.I2C_Mode = I2C_Mode_I2C ;
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
	I2C1CFG.P_Slave_Event_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	627b      	str	r3, [r7, #36]	; 0x24
	I2C1CFG.StretchMode = I2C_StrechMode_Enable;
 800018c:	2300      	movs	r3, #0
 800018e:	60bb      	str	r3, [r7, #8]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <eeprom_init+0x3c>)
 8000192:	f000 fb31 	bl	80007f8 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_INIT(I2C1,&I2C1CFG);
 8000196:	1d3b      	adds	r3, r7, #4
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <eeprom_init+0x3c>)
 800019c:	f000 fa18 	bl	80005d0 <MCAL_I2C_INIT>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <eeprom_write_Nbytes>:


unsigned char eeprom_write_Nbytes(unsigned int Memory_address , unsigned char* bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]

	uint8_t i=0 ;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	// Start+(EEPROM add+ w)+A+ upper byte memory address +A + upper byte memory address +A +byte1........
	//(unsigned char*)malloc(data_length +2)
	//dynamic memory allocation violate MISRA rule

	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);//upper byte memory address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_address);//lower byte memory address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for(i=2 ; i< (Data_Length +2); i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <eeprom_write_Nbytes+0x66>
	{
		buffer[i] = bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for(i=2 ; i< (Data_Length +2); i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <eeprom_write_Nbytes+0x42>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_address, buffer, (Data_Length+2), with_Stop, start);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	4619      	mov	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <eeprom_write_Nbytes+0xa0>)
 800023e:	f000 fb1b 	bl	8000878 <MCAL_I2C_Master_TX>
	return 0 ;
 8000242:	2300      	movs	r3, #0

}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <eeprom_read_bytes>:
unsigned char eeprom_read_bytes(unsigned int Memory_address , uint8_t* dataOut , uint8_t Data_Length)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	buffer[0] = (uint8_t)(Memory_address>>8);//upper byte memory address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(Memory_address);//lower byte memory address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_address, buffer, 2, without_Stop, start);//write the address only
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <eeprom_read_bytes+0x54>)
 8000282:	f000 faf9 	bl	8000878 <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_address, dataOut, Data_Length, with_Stop, repeated_start);//read data
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <eeprom_read_bytes+0x54>)
 8000298:	f000 fb4e 	bl	8000938 <MCAL_I2C_Master_RX>
	return 0 ;
 800029c:	2300      	movs	r3, #0


}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <clock_init>:
#include "lcd.h"
#include "I2C_Slave_eeprom.h"
unsigned char ch ;

void clock_init()
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <clock_init+0x30>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <clock_init+0x30>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <clock_init+0x30>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <clock_init+0x30>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <clock_init+0x30>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a03      	ldr	r2, [pc, #12]	; (80002dc <clock_init+0x30>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6193      	str	r3, [r2, #24]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <main>:
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
	clock_init();
 80002e6:	f7ff ffe1 	bl	80002ac <clock_init>
	//test case1
	unsigned char ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 80002ea:	4a1b      	ldr	r2, [pc, #108]	; (8000358 <main+0x78>)
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f4:	6018      	str	r0, [r3, #0]
 80002f6:	3304      	adds	r3, #4
 80002f8:	8019      	strh	r1, [r3, #0]
 80002fa:	3302      	adds	r3, #2
 80002fc:	0c0a      	lsrs	r2, r1, #16
 80002fe:	701a      	strb	r2, [r3, #0]
	unsigned char ch2[7] = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	f8c3 2003 	str.w	r2, [r3, #3]

	eeprom_init();
 800030a:	f7ff ff31 	bl	8000170 <eeprom_init>
	eeprom_write_Nbytes(0xAF, ch1, 7);
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2207      	movs	r2, #7
 8000314:	4619      	mov	r1, r3
 8000316:	20af      	movs	r0, #175	; 0xaf
 8000318:	f7ff ff4a 	bl	80001b0 <eeprom_write_Nbytes>
	eeprom_read_bytes(0xAF,ch2, 7);
 800031c:	463b      	mov	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	4619      	mov	r1, r3
 8000322:	20af      	movs	r0, #175	; 0xaf
 8000324:	f7ff ff96 	bl	8000254 <eeprom_read_bytes>



//test case2
	ch1[0] = 0xA;
 8000328:	230a      	movs	r3, #10
 800032a:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 800032c:	230b      	movs	r3, #11
 800032e:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000330:	230c      	movs	r3, #12
 8000332:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000334:	230d      	movs	r3, #13
 8000336:	72fb      	strb	r3, [r7, #11]

	eeprom_write_Nbytes(0xFFF, ch1, 4);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	2204      	movs	r2, #4
 800033e:	4619      	mov	r1, r3
 8000340:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000344:	f7ff ff34 	bl	80001b0 <eeprom_write_Nbytes>
		eeprom_read_bytes(0xFFF,ch2, 4);
 8000348:	463b      	mov	r3, r7
 800034a:	2204      	movs	r2, #4
 800034c:	4619      	mov	r1, r3
 800034e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000352:	f7ff ff7f 	bl	8000254 <eeprom_read_bytes>


		while(1)
 8000356:	e7fe      	b.n	8000356 <main+0x76>
 8000358:	08000e90 	.word	0x08000e90

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fd51 	bl	8000e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffa7 	bl	80002e0 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000eb8 	.word	0x08000eb8
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	200000f0 	.word	0x200000f0

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_Disable;
	NVIC_IRQ40_EXTI10_15_Disable;
}


void EXTI0_IRQHandler(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	//Clear Pending Register
	EXTI->PR |=(1<<0);
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI0_IRQHandler+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[0]();
 80003c0:	4b03      	ldr	r3, [pc, #12]	; (80003d0 <EXTI0_IRQHandler+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4798      	blx	r3

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40010400 	.word	0x40010400
 80003d0:	20000024 	.word	0x20000024

080003d4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <EXTI1_IRQHandler+0x1c>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[1]();
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <EXTI1_IRQHandler+0x20>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4798      	blx	r3
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400
 80003f4:	20000024 	.word	0x20000024

080003f8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <EXTI2_IRQHandler+0x1c>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[2]();
 8000408:	4b03      	ldr	r3, [pc, #12]	; (8000418 <EXTI2_IRQHandler+0x20>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4798      	blx	r3
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010400 	.word	0x40010400
 8000418:	20000024 	.word	0x20000024

0800041c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI3_IRQHandler+0x1c>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[3]();
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI3_IRQHandler+0x20>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4798      	blx	r3
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40010400 	.word	0x40010400
 800043c:	20000024 	.word	0x20000024

08000440 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI4_IRQHandler+0x1c>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI4_IRQHandler+0x1c>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6153      	str	r3, [r2, #20]
	//CALL IRQ CALL
	GP_CallBack[4]();
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <EXTI4_IRQHandler+0x20>)
 8000452:	691b      	ldr	r3, [r3, #16]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	20000024 	.word	0x20000024

08000464 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<5)){
 8000468:	4b26      	ldr	r3, [pc, #152]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800046a:	695b      	ldr	r3, [r3, #20]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	2b00      	cmp	r3, #0
 8000472:	d008      	beq.n	8000486 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |=(1<<5);
 8000474:	4b23      	ldr	r3, [pc, #140]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a22      	ldr	r2, [pc, #136]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[5]();
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<6)){
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |=(1<<6);
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1b      	ldr	r2, [pc, #108]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 8000498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800049c:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[6]();
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<7)){
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004a6:	695b      	ldr	r3, [r3, #20]
 80004a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |=(1<<7);
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ba:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[7]();
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<8)){
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |=(1<<8);
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d8:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[8]();
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004dc:	6a1b      	ldr	r3, [r3, #32]
 80004de:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<9)){
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d008      	beq.n	80004fe <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |=(1<<9);
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI9_5_IRQHandler+0xa0>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[9]();
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <EXTI9_5_IRQHandler+0xa4>)
 80004fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fc:	4798      	blx	r3
	}

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40010400 	.word	0x40010400
 8000508:	20000024 	.word	0x20000024

0800050c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if(EXTI->PR &(1<<10)){
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000512:	695b      	ldr	r3, [r3, #20]
 8000514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000518:	2b00      	cmp	r3, #0
 800051a:	d008      	beq.n	800052e <EXTI15_10_IRQHandler+0x22>
		EXTI->PR |=(1<<10);
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[10]();
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 800052a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800052c:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<11)){
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000536:	2b00      	cmp	r3, #0
 8000538:	d008      	beq.n	800054c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |=(1<<11);
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000544:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[11]();
 8000546:	4b21      	ldr	r3, [pc, #132]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054a:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<12)){
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d008      	beq.n	800056a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |=(1<<12);
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a1a      	ldr	r2, [pc, #104]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800055e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000562:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[12]();
 8000564:	4b19      	ldr	r3, [pc, #100]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<13)){
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000572:	2b00      	cmp	r3, #0
 8000574:	d008      	beq.n	8000588 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |=(1<<13);
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800057c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000580:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[13]();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 8000584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000586:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<14)){
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |=(1<<14);
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[14]();
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005a4:	4798      	blx	r3
	}
	if(EXTI->PR &(1<<15)){
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |=(1<<15);
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI15_10_IRQHandler+0xbc>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005bc:	6153      	str	r3, [r2, #20]
		//CALL IRQ CALL
		GP_CallBack[15]();
 80005be:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI15_10_IRQHandler+0xc0>)
 80005c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005c2:	4798      	blx	r3
	}
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010400 	.word	0x40010400
 80005cc:	20000024 	.word	0x20000024

080005d0 <MCAL_I2C_INIT>:
 *param[in]           -I2C_Config :all the I2C configuration
 * @retval           -none
 * Note              -support for SM only
 */
void MCAL_I2C_INIT(I2C_t * I2Cx , I2C_Config_t* I2C_Config)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
	uint16_t tempreg = 0 , freqrange = 0 ;
 80005da:	2300      	movs	r3, #0
 80005dc:	82fb      	strh	r3, [r7, #22]
 80005de:	2300      	movs	r3, #0
 80005e0:	82bb      	strh	r3, [r7, #20]
	uint32_t pclk1 = 8000000 ;
 80005e2:	4b7c      	ldr	r3, [pc, #496]	; (80007d4 <MCAL_I2C_INIT+0x204>)
 80005e4:	613b      	str	r3, [r7, #16]
	uint16_t result = 0 ;
 80005e6:	2300      	movs	r3, #0
 80005e8:	81fb      	strh	r3, [r7, #14]

	//Enable RCC Clock
	if (I2Cx == I2C1)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a7a      	ldr	r2, [pc, #488]	; (80007d8 <MCAL_I2C_INIT+0x208>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d110      	bne.n	8000614 <MCAL_I2C_INIT+0x44>
	{
		Global_I2C_Config[I2C1_INDEX] = *I2C_Config ;
 80005f2:	4a7a      	ldr	r2, [pc, #488]	; (80007dc <MCAL_I2C_INIT+0x20c>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	4614      	mov	r4, r2
 80005f8:	461d      	mov	r5, r3
 80005fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	682b      	ldr	r3, [r5, #0]
 8000604:	6023      	str	r3, [r4, #0]
		RCC_I2C1_CLK_EN();
 8000606:	4b76      	ldr	r3, [pc, #472]	; (80007e0 <MCAL_I2C_INIT+0x210>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a75      	ldr	r2, [pc, #468]	; (80007e0 <MCAL_I2C_INIT+0x210>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	e010      	b.n	8000636 <MCAL_I2C_INIT+0x66>


	}else //I2C2
	{
		Global_I2C_Config[I2C2_INDEX] = *I2C_Config ;
 8000614:	4b71      	ldr	r3, [pc, #452]	; (80007dc <MCAL_I2C_INIT+0x20c>)
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800061c:	4615      	mov	r5, r2
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	682b      	ldr	r3, [r5, #0]
 8000628:	6023      	str	r3, [r4, #0]
		RCC_I2C2_CLK_EN();
 800062a:	4b6d      	ldr	r3, [pc, #436]	; (80007e0 <MCAL_I2C_INIT+0x210>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a6c      	ldr	r2, [pc, #432]	; (80007e0 <MCAL_I2C_INIT+0x210>)
 8000630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000634:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_Config->I2C_Mode == I2C_Mode_I2C)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	f040 8083 	bne.w	8000746 <MCAL_I2C_INIT+0x176>
	{
		/*------------------------------------------Init Timing---------------------------*/

		//1-I2C_CR2 :FREQ[5:0]:Peripheral clock frequency
		tempreg = I2Cx->CR2 ;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	82fb      	strh	r3, [r7, #22]
		/*clear the FREQ[5:0] bits  */
		tempreg &= ~(I2C_CR2_FREQ_Msk) ;
 8000646:	8afb      	ldrh	r3, [r7, #22]
 8000648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800064c:	82fb      	strh	r3, [r7, #22]
		/*get pclk1 frequency value if clock =50NHZ put 50 in FREQ[5:0]*/
		pclk1 = MCAL_RCC_GetPCLK1();
 800064e:	f000 fb13 	bl	8000c78 <MCAL_RCC_GetPCLK1>
 8000652:	6138      	str	r0, [r7, #16]
		freqrange = (uint16_t)(pclk1 /1000000);//8000000>>20=7
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	4a63      	ldr	r2, [pc, #396]	; (80007e4 <MCAL_I2C_INIT+0x214>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	0c9b      	lsrs	r3, r3, #18
 800065e:	82bb      	strh	r3, [r7, #20]
		tempreg |= freqrange;
 8000660:	8afa      	ldrh	r2, [r7, #22]
 8000662:	8abb      	ldrh	r3, [r7, #20]
 8000664:	4313      	orrs	r3, r2
 8000666:	82fb      	strh	r3, [r7, #22]
		/* write to CR2*/
		I2Cx->CR2 = tempreg ;
 8000668:	8afa      	ldrh	r2, [r7, #22]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	605a      	str	r2, [r3, #4]

		//2-Configure the clock control registers

		/*Disable the selected I2C Peripheral to configure Time Just to make sure */
		I2Cx->CR1 &= ~(I2C_CR1_PE);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f023 0201 	bic.w	r2, r3, #1
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
		tempreg = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	82fb      	strh	r3, [r7, #22]

		/*Configure speed in standard mode */
		if((I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_50K) || (I2C_Config->I2C_ClockSpeed == I2C_SCLK_SM_100K))
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000686:	4293      	cmp	r3, r2
 8000688:	d004      	beq.n	8000694 <MCAL_I2C_INIT+0xc4>
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a56      	ldr	r2, [pc, #344]	; (80007e8 <MCAL_I2C_INIT+0x218>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d115      	bne.n	80006c0 <MCAL_I2C_INIT+0xf0>
		{
			/*standard mode speed calculation*/
			//T_high = CCR*T_pclk1 & T_pclk1 = T_high + T_low
			//CRR = Tclk / (2*Tpclk1)
			//CRR = (F_pclk1) / (2* F_i2cclk)
			result =(uint16_t) (pclk1 / ( I2C_Config->I2C_ClockSpeed * 2 ));
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	81fb      	strh	r3, [r7, #14]
			tempreg = I2Cx->CCR;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	82fb      	strh	r3, [r7, #22]
			tempreg |= result;
 80006a8:	8afa      	ldrh	r2, [r7, #22]
 80006aa:	89fb      	ldrh	r3, [r7, #14]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	82fb      	strh	r3, [r7, #22]
			/* write to CRR*/
			I2Cx->CCR = tempreg ;
 80006b0:	8afa      	ldrh	r2, [r7, #22]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	61da      	str	r2, [r3, #28]

			//3-I2C_TRISE Configuration
			/* frequency bits +1 */
			I2Cx->TRISE = freqrange +1 ;
 80006b6:	8abb      	ldrh	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	461a      	mov	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	621a      	str	r2, [r3, #32]
			//fast mode not Supported
		}

		/*------------------------------------------I2Cx CR1 Configuration ---------------------------*/
		/*get the I2Cx_CR1 Value */
		tempreg = I2Cx->CR1 ;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	82fb      	strh	r3, [r7, #22]
		tempreg |= (uint16_t)(I2C_Config->I2c_ACK_Control | I2C_Config->General_Call_Address_Detection | I2C_Config->I2C_Mode |I2C_Config->StretchMode);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b29a      	uxth	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	8afb      	ldrh	r3, [r7, #22]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	82fb      	strh	r3, [r7, #22]

		/* write to CR1*/
		I2Cx->CR1 =tempreg ;
 80006f0:	8afa      	ldrh	r2, [r7, #22]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]

		/*------------------------------------------I2Cx OAR1 & I2Cx OAR2 Configuration ---------------------------*/
		tempreg = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	82fb      	strh	r3, [r7, #22]
		if(I2C_Config->I2C_Slave_Address.Enable_Dual_ADD == 1) // there is a secendry address
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	899b      	ldrh	r3, [r3, #12]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10d      	bne.n	800071e <MCAL_I2C_INIT+0x14e>
		{
			tempreg = I2C_OAR2_ENDUAL;
 8000702:	2301      	movs	r3, #1
 8000704:	82fb      	strh	r3, [r7, #22]
			tempreg |= I2C_Config->I2C_Slave_Address.Secondary_slave_add << I2C_OAR2_ADD2_Pos; //<<1
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	8a1b      	ldrh	r3, [r3, #16]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	b21a      	sxth	r2, r3
 800070e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 =tempreg ;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60da      	str	r2, [r3, #12]
		}
		//Primary address
		tempreg = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.Primary_slave_add << 1 ;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	89db      	ldrh	r3, [r3, #14]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	b21a      	sxth	r2, r3
 800072a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800072e:	4313      	orrs	r3, r2
 8000730:	b21b      	sxth	r3, r3
 8000732:	82fb      	strh	r3, [r7, #22]
		tempreg |= I2C_Config->I2C_Slave_Address.I2C_Addressing_Slave_mode ;		//7bit add or 10
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	b29a      	uxth	r2, r3
 800073a:	8afb      	ldrh	r3, [r7, #22]
 800073c:	4313      	orrs	r3, r2
 800073e:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 =tempreg ;
 8000740:	8afa      	ldrh	r2, [r7, #22]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
	{
		//SMBUS Not supported
	}

	//Interrupt Mode (Slave Mode)
	if(I2C_Config->P_Slave_Event_CallBack != NULL) //enable SLAVE IRQ states Mode
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d038      	beq.n	80007c0 <MCAL_I2C_INIT+0x1f0>
	{
		//Enable irq
		I2Cx->CR2 |= I2C_CR2_ITERREN ;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITEVTEN ;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= I2C_CR2_ITBUFEN ;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	605a      	str	r2, [r3, #4]
		if(I2Cx == I2C1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MCAL_I2C_INIT+0x208>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10c      	bne.n	8000794 <MCAL_I2C_INIT+0x1c4>
		{
			NVIC_IRQ31_I2C1_EV_Enable;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MCAL_I2C_INIT+0x21c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MCAL_I2C_INIT+0x21c>)
 8000780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000784:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_Enable;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a19      	ldr	r2, [pc, #100]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6013      	str	r3, [r2, #0]
 8000792:	e00f      	b.n	80007b4 <MCAL_I2C_INIT+0x1e4>
		}
		else if(I2Cx == I2C2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MCAL_I2C_INIT+0x224>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d10b      	bne.n	80007b4 <MCAL_I2C_INIT+0x1e4>
		{
			NVIC_IRQ33_I2C2_EV_Enable;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 80007a2:	f043 0302 	orr.w	r3, r3, #2
 80007a6:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_Enable;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <MCAL_I2C_INIT+0x220>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1 = 0;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
		I2Cx->SR2 = 0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]

	}

	/*Enable the selected I2C Peripheral */
	I2Cx->CR1 |= (I2C_CR1_PE);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f043 0201 	orr.w	r2, r3, #1
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	601a      	str	r2, [r3, #0]

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bdb0      	pop	{r4, r5, r7, pc}
 80007d4:	007a1200 	.word	0x007a1200
 80007d8:	40005400 	.word	0x40005400
 80007dc:	20000060 	.word	0x20000060
 80007e0:	40021000 	.word	0x40021000
 80007e4:	431bde83 	.word	0x431bde83
 80007e8:	000186a0 	.word	0x000186a0
 80007ec:	e000e100 	.word	0xe000e100
 80007f0:	e000e104 	.word	0xe000e104
 80007f4:	40005800 	.word	0x40005800

080007f8 <MCAL_I2C_GPIO_Set_Pins>:
 * @retval           -none
 * Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_I2C_INIT()
 */

void MCAL_I2C_GPIO_Set_Pins (I2C_t * I2Cx)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pincfg;

	if(I2Cx == I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1a      	ldr	r2, [pc, #104]	; (800086c <MCAL_I2C_GPIO_Set_Pins+0x74>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d114      	bne.n	8000832 <MCAL_I2C_GPIO_Set_Pins+0x3a>
	{
		//PB6 : I2C1_SCL
		//PB7 : I2C1_SDA
		Pincfg.GPIO_Pin_Number = GPIO_Pin_6 ;
 8000808:	2306      	movs	r3, #6
 800080a:	737b      	strb	r3, [r7, #13]
		Pincfg.GPIO_Mode = GPIO_MODE_AF_OD_10M;
 800080c:	230d      	movs	r3, #13
 800080e:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4816      	ldr	r0, [pc, #88]	; (8000870 <MCAL_I2C_GPIO_Set_Pins+0x78>)
 8000818:	f000 fab8 	bl	8000d8c <MCAL_GPIO_Init>

		Pincfg.GPIO_Pin_Number = GPIO_Pin_7 ;
 800081c:	2307      	movs	r3, #7
 800081e:	737b      	strb	r3, [r7, #13]
		Pincfg.GPIO_Mode = GPIO_MODE_AF_OD_10M;
 8000820:	230d      	movs	r3, #13
 8000822:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &Pincfg);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4811      	ldr	r0, [pc, #68]	; (8000870 <MCAL_I2C_GPIO_Set_Pins+0x78>)
 800082c:	f000 faae 	bl	8000d8c <MCAL_GPIO_Init>
		Pincfg.GPIO_Mode = GPIO_MODE_AF_OD_10M;
		MCAL_GPIO_Init(GPIOB, &Pincfg);
	}


}
 8000830:	e017      	b.n	8000862 <MCAL_I2C_GPIO_Set_Pins+0x6a>
	else if(I2Cx == I2C2)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MCAL_I2C_GPIO_Set_Pins+0x7c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d113      	bne.n	8000862 <MCAL_I2C_GPIO_Set_Pins+0x6a>
		Pincfg.GPIO_Pin_Number = GPIO_Pin_10 ;
 800083a:	230a      	movs	r3, #10
 800083c:	737b      	strb	r3, [r7, #13]
		Pincfg.GPIO_Mode = GPIO_MODE_AF_OD_10M;
 800083e:	230d      	movs	r3, #13
 8000840:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB,&Pincfg);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <MCAL_I2C_GPIO_Set_Pins+0x78>)
 800084a:	f000 fa9f 	bl	8000d8c <MCAL_GPIO_Init>
		Pincfg.GPIO_Pin_Number = GPIO_Pin_11 ;
 800084e:	230b      	movs	r3, #11
 8000850:	737b      	strb	r3, [r7, #13]
		Pincfg.GPIO_Mode = GPIO_MODE_AF_OD_10M;
 8000852:	230d      	movs	r3, #13
 8000854:	733b      	strb	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &Pincfg);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MCAL_I2C_GPIO_Set_Pins+0x78>)
 800085e:	f000 fa95 	bl	8000d8c <MCAL_GPIO_Init>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40005400 	.word	0x40005400
 8000870:	40010c00 	.word	0x40010c00
 8000874:	40005800 	.word	0x40005800

08000878 <MCAL_I2C_Master_TX>:
 * param[in]            -Start : specifies whether is there a repeated start or not
 * @retval           	-none
 * Note              	-none
 */
void MCAL_I2C_Master_TX(I2C_t * I2Cx , uint16_t devAddr , uint8_t* dataOut , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	460b      	mov	r3, r1
 8000886:	817b      	strh	r3, [r7, #10]
	int i = 0; uint32_t dummyread;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
	 * timer_interuptISR{flag = 1}
	 * so any code exist in while(check flag || any polling conditions) */
	/* These Steps are according to figure 273 */
	/*1--Set the start bit in the I2C_CR1 register to generate a start condition */

	I2C_GenerateSTART(I2Cx, ENABLE,Start);
 800088c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000890:	461a      	mov	r2, r3
 8000892:	2101      	movs	r1, #1
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f000 f8cf 	bl	8000a38 <I2C_GenerateSTART>

	/*2--wait for EV5*/
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while (!(I2Cx->SR1 & I2C_SR1_SB));
 800089a:	bf00      	nop
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0f9      	beq.n	800089c <MCAL_I2C_Master_TX+0x24>

	/*--Send Address*/
	I2C_SendAddress(I2Cx, devAddr,I2C_Direction_Transmitter);
 80008a8:	897b      	ldrh	r3, [r7, #10]
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f8e9 	bl	8000a86 <I2C_SendAddress>

	/*3--wait for EV6*/
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while (!(I2Cx->SR1 & I2C_SR1_ADDR));
 80008b4:	bf00      	nop
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f9      	beq.n	80008b6 <MCAL_I2C_Master_TX+0x3e>
	dummyread=I2Cx->SR2;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	613b      	str	r3, [r7, #16]

	/*4--check for TRA , BUSY (BUS is busy),MSL(still the Master did not lose arbitration),TXE(EV8_1)*/
	//EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR.
	while (!((I2Cx->SR1 & I2C_SR1_TXE)&&(I2Cx->SR2 & I2C_SR2_MSL)&&(I2Cx->SR2 & I2C_SR2_BUSY)));
 80008c8:	bf00      	nop
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f9      	beq.n	80008ca <MCAL_I2C_Master_TX+0x52>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f3      	beq.n	80008ca <MCAL_I2C_Master_TX+0x52>
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0ed      	beq.n	80008ca <MCAL_I2C_Master_TX+0x52>

	/*Send the data*/
	for(i=0 ; i< datalen ; i++)
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e010      	b.n	8000916 <MCAL_I2C_Master_TX+0x9e>
	{
		/*write in the DR register the data to be sent*/
		I2Cx->DR = dataOut[i];
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	611a      	str	r2, [r3, #16]
		/*wait for EV8*/
		//EV8: TxE=1, shift register not empty, .data register empty, cleared by writing DR register
		while (!(I2Cx->SR1 & I2C_SR1_TXE));
 8000902:	bf00      	nop
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f9      	beq.n	8000904 <MCAL_I2C_Master_TX+0x8c>
	for(i=0 ; i< datalen ; i++)
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	3301      	adds	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d8ea      	bhi.n	80008f4 <MCAL_I2C_Master_TX+0x7c>
	/*6--wait for EV8_2*/ //Not Mandatory
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//while (!(I2C_GetFlagStatus(I2Cx,EV8_2)));

	/*7--send a stop condition*/
	if(Stop == with_Stop)
 800091e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <MCAL_I2C_Master_TX+0xb6>
	{
		I2C_GenerateSTOP(I2Cx,ENABLE);
 8000926:	2101      	movs	r1, #1
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f000 f8cb 	bl	8000ac4 <I2C_GenerateSTOP>
	}

}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <MCAL_I2C_Master_RX>:
 * param[in]            -Start : specifies whether is there a repeated start or not
 * @retval           	-none
 * Note              	-none
 */
void MCAL_I2C_Master_RX(I2C_t * I2Cx , uint16_t devAddr , uint8_t* dataOut , uint32_t datalen , Stop_Condition Stop , Repeated_Start Start)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	607a      	str	r2, [r7, #4]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	460b      	mov	r3, r1
 8000946:	817b      	strh	r3, [r7, #10]
	uint8_t index = (I2Cx == I2C1) ? I2C1_INDEX :I2C2_INDEX ;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	4a39      	ldr	r2, [pc, #228]	; (8000a30 <MCAL_I2C_Master_RX+0xf8>)
 800094c:	4293      	cmp	r3, r2
 800094e:	bf14      	ite	ne
 8000950:	2301      	movne	r3, #1
 8000952:	2300      	moveq	r3, #0
 8000954:	b2db      	uxtb	r3, r3
 8000956:	76fb      	strb	r3, [r7, #27]
	int i = 0; uint32_t dummyread;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]

	/*1--Set the start bit in the I2C_CR1 register to generate a start condition */

	I2C_GenerateSTART(I2Cx, ENABLE,Start);
 800095c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000960:	461a      	mov	r2, r3
 8000962:	2101      	movs	r1, #1
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f000 f867 	bl	8000a38 <I2C_GenerateSTART>

	/*2--wait for EV5*/
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while (!(I2Cx->SR1 & I2C_SR1_SB));
 800096a:	bf00      	nop
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <MCAL_I2C_Master_RX+0x34>

	/*--Send Address*/
	I2C_SendAddress(I2Cx, devAddr,I2C_Direction_receieve);
 8000978:	897b      	ldrh	r3, [r7, #10]
 800097a:	2201      	movs	r2, #1
 800097c:	4619      	mov	r1, r3
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f000 f881 	bl	8000a86 <I2C_SendAddress>

	/*3--wait for EV6*/
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while (!(I2Cx->SR1 & I2C_SR1_ADDR));
 8000984:	bf00      	nop
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f9      	beq.n	8000986 <MCAL_I2C_Master_RX+0x4e>
	dummyread=I2Cx->SR2;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	617b      	str	r3, [r7, #20]

	//enable the ACKnowlage
	I2C_ACKnowlageConfig(I2Cx ,ENABLE);
 8000998:	2101      	movs	r1, #1
 800099a:	68f8      	ldr	r0, [r7, #12]
 800099c:	f000 f8ad 	bl	8000afa <I2C_ACKnowlageConfig>

	if(datalen)//if the data exist
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d03f      	beq.n	8000a26 <MCAL_I2C_Master_RX+0xee>
	{   //read the data until len become zero
		for(i= datalen ; i >1 ; i--)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	e011      	b.n	80009d0 <MCAL_I2C_Master_RX+0x98>
		{
			/*4--wait for EV7 RXNE */
			while (!(I2Cx->SR1 & I2C_SR1_RXNE));
 80009ac:	bf00      	nop
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <MCAL_I2C_Master_RX+0x76>

			/*read the data from the DR into the buffer*/
			*dataOut = I2Cx->DR ;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	701a      	strb	r2, [r3, #0]

			/*Increment the buffer*/
			dataOut++;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3301      	adds	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
		for(i= datalen ; i >1 ; i--)
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	dcea      	bgt.n	80009ac <MCAL_I2C_Master_RX+0x74>
			must be cleared just after reading the second last data byte (after second last RxNE
			event).
		  2. To generate the Stop/Restart condition, software must set the STOP/START bit just
			after reading the second last data byte (after the second last RxNE event).*/
		//5--Send Not ACKnowlage
		I2C_ACKnowlageConfig(I2Cx ,DISABLE);
 80009d6:	2100      	movs	r1, #0
 80009d8:	68f8      	ldr	r0, [r7, #12]
 80009da:	f000 f88e 	bl	8000afa <I2C_ACKnowlageConfig>
		while (!(I2Cx->SR1 & I2C_SR1_RXNE));
 80009de:	bf00      	nop
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f9      	beq.n	80009e0 <MCAL_I2C_Master_RX+0xa8>
		/*6--send a stop condition*/
		if(Stop == with_Stop)
 80009ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <MCAL_I2C_Master_RX+0xc4>
		{
			I2C_GenerateSTOP(I2Cx,ENABLE);
 80009f4:	2101      	movs	r1, #1
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f000 f864 	bl	8000ac4 <I2C_GenerateSTOP>
		}

		//RE enable ACKnowlage if this is the defalt
		if(Global_I2C_Config[index].I2c_ACK_Control == I2C_ACK_Enable)
 80009fc:	7efa      	ldrb	r2, [r7, #27]
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <MCAL_I2C_Master_RX+0xfc>)
 8000a00:	4613      	mov	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	3318      	adds	r3, #24
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a12:	d103      	bne.n	8000a1c <MCAL_I2C_Master_RX+0xe4>
		{
			I2C_ACKnowlageConfig(I2Cx ,ENABLE);
 8000a14:	2101      	movs	r1, #1
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f86f 	bl	8000afa <I2C_ACKnowlageConfig>
		}
		/*read the data from the DR into the buffer*/
		*dataOut = I2Cx->DR ;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	701a      	strb	r2, [r3, #0]
	}




}
 8000a26:	bf00      	nop
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40005400 	.word	0x40005400
 8000a34:	20000060 	.word	0x20000060

08000a38 <I2C_GenerateSTART>:
 * ========================================================
 */


void I2C_GenerateSTART(I2C_t * I2Cx , FunctionalState NewState ,Repeated_Start Start)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	70fb      	strb	r3, [r7, #3]
 8000a44:	4613      	mov	r3, r2
 8000a46:	70bb      	strb	r3, [r7, #2]
	if(Start != repeated_start)
 8000a48:	78bb      	ldrb	r3, [r7, #2]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d006      	beq.n	8000a5c <I2C_GenerateSTART+0x24>
	{
		//pollinG until the bus is idle
		while (I2Cx->SR2 & I2C_SR2_BUSY_Msk); //Should  be associated with a timeout
 8000a4e:	bf00      	nop
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f9      	bne.n	8000a50 <I2C_GenerateSTART+0x18>
	}

	if(NewState != DISABLE )
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <I2C_GenerateSTART+0x38>
	{
		/*Generate a start condition*/
		I2Cx->CR1 |= I2C_CR1_START ;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
	else
	{
		/*disable the  start condition*/
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
	}
}
 8000a6e:	e005      	b.n	8000a7c <I2C_GenerateSTART+0x44>
		I2Cx->CR1 &= ~(I2C_CR1_START) ;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <I2C_SendAddress>:
void I2C_SendAddress(I2C_t * I2Cx ,uint16_t Address , I2C_Direction Direction)//suppoted 7 bit mode only
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]
 8000a92:	4613      	mov	r3, r2
 8000a94:	707b      	strb	r3, [r7, #1]
	Address = Address <<1 ;
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	807b      	strh	r3, [r7, #2]
	if(Direction != I2C_Direction_Transmitter)
 8000a9c:	787b      	ldrb	r3, [r7, #1]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <I2C_SendAddress+0x26>
	{
		/*Set the address bit0 for read*/
		Address |= 1<<0;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	807b      	strh	r3, [r7, #2]
 8000aaa:	e003      	b.n	8000ab4 <I2C_SendAddress+0x2e>
	}
	else
	{
		/*reset the address b it0 for write*/
		Address &= ~ (1<<0);
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	f023 0301 	bic.w	r3, r3, #1
 8000ab2:	807b      	strh	r3, [r7, #2]
	}

	/*Send the address*/
	I2Cx->DR = Address ;
 8000ab4:	887a      	ldrh	r2, [r7, #2]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]

}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <I2C_GenerateSTOP>:
void I2C_GenerateSTOP(I2C_t * I2Cx , FunctionalState NewState)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <I2C_GenerateSTOP+0x20>
	{
		/*generate a stop condition*/
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
	else
	{
		/*disable the stop condition*/
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000ae2:	e005      	b.n	8000af0 <I2C_GenerateSTOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <I2C_ACKnowlageConfig>:

void I2C_ACKnowlageConfig(I2C_t * I2Cx  ,FunctionalState NewState)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	70fb      	strb	r3, [r7, #3]
	if(NewState != DISABLE)
 8000b06:	78fb      	ldrb	r3, [r7, #3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <I2C_ACKnowlageConfig+0x20>
		{
			/*generate the acknowledge*/
			I2Cx->CR1 |= I2C_CR1_ACK;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
		else
		{
			/*disable the acknowledge*/
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
		}
}
 8000b18:	e005      	b.n	8000b26 <I2C_ACKnowlageConfig+0x2c>
			I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <MCAL_RCC_GetSYS_CLK>:
/*
 * ===============================================
 * APIs Supported by "MCAL RCC DRIVER"
 * ===============================================
 */
uint32_t MCAL_RCC_GetSYS_CLK(void){
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	switch ( (RCC->CFGR >>2) &0b11 ){
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d006      	beq.n	8000b50 <MCAL_RCC_GetSYS_CLK+0x20>
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d302      	bcc.n	8000b4c <MCAL_RCC_GetSYS_CLK+0x1c>
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d004      	beq.n	8000b54 <MCAL_RCC_GetSYS_CLK+0x24>
 8000b4a:	e06e      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
	//HSI selected as system clock
	case 0:
		return HSI_RC_CLK;
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	; (8000c38 <MCAL_RCC_GetSYS_CLK+0x108>)
 8000b4e:	e06c      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//HSE selected as system clock
	case 1:
		return HSE_CLK;
 8000b50:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000b52:	e06a      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
		break;
	//PLL selected as system clock
	case 2:
		switch ( (RCC->CFGR >>16) &0b1 ){
 8000b54:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	0c1b      	lsrs	r3, r3, #16
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <MCAL_RCC_GetSYS_CLK+0x38>
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d01e      	beq.n	8000ba4 <MCAL_RCC_GetSYS_CLK+0x74>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
			}

			break;

		}break;
 8000b66:	e060      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
			if (((RCC->CFGR >>18)& 0b1111) ==15   )
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	d109      	bne.n	8000b8a <MCAL_RCC_GetSYS_CLK+0x5a>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000b76:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	f003 030f 	and.w	r3, r3, #15
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	e04f      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
				return (HSI_RC_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	f003 030f 	and.w	r3, r3, #15
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000b9e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8000ba2:	e042      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
			if((RCC->CFGR >>17) &0b1){
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	0c5b      	lsrs	r3, r3, #17
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01d      	beq.n	8000bee <MCAL_RCC_GetSYS_CLK+0xbe>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	f003 030f 	and.w	r3, r3, #15
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d109      	bne.n	8000bd4 <MCAL_RCC_GetSYS_CLK+0xa4>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	0c9b      	lsrs	r3, r3, #18
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3301      	adds	r3, #1
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <MCAL_RCC_GetSYS_CLK+0x110>)
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	e02a      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK>>1)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <MCAL_RCC_GetSYS_CLK+0x110>)
 8000be0:	fb02 f303 	mul.w	r3, r2, r3
 8000be4:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8000be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000bec:	e01d      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
				if (((RCC->CFGR >>18)& 0b1111) ==15   )
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d109      	bne.n	8000c10 <MCAL_RCC_GetSYS_CLK+0xe0>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+1 );
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	0c9b      	lsrs	r3, r3, #18
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	e00c      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>
					return (HSE_CLK)*( ( (RCC->CFGR >>18)& 0b1111 )+2 );
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MCAL_RCC_GetSYS_CLK+0x104>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	f003 030f 	and.w	r3, r3, #15
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <MCAL_RCC_GetSYS_CLK+0x10c>)
 8000c1c:	fb02 f303 	mul.w	r3, r2, r3
 8000c20:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000c24:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8000c28:	e7ff      	b.n	8000c2a <MCAL_RCC_GetSYS_CLK+0xfa>

	}

}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	007a1200 	.word	0x007a1200
 8000c3c:	003d0900 	.word	0x003d0900
 8000c40:	001e8480 	.word	0x001e8480

08000c44 <MCAL_RCC_GetHCLK>:
 * @param [in] -	none
 * @param [out] -	None
 * @retval -		Freq
 * Note-
 */
uint32_t MCAL_RCC_GetHCLK(void){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	uint32_t test=(MCAL_RCC_GetSYS_CLK() >> AHBprescTable[( (RCC->CFGR >>4) &0b1111 )]);
 8000c4a:	f7ff ff71 	bl	8000b30 <MCAL_RCC_GetSYS_CLK>
 8000c4e:	4601      	mov	r1, r0
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MCAL_RCC_GetHCLK+0x2c>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <MCAL_RCC_GetHCLK+0x30>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000c62:	607b      	str	r3, [r7, #4]
	return test;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
 8000c74:	08000ea0 	.word	0x08000ea0

08000c78 <MCAL_RCC_GetPCLK1>:
// bits 8 :10 PPRE1 APB1 prescaler
uint32_t MCAL_RCC_GetPCLK1(void){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLK() >> APBprescTable[( (RCC->CFGR >>8) &0b111 )]);
 8000c7c:	f7ff ffe2 	bl	8000c44 <MCAL_RCC_GetHCLK>
 8000c80:	4601      	mov	r1, r0
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <MCAL_RCC_GetPCLK1+0x20>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	0a1b      	lsrs	r3, r3, #8
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	4a03      	ldr	r2, [pc, #12]	; (8000c9c <MCAL_RCC_GetPCLK1+0x24>)
 8000c8e:	5cd3      	ldrb	r3, [r2, r3]
 8000c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	08000e98 	.word	0x08000e98

08000ca0 <SPI1_IRQHandler>:
/*=================================================================*/
/*=========================IRQ=====================================*/
/*=================================================================*/

void SPI1_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI1->SR)&(1<<1)>>1);
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <SPI1_IRQHandler+0x50>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	f362 0300 	bfi	r3, r2, #0, #1
 8000cb6:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR)&(1<<0)>>0);
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <SPI1_IRQHandler+0x50>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	793b      	ldrb	r3, [r7, #4]
 8000cc4:	f362 0341 	bfi	r3, r2, #1, #1
 8000cc8:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SR)&(1<<4)>>4);
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <SPI1_IRQHandler+0x50>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	793b      	ldrb	r3, [r7, #4]
 8000cd6:	f362 0382 	bfi	r3, r2, #2, #1
 8000cda:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SPI1_IRQHandler+0x54>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	7938      	ldrb	r0, [r7, #4]
 8000ce4:	4798      	blx	r3
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40013000 	.word	0x40013000
 8000cf4:	2000001c 	.word	0x2000001c

08000cf8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	irq_src.TXE = ((SPI2->SR)&(1<<1)>>1);
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <SPI2_IRQHandler+0x50>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	793b      	ldrb	r3, [r7, #4]
 8000d0a:	f362 0300 	bfi	r3, r2, #0, #1
 8000d0e:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR)&(1<<0)>>0);
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SPI2_IRQHandler+0x50>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	793b      	ldrb	r3, [r7, #4]
 8000d1c:	f362 0341 	bfi	r3, r2, #1, #1
 8000d20:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI2->SR)&(1<<4)>>4);
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <SPI2_IRQHandler+0x50>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	793b      	ldrb	r3, [r7, #4]
 8000d2e:	f362 0382 	bfi	r3, r2, #2, #1
 8000d32:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <SPI2_IRQHandler+0x54>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	7938      	ldrb	r0, [r7, #4]
 8000d3c:	4798      	blx	r3
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40003800 	.word	0x40003800
 8000d4c:	2000001c 	.word	0x2000001c

08000d50 <USART1_IRQHandler>:
	}


//ISR
void USART1_IRQHandler()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	Global_UART1_Config->P_IRQ_CallBack();
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <USART1_IRQHandler+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	4798      	blx	r3
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	200000a8 	.word	0x200000a8

08000d64 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	Global_UART2_Config->P_IRQ_CallBack();
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <USART2_IRQHandler+0x10>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	4798      	blx	r3
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000e8 	.word	0x200000e8

08000d78 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	Global_UART3_Config->P_IRQ_CallBack();
 8000d7c:	4b02      	ldr	r3, [pc, #8]	; (8000d88 <USART3_IRQHandler+0x10>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	4798      	blx	r3
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000ec 	.word	0x200000ec

08000d8c <MCAL_GPIO_Init>:
* @param [out] -	None
* @retval -			None
* Note-				STM32F103C6 MCU has PORTS A,B,C,D,E
* 					While LQFP84 Has only A,B and Part of C,D
*/
void MCAL_GPIO_Init(GPIO_t *GPIOx, GPIO_PinConfig_t* pinconfig){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	//CRL used for pins from 0:7
	if((pinconfig->GPIO_Pin_Number)*4<32){
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	785b      	ldrb	r3, [r3, #1]
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	2b1f      	cmp	r3, #31
 8000d9e:	dc19      	bgt.n	8000dd4 <MCAL_GPIO_Init+0x48>
		GPIOx->CRL &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	7852      	ldrb	r2, [r2, #1]
 8000da8:	0092      	lsls	r2, r2, #2
 8000daa:	210f      	movs	r1, #15
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	43d2      	mvns	r2, r2
 8000db2:	401a      	ands	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	7812      	ldrb	r2, [r2, #0]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	7852      	ldrb	r2, [r2, #1]
 8000dc6:	0092      	lsls	r2, r2, #2
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e01a      	b.n	8000e0a <MCAL_GPIO_Init+0x7e>
	}//CRH used to configure pins 8:15
	else{
		GPIOx->CRH &=~(0xF<<((pinconfig->GPIO_Pin_Number)*4-32));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	7852      	ldrb	r2, [r2, #1]
 8000ddc:	3a08      	subs	r2, #8
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	210f      	movs	r1, #15
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	43d2      	mvns	r2, r2
 8000de8:	401a      	ands	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |=(pinconfig->GPIO_Mode<<((pinconfig->GPIO_Pin_Number)*4-32));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	4611      	mov	r1, r2
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	7852      	ldrb	r2, [r2, #1]
 8000dfc:	3a08      	subs	r2, #8
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	fa01 f202 	lsl.w	r2, r1, r2
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]
	}
	/*Incase of Input Pull Down ODR should be set for the specific pin*/
	if (pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b18      	cmp	r3, #24
 8000e10:	d109      	bne.n	8000e26 <MCAL_GPIO_Init+0x9a>
		GPIOx->ODR |=(1<<pinconfig->GPIO_Pin_Number);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	7852      	ldrb	r2, [r2, #1]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	408a      	lsls	r2, r1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60da      	str	r2, [r3, #12]

}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <__libc_init_array>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	2500      	movs	r5, #0
 8000e34:	4e0c      	ldr	r6, [pc, #48]	; (8000e68 <__libc_init_array+0x38>)
 8000e36:	4c0d      	ldr	r4, [pc, #52]	; (8000e6c <__libc_init_array+0x3c>)
 8000e38:	1ba4      	subs	r4, r4, r6
 8000e3a:	10a4      	asrs	r4, r4, #2
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	d109      	bne.n	8000e54 <__libc_init_array+0x24>
 8000e40:	f000 f81a 	bl	8000e78 <_init>
 8000e44:	2500      	movs	r5, #0
 8000e46:	4e0a      	ldr	r6, [pc, #40]	; (8000e70 <__libc_init_array+0x40>)
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <__libc_init_array+0x44>)
 8000e4a:	1ba4      	subs	r4, r4, r6
 8000e4c:	10a4      	asrs	r4, r4, #2
 8000e4e:	42a5      	cmp	r5, r4
 8000e50:	d105      	bne.n	8000e5e <__libc_init_array+0x2e>
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e58:	4798      	blx	r3
 8000e5a:	3501      	adds	r5, #1
 8000e5c:	e7ee      	b.n	8000e3c <__libc_init_array+0xc>
 8000e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e62:	4798      	blx	r3
 8000e64:	3501      	adds	r5, #1
 8000e66:	e7f2      	b.n	8000e4e <__libc_init_array+0x1e>
 8000e68:	08000eb0 	.word	0x08000eb0
 8000e6c:	08000eb0 	.word	0x08000eb0
 8000e70:	08000eb0 	.word	0x08000eb0
 8000e74:	08000eb4 	.word	0x08000eb4

08000e78 <_init>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	bf00      	nop
 8000e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7e:	bc08      	pop	{r3}
 8000e80:	469e      	mov	lr, r3
 8000e82:	4770      	bx	lr

08000e84 <_fini>:
 8000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e86:	bf00      	nop
 8000e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8a:	bc08      	pop	{r3}
 8000e8c:	469e      	mov	lr, r3
 8000e8e:	4770      	bx	lr
