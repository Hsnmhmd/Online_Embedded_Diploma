#ifndef INC_STM32_F103C6_I2C_DRIVER_H_
#define INC_STM32_F103C6_I2C_DRIVER_H_

#include<stm32f103x6.h>
#include"Stm32_F103C6_gpio_driver.h"


struct S_IRQ_SRC
{
	uint8_t TXE:1;		//TX buffer is empty
	uint8_t	RXNE:1;		//Rx buffer is empty
	uint8_t	ERRI:1;		//Error interrupt
	uint8_t Reserved:5;
};
//Configuration Struct
typedef struct
{

	void(*P_IRQ_CallBack)(struct S_IRQ_SRC IRQ);			//Call_Back_Function
}I2C_Config_t;

enum SPI_PollingMechanism
{
	Disabled,
	Enabled

};
/*=================================================================
 * =======================ref Macros
 * ================================================================*/
//@ref SPI_Mode_Define
	#define SPI_Mode_Master								(0x1<<2)
	#define SPI_Mode_Slave								(0x00000000U)
//@ref SPI_Communication_Mode_Define
	#define SPI_Direction_2lines						(0x00000000U)
	#define SPI_Direction_2lines_RX_Only				(0x1<<10)
	#define SPI_Direction_1lines_Receive_only			(0x1<<15)
	#define SPI_Direction_1lines_Transmit_only			((0x1<<15)|(0x1<<14))
//@ref SPI_Pay_Load_Length
	#define SPI_Pay_Load_Length_8bit					(0x00000000U)
	#define SPI_Pay_Load_Length_16bit					(0x1<<11)
//@ref  SPI_Frame_Format_Define
	#define SPI_Frame_Format_MSB_1st						(0x00000000U)
	#define SPI_Frame_Format_LSB_1st						(0x1<<7)
//@ref SPI_Clock_Polarity_Define
	#define SPI_Clock_Polarity_Low_idel					(0x00000000U)
	#define SPI_Clock_Polarity_High_idel				(0x1<<1)
//@ref SPI_Clock_Phase_Define
	#define SPI_Clock_Phase_Leading						(0x00000000U)
	#define SPI_Clock_Phase_Trailing					(0x1)
//@ref SPI_NSS_Define
	//Hardware
	#define SPI_NSS_Hard_Slave							(0x00000000U)
	#define SPI_NSS_Hard_Master_SS_Output_Enable		(0x1<<2) 	//Single Master Mode
																	//CR2 1: SS output is enabled in master mode and when the cell is enabled. The cell cannot work
																  	//in a multimaster environment.
	#define SPI_NSS_Hard_Master_SS_No_output			(0x00000000U)//CR2 0: SS output is disabled in master mode and the cell can work in multimaster configuration
	//Software
	#define SPI_NSS_Internal_Soft_Reset					(0x1<<9)
	#define SPI_NSS_Internal_Soft_Set					((0x1<<9)|(0x1<<8))
//@ref SPI_Prescaler_Define
	#define SPI_Divide_Prescaler_2							 (0x00000000U)
	#define SPI_Divide_Prescaler_4							 (0b001<<3)
	#define SPI_Divide_Prescaler_8							 (0b010<<3)
	#define SPI_Divide_Prescaler_16							 (0b011<<3)
	#define SPI_Divide_Prescaler_32							 (0b100<<3)
	#define SPI_Divide_Prescaler_64							 (0b101<<3)
	#define SPI_Divide_Prescaler_128						 (0b110<<3)
	#define SPI_Divide_Prescaler_256						 (0b111<<3)
//@ref SPI_IRQ_Enable_Define
	#define SPI_IRQ_Enable_Non							 (uint32_t)(0)
	#define SPI_IRQ_Enable_TXE							 (uint32_t)(1<<7)
	#define SPI_IRQ_Enable_RXNE							 (uint32_t)(1<<6)
	#define SPI_IRQ_Enable_Err							 (uint32_t)(1<<5)




 /*
 * =======================================================
 *              APIS_Supported_By "MCAL SPI Driver"
 * =======================================================
 *
 */

/* Initialization/def-initialization Functions********/
void MCAL_SPI_Init(SPI_t * SPIx , SPI_Config_t * Config);
void MCAL_SPI_DeInit(SPI_t * SPIx);
void MCAL_SPI_GPIO_Set_Pins(SPI_t * SPIx);
void MCAL_SPI_SendData(SPI_t * SPIx , uint16_t * pTXBuffer , enum SPI_PollingMechanism Polling_En);
void MCAL_SPI_ReceiveData(SPI_t * SPIx,uint16_t * pRXBuffer , enum SPI_PollingMechanism Polling_En);
void MCAL_SPI_Tx_Rx(SPI_t * SPIx ,uint16_t * TX_RX_pBuffer , enum SPI_PollingMechanism Polling_En);









#endif
